
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003684  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037e0  080037e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080037e0  080037e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037e0  080037e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000010  080037f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  080037f8  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129e4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021aa  00000000  00000000  00032a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015c61  00000000  00000000  000365f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a469  00000000  00000000  0004c251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074221  00000000  00000000  000566ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003938  00000000  00000000  000ca958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003778 	.word	0x08003778

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003778 	.word	0x08003778

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f003 f8e0 	bl	800332c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000468:	b480      	push	{r7}
 800046a:	b08b      	sub	sp, #44	; 0x2c
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000476:	2300      	movs	r3, #0
 8000478:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800047e:	2300      	movs	r3, #0
 8000480:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000482:	2300      	movs	r3, #0
 8000484:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000486:	2300      	movs	r3, #0
 8000488:	627b      	str	r3, [r7, #36]	; 0x24
 800048a:	e127      	b.n	80006dc <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800048c:	2201      	movs	r2, #1
 800048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	69fa      	ldr	r2, [r7, #28]
 800049c:	4013      	ands	r3, r2
 800049e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80004a0:	69ba      	ldr	r2, [r7, #24]
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	f040 8116 	bne.w	80006d6 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2b12      	cmp	r3, #18
 80004b0:	d034      	beq.n	800051c <HAL_GPIO_Init+0xb4>
 80004b2:	2b12      	cmp	r3, #18
 80004b4:	d80d      	bhi.n	80004d2 <HAL_GPIO_Init+0x6a>
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d02b      	beq.n	8000512 <HAL_GPIO_Init+0xaa>
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d804      	bhi.n	80004c8 <HAL_GPIO_Init+0x60>
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d031      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d01c      	beq.n	8000500 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004c6:	e048      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d043      	beq.n	8000554 <HAL_GPIO_Init+0xec>
 80004cc:	2b11      	cmp	r3, #17
 80004ce:	d01b      	beq.n	8000508 <HAL_GPIO_Init+0xa0>
          break;
 80004d0:	e043      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004d2:	4a87      	ldr	r2, [pc, #540]	; (80006f0 <HAL_GPIO_Init+0x288>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d026      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004d8:	4a85      	ldr	r2, [pc, #532]	; (80006f0 <HAL_GPIO_Init+0x288>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d806      	bhi.n	80004ec <HAL_GPIO_Init+0x84>
 80004de:	4a85      	ldr	r2, [pc, #532]	; (80006f4 <HAL_GPIO_Init+0x28c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d020      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004e4:	4a84      	ldr	r2, [pc, #528]	; (80006f8 <HAL_GPIO_Init+0x290>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d01d      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
          break;
 80004ea:	e036      	b.n	800055a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80004ec:	4a83      	ldr	r2, [pc, #524]	; (80006fc <HAL_GPIO_Init+0x294>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d019      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004f2:	4a83      	ldr	r2, [pc, #524]	; (8000700 <HAL_GPIO_Init+0x298>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d016      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
 80004f8:	4a82      	ldr	r2, [pc, #520]	; (8000704 <HAL_GPIO_Init+0x29c>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d013      	beq.n	8000526 <HAL_GPIO_Init+0xbe>
          break;
 80004fe:	e02c      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	623b      	str	r3, [r7, #32]
          break;
 8000506:	e028      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	3304      	adds	r3, #4
 800050e:	623b      	str	r3, [r7, #32]
          break;
 8000510:	e023      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	68db      	ldr	r3, [r3, #12]
 8000516:	3308      	adds	r3, #8
 8000518:	623b      	str	r3, [r7, #32]
          break;
 800051a:	e01e      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	330c      	adds	r3, #12
 8000522:	623b      	str	r3, [r7, #32]
          break;
 8000524:	e019      	b.n	800055a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d102      	bne.n	8000534 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800052e:	2304      	movs	r3, #4
 8000530:	623b      	str	r3, [r7, #32]
          break;
 8000532:	e012      	b.n	800055a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d105      	bne.n	8000548 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800053c:	2308      	movs	r3, #8
 800053e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	69fa      	ldr	r2, [r7, #28]
 8000544:	611a      	str	r2, [r3, #16]
          break;
 8000546:	e008      	b.n	800055a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000548:	2308      	movs	r3, #8
 800054a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	69fa      	ldr	r2, [r7, #28]
 8000550:	615a      	str	r2, [r3, #20]
          break;
 8000552:	e002      	b.n	800055a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000554:	2300      	movs	r3, #0
 8000556:	623b      	str	r3, [r7, #32]
          break;
 8000558:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800055a:	69bb      	ldr	r3, [r7, #24]
 800055c:	2bff      	cmp	r3, #255	; 0xff
 800055e:	d801      	bhi.n	8000564 <HAL_GPIO_Init+0xfc>
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	e001      	b.n	8000568 <HAL_GPIO_Init+0x100>
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3304      	adds	r3, #4
 8000568:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	2bff      	cmp	r3, #255	; 0xff
 800056e:	d802      	bhi.n	8000576 <HAL_GPIO_Init+0x10e>
 8000570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	e002      	b.n	800057c <HAL_GPIO_Init+0x114>
 8000576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000578:	3b08      	subs	r3, #8
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	210f      	movs	r1, #15
 8000584:	693b      	ldr	r3, [r7, #16]
 8000586:	fa01 f303 	lsl.w	r3, r1, r3
 800058a:	43db      	mvns	r3, r3
 800058c:	401a      	ands	r2, r3
 800058e:	6a39      	ldr	r1, [r7, #32]
 8000590:	693b      	ldr	r3, [r7, #16]
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	f000 8096 	beq.w	80006d6 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005aa:	4b57      	ldr	r3, [pc, #348]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	4a56      	ldr	r2, [pc, #344]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6193      	str	r3, [r2, #24]
 80005b6:	4b54      	ldr	r3, [pc, #336]	; (8000708 <HAL_GPIO_Init+0x2a0>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80005c2:	4a52      	ldr	r2, [pc, #328]	; (800070c <HAL_GPIO_Init+0x2a4>)
 80005c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	3302      	adds	r3, #2
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	f003 0303 	and.w	r3, r3, #3
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	220f      	movs	r2, #15
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	697a      	ldr	r2, [r7, #20]
 80005e2:	4013      	ands	r3, r2
 80005e4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4a49      	ldr	r2, [pc, #292]	; (8000710 <HAL_GPIO_Init+0x2a8>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d013      	beq.n	8000616 <HAL_GPIO_Init+0x1ae>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a48      	ldr	r2, [pc, #288]	; (8000714 <HAL_GPIO_Init+0x2ac>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d00d      	beq.n	8000612 <HAL_GPIO_Init+0x1aa>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4a47      	ldr	r2, [pc, #284]	; (8000718 <HAL_GPIO_Init+0x2b0>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d007      	beq.n	800060e <HAL_GPIO_Init+0x1a6>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a46      	ldr	r2, [pc, #280]	; (800071c <HAL_GPIO_Init+0x2b4>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d101      	bne.n	800060a <HAL_GPIO_Init+0x1a2>
 8000606:	2303      	movs	r3, #3
 8000608:	e006      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 800060a:	2304      	movs	r3, #4
 800060c:	e004      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 800060e:	2302      	movs	r3, #2
 8000610:	e002      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 8000612:	2301      	movs	r3, #1
 8000614:	e000      	b.n	8000618 <HAL_GPIO_Init+0x1b0>
 8000616:	2300      	movs	r3, #0
 8000618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800061a:	f002 0203 	and.w	r2, r2, #3
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	4093      	lsls	r3, r2
 8000622:	697a      	ldr	r2, [r7, #20]
 8000624:	4313      	orrs	r3, r2
 8000626:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000628:	4938      	ldr	r1, [pc, #224]	; (800070c <HAL_GPIO_Init+0x2a4>)
 800062a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062c:	089b      	lsrs	r3, r3, #2
 800062e:	3302      	adds	r3, #2
 8000630:	697a      	ldr	r2, [r7, #20]
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4936      	ldr	r1, [pc, #216]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	600b      	str	r3, [r1, #0]
 800064e:	e006      	b.n	800065e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000650:	4b33      	ldr	r3, [pc, #204]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	43db      	mvns	r3, r3
 8000658:	4931      	ldr	r1, [pc, #196]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800066c:	685a      	ldr	r2, [r3, #4]
 800066e:	492c      	ldr	r1, [pc, #176]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	604b      	str	r3, [r1, #4]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 800067a:	685a      	ldr	r2, [r3, #4]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	43db      	mvns	r3, r3
 8000680:	4927      	ldr	r1, [pc, #156]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000682:	4013      	ands	r3, r2
 8000684:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000692:	4b23      	ldr	r3, [pc, #140]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000694:	689a      	ldr	r2, [r3, #8]
 8000696:	4922      	ldr	r1, [pc, #136]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	608b      	str	r3, [r1, #8]
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	491d      	ldr	r1, [pc, #116]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d006      	beq.n	80006c8 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006bc:	68da      	ldr	r2, [r3, #12]
 80006be:	4918      	ldr	r1, [pc, #96]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	60cb      	str	r3, [r1, #12]
 80006c6:	e006      	b.n	80006d6 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4913      	ldr	r1, [pc, #76]	; (8000720 <HAL_GPIO_Init+0x2b8>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80006d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d8:	3301      	adds	r3, #1
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	f67f aed4 	bls.w	800048c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80006e4:	bf00      	nop
 80006e6:	372c      	adds	r7, #44	; 0x2c
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bc80      	pop	{r7}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	10210000 	.word	0x10210000
 80006f4:	10110000 	.word	0x10110000
 80006f8:	10120000 	.word	0x10120000
 80006fc:	10310000 	.word	0x10310000
 8000700:	10320000 	.word	0x10320000
 8000704:	10220000 	.word	0x10220000
 8000708:	40021000 	.word	0x40021000
 800070c:	40010000 	.word	0x40010000
 8000710:	40010800 	.word	0x40010800
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40011000 	.word	0x40011000
 800071c:	40011400 	.word	0x40011400
 8000720:	40010400 	.word	0x40010400

08000724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	807b      	strh	r3, [r7, #2]
 8000730:	4613      	mov	r3, r2
 8000732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000734:	787b      	ldrb	r3, [r7, #1]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000740:	e003      	b.n	800074a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	041a      	lsls	r2, r3, #16
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	611a      	str	r2, [r3, #16]
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e0e7      	b.n	800093e <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d106      	bne.n	8000788 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2200      	movs	r2, #0
 800077e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f002 fe04 	bl	8003390 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f022 0201 	bic.w	r2, r2, #1
 800079e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007a0:	f001 f8d8 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 80007a4:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a67      	ldr	r2, [pc, #412]	; (8000948 <HAL_I2C_Init+0x1f4>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d807      	bhi.n	80007c0 <HAL_I2C_Init+0x6c>
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4a66      	ldr	r2, [pc, #408]	; (800094c <HAL_I2C_Init+0x1f8>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	bf94      	ite	ls
 80007b8:	2301      	movls	r3, #1
 80007ba:	2300      	movhi	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	e006      	b.n	80007ce <HAL_I2C_Init+0x7a>
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4a63      	ldr	r2, [pc, #396]	; (8000950 <HAL_I2C_Init+0x1fc>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	bf94      	ite	ls
 80007c8:	2301      	movls	r3, #1
 80007ca:	2300      	movhi	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e0b3      	b.n	800093e <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	4a5e      	ldr	r2, [pc, #376]	; (8000954 <HAL_I2C_Init+0x200>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	0c9b      	lsrs	r3, r3, #18
 80007e0:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a56      	ldr	r2, [pc, #344]	; (8000948 <HAL_I2C_Init+0x1f4>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d802      	bhi.n	80007fa <HAL_I2C_Init+0xa6>
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3301      	adds	r3, #1
 80007f8:	e009      	b.n	800080e <HAL_I2C_Init+0xba>
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000800:	fb02 f303 	mul.w	r3, r2, r3
 8000804:	4a54      	ldr	r2, [pc, #336]	; (8000958 <HAL_I2C_Init+0x204>)
 8000806:	fba2 2303 	umull	r2, r3, r2, r3
 800080a:	099b      	lsrs	r3, r3, #6
 800080c:	3301      	adds	r3, #1
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	6812      	ldr	r2, [r2, #0]
 8000812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a4b      	ldr	r2, [pc, #300]	; (8000948 <HAL_I2C_Init+0x1f4>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d80d      	bhi.n	800083a <HAL_I2C_Init+0xe6>
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1e5a      	subs	r2, r3, #1
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	fbb2 f3f3 	udiv	r3, r2, r3
 800082c:	3301      	adds	r3, #1
 800082e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf38      	it	cc
 8000836:	2304      	movcc	r3, #4
 8000838:	e04f      	b.n	80008da <HAL_I2C_Init+0x186>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d111      	bne.n	8000866 <HAL_I2C_Init+0x112>
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	1e59      	subs	r1, r3, #1
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685a      	ldr	r2, [r3, #4]
 800084a:	4613      	mov	r3, r2
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	fbb1 f3f3 	udiv	r3, r1, r3
 8000854:	3301      	adds	r3, #1
 8000856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800085a:	2b00      	cmp	r3, #0
 800085c:	bf0c      	ite	eq
 800085e:	2301      	moveq	r3, #1
 8000860:	2300      	movne	r3, #0
 8000862:	b2db      	uxtb	r3, r3
 8000864:	e012      	b.n	800088c <HAL_I2C_Init+0x138>
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1e59      	subs	r1, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	fbb1 f3f3 	udiv	r3, r1, r3
 800087c:	3301      	adds	r3, #1
 800087e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000882:	2b00      	cmp	r3, #0
 8000884:	bf0c      	ite	eq
 8000886:	2301      	moveq	r3, #1
 8000888:	2300      	movne	r3, #0
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <HAL_I2C_Init+0x140>
 8000890:	2301      	movs	r3, #1
 8000892:	e022      	b.n	80008da <HAL_I2C_Init+0x186>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10e      	bne.n	80008ba <HAL_I2C_Init+0x166>
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1e59      	subs	r1, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b8:	e00f      	b.n	80008da <HAL_I2C_Init+0x186>
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1e59      	subs	r1, r3, #1
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685a      	ldr	r2, [r3, #4]
 80008c2:	4613      	mov	r3, r2
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	4413      	add	r3, r2
 80008c8:	009a      	lsls	r2, r3, #2
 80008ca:	4413      	add	r3, r2
 80008cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69d9      	ldr	r1, [r3, #28]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a1a      	ldr	r2, [r3, #32]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6919      	ldr	r1, [r3, #16]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	430a      	orrs	r2, r1
 80008fe:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6959      	ldr	r1, [r3, #20]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f042 0201 	orr.w	r2, r2, #1
 800091e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2220      	movs	r2, #32
 800092a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	000186a0 	.word	0x000186a0
 800094c:	001e847f 	.word	0x001e847f
 8000950:	003d08ff 	.word	0x003d08ff
 8000954:	431bde83 	.word	0x431bde83
 8000958:	10624dd3 	.word	0x10624dd3

0800095c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af02      	add	r7, sp, #8
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	461a      	mov	r2, r3
 8000968:	460b      	mov	r3, r1
 800096a:	817b      	strh	r3, [r7, #10]
 800096c:	4613      	mov	r3, r2
 800096e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000974:	f7ff fc42 	bl	80001fc <HAL_GetTick>
 8000978:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000980:	b2db      	uxtb	r3, r3
 8000982:	2b20      	cmp	r3, #32
 8000984:	f040 80ee 	bne.w	8000b64 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	2319      	movs	r3, #25
 800098e:	2201      	movs	r2, #1
 8000990:	4977      	ldr	r1, [pc, #476]	; (8000b70 <HAL_I2C_Master_Transmit+0x214>)
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f000 faa2 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 800099e:	2302      	movs	r3, #2
 80009a0:	e0e1      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d101      	bne.n	80009b0 <HAL_I2C_Master_Transmit+0x54>
 80009ac:	2302      	movs	r3, #2
 80009ae:	e0da      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d007      	beq.n	80009d6 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0201 	orr.w	r2, r2, #1
 80009d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009e4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2221      	movs	r2, #33	; 0x21
 80009ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2210      	movs	r2, #16
 80009f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2200      	movs	r2, #0
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	893a      	ldrh	r2, [r7, #8]
 8000a06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	4a5a      	ldr	r2, [pc, #360]	; (8000b74 <HAL_I2C_Master_Transmit+0x218>)
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000a18:	8979      	ldrh	r1, [r7, #10]
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	6a3a      	ldr	r2, [r7, #32]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f9da 	bl	8000dd8 <I2C_MasterRequestWrite>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d00f      	beq.n	8000a4a <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d105      	bne.n	8000a3e <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2200      	movs	r2, #0
 8000a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e093      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	e08d      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8000a60:	e066      	b.n	8000b30 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	6a39      	ldr	r1, [r7, #32]
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 faf7 	bl	800105a <I2C_WaitOnTXEFlagUntilTimeout>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d00f      	beq.n	8000a92 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	2b04      	cmp	r3, #4
 8000a78:	d109      	bne.n	8000a8e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a88:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e06b      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e069      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	1c59      	adds	r1, r3, #1
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	6251      	str	r1, [r2, #36]	; 0x24
 8000a9c:	781a      	ldrb	r2, [r3, #0]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d119      	bne.n	8000b00 <HAL_I2C_Master_Transmit+0x1a4>
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d015      	beq.n	8000b00 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	6251      	str	r1, [r2, #36]	; 0x24
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000af8:	3b01      	subs	r3, #1
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	6a39      	ldr	r1, [r7, #32]
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f000 fae5 	bl	80010d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00f      	beq.n	8000b30 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d109      	bne.n	8000b2c <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b26:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e01c      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	e01a      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d194      	bne.n	8000a62 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2220      	movs	r2, #32
 8000b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8000b64:	2302      	movs	r3, #2
  }
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	00100002 	.word	0x00100002
 8000b74:	ffff0000 	.word	0xffff0000

08000b78 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08c      	sub	sp, #48	; 0x30
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	460b      	mov	r3, r1
 8000b86:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b9c:	f7ff fb2e 	bl	80001fc <HAL_GetTick>
 8000ba0:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	f040 810b 	bne.w	8000dc6 <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	2319      	movs	r3, #25
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4985      	ldr	r1, [pc, #532]	; (8000dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8000bba:	68f8      	ldr	r0, [r7, #12]
 8000bbc:	f000 f98e 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e0fe      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d101      	bne.n	8000bd8 <HAL_I2C_IsDeviceReady+0x60>
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	e0f7      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d007      	beq.n	8000bfe <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2224      	movs	r2, #36	; 0x24
 8000c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a6d      	ldr	r2, [pc, #436]	; (8000dd4 <HAL_I2C_IsDeviceReady+0x25c>)
 8000c20:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f94c 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	e0bc      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000c4e:	897b      	ldrh	r3, [r7, #10]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000c5c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8000c5e:	f7ff facd 	bl	80001fc <HAL_GetTick>
 8000c62:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	bf0c      	ite	eq
 8000c72:	2301      	moveq	r3, #1
 8000c74:	2300      	movne	r3, #0
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c88:	bf0c      	ite	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	2300      	movne	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000c9c:	e02a      	b.n	8000cf4 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d007      	beq.n	8000cb4 <HAL_I2C_IsDeviceReady+0x13c>
 8000ca4:	f7ff faaa 	bl	80001fc <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d203      	bcs.n	8000cbc <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	22a0      	movs	r2, #160	; 0xa0
 8000cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	695b      	ldr	r3, [r3, #20]
 8000cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2301      	moveq	r3, #1
 8000ce4:	2300      	movne	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000cf4:	6a3b      	ldr	r3, [r7, #32]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d105      	bne.n	8000d06 <HAL_I2C_IsDeviceReady+0x18e>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <HAL_I2C_IsDeviceReady+0x18e>
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	2ba0      	cmp	r3, #160	; 0xa0
 8000d04:	d1cb      	bne.n	8000c9e <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d129      	bne.n	8000d70 <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d2a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2319      	movs	r3, #25
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4921      	ldr	r1, [pc, #132]	; (8000dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 f8c5 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e035      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2220      	movs	r2, #32
 8000d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e02b      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d7e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d88:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2319      	movs	r3, #25
 8000d90:	2201      	movs	r2, #1
 8000d92:	490f      	ldr	r1, [pc, #60]	; (8000dd0 <HAL_I2C_IsDeviceReady+0x258>)
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f000 f8a1 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e011      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	1c5a      	adds	r2, r3, #1
 8000da8:	617a      	str	r2, [r7, #20]
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f63f af38 	bhi.w	8000c22 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	2220      	movs	r2, #32
 8000db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e000      	b.n	8000dc8 <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 8000dc6:	2302      	movs	r3, #2
  }
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	00100002 	.word	0x00100002
 8000dd4:	ffff0000 	.word	0xffff0000

08000dd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	607a      	str	r2, [r7, #4]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	460b      	mov	r3, r1
 8000de6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d006      	beq.n	8000e02 <I2C_MasterRequestWrite+0x2a>
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d003      	beq.n	8000e02 <I2C_MasterRequestWrite+0x2a>
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e00:	d108      	bne.n	8000e14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00b      	b.n	8000e2c <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	2b12      	cmp	r3, #18
 8000e1a:	d107      	bne.n	8000e2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e2a:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f000 f84f 	bl	8000edc <I2C_WaitOnFlagUntilTimeout>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e041      	b.n	8000ecc <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e50:	d108      	bne.n	8000e64 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000e52:	897b      	ldrh	r3, [r7, #10]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	e021      	b.n	8000ea8 <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000e64:	897b      	ldrh	r3, [r7, #10]
 8000e66:	11db      	asrs	r3, r3, #7
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	f003 0306 	and.w	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f063 030f 	orn	r3, r3, #15
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	4914      	ldr	r1, [pc, #80]	; (8000ed4 <I2C_MasterRequestWrite+0xfc>)
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 f87b 	bl	8000f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d101      	bne.n	8000e9a <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e018      	b.n	8000ecc <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e016      	b.n	8000ecc <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000e9e:	897b      	ldrh	r3, [r7, #10]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	490a      	ldr	r1, [pc, #40]	; (8000ed8 <I2C_MasterRequestWrite+0x100>)
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f000 f865 	bl	8000f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d101      	bne.n	8000ec6 <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e002      	b.n	8000ecc <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e000      	b.n	8000ecc <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	00010008 	.word	0x00010008
 8000ed8:	00010002 	.word	0x00010002

08000edc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000eec:	e01f      	b.n	8000f2e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d01b      	beq.n	8000f2e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d007      	beq.n	8000f0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000efc:	f7ff f97e 	bl	80001fc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d210      	bcs.n	8000f2e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	2220      	movs	r2, #32
 8000f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e023      	b.n	8000f76 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10d      	bne.n	8000f54 <I2C_WaitOnFlagUntilTimeout+0x78>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4013      	ands	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	bf0c      	ite	eq
 8000f4a:	2301      	moveq	r3, #1
 8000f4c:	2300      	movne	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	e00c      	b.n	8000f6e <I2C_WaitOnFlagUntilTimeout+0x92>
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	bf0c      	ite	eq
 8000f66:	2301      	moveq	r3, #1
 8000f68:	2300      	movne	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d0bc      	beq.n	8000eee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000f8c:	e040      	b.n	8001010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9c:	d11c      	bne.n	8000fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000fb6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2204      	movs	r2, #4
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e03c      	b.n	8001052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fde:	d017      	beq.n	8001010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 8000fe6:	f7ff f909 	bl	80001fc <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d20c      	bcs.n	8001010 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2220      	movs	r2, #32
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e020      	b.n	8001052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	0c1b      	lsrs	r3, r3, #16
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10c      	bne.n	8001034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	43da      	mvns	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	4013      	ands	r3, r2
 8001026:	b29b      	uxth	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	e00b      	b.n	800104c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4013      	ands	r3, r2
 8001040:	b29b      	uxth	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf14      	ite	ne
 8001046:	2301      	movne	r3, #1
 8001048:	2300      	moveq	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d19e      	bne.n	8000f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800105a:	b580      	push	{r7, lr}
 800105c:	b084      	sub	sp, #16
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001066:	e029      	b.n	80010bc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	f000 f870 	bl	800114e <I2C_IsAcknowledgeFailed>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e029      	b.n	80010cc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107e:	d01d      	beq.n	80010bc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001086:	f7ff f8b9 	bl	80001fc <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	429a      	cmp	r2, r3
 8001094:	d212      	bcs.n	80010bc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f043 0220 	orr.w	r2, r3, #32
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2220      	movs	r2, #32
 80010ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e007      	b.n	80010cc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c6:	2b80      	cmp	r3, #128	; 0x80
 80010c8:	d1ce      	bne.n	8001068 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80010e0:	e029      	b.n	8001136 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 f833 	bl	800114e <I2C_IsAcknowledgeFailed>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e029      	b.n	8001146 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d01d      	beq.n	8001136 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001100:	f7ff f87c 	bl	80001fc <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	429a      	cmp	r2, r3
 800110e:	d212      	bcs.n	8001136 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f043 0220 	orr.w	r2, r3, #32
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2220      	movs	r2, #32
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e007      	b.n	8001146 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b04      	cmp	r3, #4
 8001142:	d1ce      	bne.n	80010e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001164:	d114      	bne.n	8001190 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800116e:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2204      	movs	r2, #4
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2220      	movs	r2, #32
 8001180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8087 	beq.w	80012c4 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b6:	4b92      	ldr	r3, [pc, #584]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d00c      	beq.n	80011dc <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c2:	4b8f      	ldr	r3, [pc, #572]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	2b08      	cmp	r3, #8
 80011cc:	d112      	bne.n	80011f4 <HAL_RCC_OscConfig+0x58>
 80011ce:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d10b      	bne.n	80011f4 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	4b88      	ldr	r3, [pc, #544]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d06c      	beq.n	80012c2 <HAL_RCC_OscConfig+0x126>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d168      	bne.n	80012c2 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e22d      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011fc:	d106      	bne.n	800120c <HAL_RCC_OscConfig+0x70>
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7f      	ldr	r2, [pc, #508]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e02e      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <HAL_RCC_OscConfig+0x92>
 8001214:	4b7a      	ldr	r3, [pc, #488]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a79      	ldr	r2, [pc, #484]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800121a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a76      	ldr	r2, [pc, #472]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	e01d      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001236:	d10c      	bne.n	8001252 <HAL_RCC_OscConfig+0xb6>
 8001238:	4b71      	ldr	r3, [pc, #452]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a70      	ldr	r2, [pc, #448]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800123e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b6e      	ldr	r3, [pc, #440]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6d      	ldr	r2, [pc, #436]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800124a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124e:	6013      	str	r3, [r2, #0]
 8001250:	e00b      	b.n	800126a <HAL_RCC_OscConfig+0xce>
 8001252:	4b6b      	ldr	r3, [pc, #428]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6a      	ldr	r2, [pc, #424]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b68      	ldr	r3, [pc, #416]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a67      	ldr	r2, [pc, #412]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001268:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d013      	beq.n	800129a <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7fe ffc3 	bl	80001fc <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800127a:	f7fe ffbf 	bl	80001fc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	; 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e1e1      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128c:	4b5c      	ldr	r3, [pc, #368]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0xde>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7fe ffaf 	bl	80001fc <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a2:	f7fe ffab 	bl	80001fc <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e1cd      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b4:	4b52      	ldr	r3, [pc, #328]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x106>
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d063      	beq.n	8001398 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012d0:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012dc:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d11c      	bne.n	8001322 <HAL_RCC_OscConfig+0x186>
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d116      	bne.n	8001322 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f4:	4b42      	ldr	r3, [pc, #264]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x170>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e1a1      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4939      	ldr	r1, [pc, #228]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001320:	e03a      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d020      	beq.n	800136c <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800132a:	4b36      	ldr	r3, [pc, #216]	; (8001404 <HAL_RCC_OscConfig+0x268>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7fe ff64 	bl	80001fc <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7fe ff60 	bl	80001fc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e182      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4926      	ldr	r1, [pc, #152]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
 800136a:	e015      	b.n	8001398 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_RCC_OscConfig+0x268>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7fe ff43 	bl	80001fc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137a:	f7fe ff3f 	bl	80001fc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e161      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d039      	beq.n	8001418 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d019      	beq.n	80013e0 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7fe ff23 	bl	80001fc <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7fe ff1f 	bl	80001fc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e141      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_OscConfig+0x264>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 fae3 	bl	80019a4 <RCC_Delay>
 80013de:	e01b      	b.n	8001418 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7fe ff09 	bl	80001fc <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ec:	e00e      	b.n	800140c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7fe ff05 	bl	80001fc <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d907      	bls.n	800140c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e127      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
 8001400:	40021000 	.word	0x40021000
 8001404:	42420000 	.word	0x42420000
 8001408:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140c:	4b92      	ldr	r3, [pc, #584]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800140e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ea      	bne.n	80013ee <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80a6 	beq.w	8001572 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4b8b      	ldr	r3, [pc, #556]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10d      	bne.n	8001452 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b88      	ldr	r3, [pc, #544]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a87      	ldr	r2, [pc, #540]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b85      	ldr	r3, [pc, #532]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800144e:	2301      	movs	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001452:	4b82      	ldr	r3, [pc, #520]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800146a:	f7fe fec7 	bl	80001fc <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001472:	f7fe fec3 	bl	80001fc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b64      	cmp	r3, #100	; 0x64
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0e5      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	4b75      	ldr	r3, [pc, #468]	; (800165c <HAL_RCC_OscConfig+0x4c0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d106      	bne.n	80014a6 <HAL_RCC_OscConfig+0x30a>
 8001498:	4b6f      	ldr	r3, [pc, #444]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a6e      	ldr	r2, [pc, #440]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6213      	str	r3, [r2, #32]
 80014a4:	e02d      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10c      	bne.n	80014c8 <HAL_RCC_OscConfig+0x32c>
 80014ae:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	f023 0301 	bic.w	r3, r3, #1
 80014b8:	6213      	str	r3, [r2, #32]
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	e01c      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x34e>
 80014d0:	4b61      	ldr	r3, [pc, #388]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a60      	ldr	r2, [pc, #384]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	4b5e      	ldr	r3, [pc, #376]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a5d      	ldr	r2, [pc, #372]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6213      	str	r3, [r2, #32]
 80014e8:	e00b      	b.n	8001502 <HAL_RCC_OscConfig+0x366>
 80014ea:	4b5b      	ldr	r3, [pc, #364]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	4a5a      	ldr	r2, [pc, #360]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6213      	str	r3, [r2, #32]
 80014f6:	4b58      	ldr	r3, [pc, #352]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4a57      	ldr	r2, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80014fc:	f023 0304 	bic.w	r3, r3, #4
 8001500:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150a:	f7fe fe77 	bl	80001fc <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7fe fe73 	bl	80001fc <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e093      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001528:	4b4b      	ldr	r3, [pc, #300]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ee      	beq.n	8001512 <HAL_RCC_OscConfig+0x376>
 8001534:	e014      	b.n	8001560 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7fe fe61 	bl	80001fc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800153c:	e00a      	b.n	8001554 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153e:	f7fe fe5d 	bl	80001fc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	f241 3288 	movw	r2, #5000	; 0x1388
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e07d      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001554:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ee      	bne.n	800153e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a3b      	ldr	r2, [pc, #236]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800156c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d069      	beq.n	800164e <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b08      	cmp	r3, #8
 8001584:	d061      	beq.n	800164a <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d146      	bne.n	800161c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7fe fe32 	bl	80001fc <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7fe fe2e 	bl	80001fc <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e050      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ae:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c2:	d108      	bne.n	80015d6 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4921      	ldr	r1, [pc, #132]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a19      	ldr	r1, [r3, #32]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	430b      	orrs	r3, r1
 80015e8:	491b      	ldr	r1, [pc, #108]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7fe fe02 	bl	80001fc <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7fe fdfe 	bl	80001fc <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e020      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x460>
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7fe fdeb 	bl	80001fc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162a:	f7fe fde7 	bl	80001fc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e009      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_RCC_OscConfig+0x4bc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x48e>
 8001648:	e001      	b.n	800164e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001672:	4b7e      	ldr	r3, [pc, #504]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d910      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001680:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 0207 	bic.w	r2, r3, #7
 8001688:	4978      	ldr	r1, [pc, #480]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001690:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0e0      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d020      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ba:	4b6d      	ldr	r3, [pc, #436]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a6c      	ldr	r2, [pc, #432]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016c0:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016c4:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d005      	beq.n	80016de <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	4a66      	ldr	r2, [pc, #408]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016d8:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016dc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016de:	4b64      	ldr	r3, [pc, #400]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4961      	ldr	r1, [pc, #388]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d06a      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d107      	bne.n	8001714 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d115      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0a7      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d107      	bne.n	800172c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171c:	4b54      	ldr	r3, [pc, #336]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e09b      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e093      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800173c:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 0203 	bic.w	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4949      	ldr	r1, [pc, #292]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800174e:	f7fe fd55 	bl	80001fc <HAL_GetTick>
 8001752:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d112      	bne.n	8001782 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	e00a      	b.n	8001774 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175e:	f7fe fd4d 	bl	80001fc <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f241 3288 	movw	r2, #5000	; 0x1388
 800176c:	4293      	cmp	r3, r2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e077      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001774:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d1ee      	bne.n	800175e <HAL_RCC_ClockConfig+0xfa>
 8001780:	e027      	b.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d11d      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178c:	f7fe fd36 	bl	80001fc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	; 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e060      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a2:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_ClockConfig+0x128>
 80017ae:	e010      	b.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe fd24 	bl	80001fc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e04e      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80017d2:	4b26      	ldr	r3, [pc, #152]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d210      	bcs.n	8001802 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0207 	bic.w	r2, r3, #7
 80017e8:	4920      	ldr	r1, [pc, #128]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x208>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e030      	b.n	8001864 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	4915      	ldr	r1, [pc, #84]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	490d      	ldr	r1, [pc, #52]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001840:	f000 f81c 	bl	800187c <HAL_RCC_GetSysClockFreq>
 8001844:	4601      	mov	r1, r0
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_RCC_ClockConfig+0x20c>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 030f 	and.w	r3, r3, #15
 8001850:	4a08      	ldr	r2, [pc, #32]	; (8001874 <HAL_RCC_ClockConfig+0x210>)
 8001852:	5cd3      	ldrb	r3, [r2, r3]
 8001854:	fa21 f303 	lsr.w	r3, r1, r3
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_RCC_ClockConfig+0x214>)
 800185a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800185c:	2000      	movs	r0, #0
 800185e:	f7fe fc8b 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40022000 	.word	0x40022000
 8001870:	40021000 	.word	0x40021000
 8001874:	080037c8 	.word	0x080037c8
 8001878:	2000000c 	.word	0x2000000c

0800187c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800187c:	b490      	push	{r4, r7}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001882:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001884:	1d3c      	adds	r4, r7, #4
 8001886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb4>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x40>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d003      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x46>
 80018ba:	e02d      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018bc:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018be:	623b      	str	r3, [r7, #32]
      break;
 80018c0:	e02d      	b.n	800191e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	0c9b      	lsrs	r3, r3, #18
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ce:	4413      	add	r3, r2
 80018d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0c5b      	lsrs	r3, r3, #17
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ee:	4413      	add	r3, r2
 80018f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f4:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018fa:	fb02 f203 	mul.w	r2, r2, r3
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
 8001906:	e004      	b.n	8001912 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	4a0c      	ldr	r2, [pc, #48]	; (800193c <HAL_RCC_GetSysClockFreq+0xc0>)
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	623b      	str	r3, [r7, #32]
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_RCC_GetSysClockFreq+0xbc>)
 800191a:	623b      	str	r3, [r7, #32]
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6a3b      	ldr	r3, [r7, #32]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bc90      	pop	{r4, r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	08003790 	.word	0x08003790
 8001930:	080037a0 	.word	0x080037a0
 8001934:	40021000 	.word	0x40021000
 8001938:	007a1200 	.word	0x007a1200
 800193c:	003d0900 	.word	0x003d0900

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_RCC_GetHCLKFreq+0x10>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	2000000c 	.word	0x2000000c

08001954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001958:	f7ff fff2 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 800195c:	4601      	mov	r1, r0
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001970:	4618      	mov	r0, r3
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	080037d8 	.word	0x080037d8

0800197c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001980:	f7ff ffde 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001984:	4601      	mov	r1, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0adb      	lsrs	r3, r3, #11
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	080037d8 	.word	0x080037d8

080019a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <RCC_Delay+0x34>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <RCC_Delay+0x38>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a5b      	lsrs	r3, r3, #9
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80019c0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	60fa      	str	r2, [r7, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f9      	bne.n	80019c0 <RCC_Delay+0x1c>
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	10624dd3 	.word	0x10624dd3

080019e0 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e01d      	b.n	8001a2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f001 fd00 	bl	800340c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f000 fbda 	bl	80021d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0201 	orr.w	r2, r2, #1
 8001a4c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01d      	b.n	8001ab8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d106      	bne.n	8001a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f001 fce1 	bl	8003458 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f000 fb95 	bl	80021d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fe2b 	bl	800272e <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <HAL_TIM_PWM_Start+0x4c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0201 	orr.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40012c00 	.word	0x40012c00

08001b10 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e081      	b.n	8001c34 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d106      	bne.n	8001b4a <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f001 fca3 	bl	8003490 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0207 	bic.w	r2, r2, #7
 8001b60:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f000 fb33 	bl	80021d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	f023 0303 	bic.w	r3, r3, #3
 8001b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	4313      	orrs	r3, r2
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001bb8:	f023 030c 	bic.w	r3, r3, #12
 8001bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	011a      	lsls	r2, r3, #4
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	031b      	lsls	r3, r3, #12
 8001be8:	4313      	orrs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001bfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d122      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d11b      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0202 	mvn.w	r2, #2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fa8e 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e005      	b.n	8001c92 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 fa81 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fa90 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d122      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d11b      	bne.n	8001cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0204 	mvn.w	r2, #4
 8001cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa64 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001cd8:	e005      	b.n	8001ce6 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa57 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fa66 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d122      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d11b      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f06f 0208 	mvn.w	r2, #8
 8001d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2204      	movs	r2, #4
 8001d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fa3a 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e005      	b.n	8001d3a <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa2d 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 fa3c 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d122      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d11b      	bne.n	8001d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0210 	mvn.w	r2, #16
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa10 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001d80:	e005      	b.n	8001d8e <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 fa03 	bl	800218e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 fa12 	bl	80021b2 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10e      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d107      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0201 	mvn.w	r2, #1
 8001db8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 ffb6 	bl	8002d2c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b80      	cmp	r3, #128	; 0x80
 8001dcc:	d10e      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d107      	bne.n	8001dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fd10 	bl	800280c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d10e      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e04:	2b40      	cmp	r3, #64	; 0x40
 8001e06:	d107      	bne.n	8001e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e10:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f9d6 	bl	80021c4 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d10e      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d107      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0220 	mvn.w	r2, #32
 8001e3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fcdb 	bl	80027fa <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0b4      	b.n	8001fd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2202      	movs	r2, #2
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	f200 809f 	bhi.w	8001fbc <HAL_TIM_PWM_ConfigChannel+0x170>
 8001e7e:	a201      	add	r2, pc, #4	; (adr r2, 8001e84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e84:	08001eb9 	.word	0x08001eb9
 8001e88:	08001fbd 	.word	0x08001fbd
 8001e8c:	08001fbd 	.word	0x08001fbd
 8001e90:	08001fbd 	.word	0x08001fbd
 8001e94:	08001ef9 	.word	0x08001ef9
 8001e98:	08001fbd 	.word	0x08001fbd
 8001e9c:	08001fbd 	.word	0x08001fbd
 8001ea0:	08001fbd 	.word	0x08001fbd
 8001ea4:	08001f3b 	.word	0x08001f3b
 8001ea8:	08001fbd 	.word	0x08001fbd
 8001eac:	08001fbd 	.word	0x08001fbd
 8001eb0:	08001fbd 	.word	0x08001fbd
 8001eb4:	08001f7b 	.word	0x08001f7b
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f9f0 	bl	80022a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0208 	orr.w	r2, r2, #8
 8001ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6999      	ldr	r1, [r3, #24]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	619a      	str	r2, [r3, #24]
    }
    break;
 8001ef6:	e062      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fa3c 	bl	800237c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6999      	ldr	r1, [r3, #24]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	021a      	lsls	r2, r3, #8
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	619a      	str	r2, [r3, #24]
    }
    break;
 8001f38:	e041      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fa8b 	bl	800245c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0208 	orr.w	r2, r2, #8
 8001f54:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0204 	bic.w	r2, r2, #4
 8001f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69d9      	ldr	r1, [r3, #28]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	61da      	str	r2, [r3, #28]
    }
    break;
 8001f78:	e021      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fadb 	bl	800253c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f94:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	69d9      	ldr	r1, [r3, #28]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	61da      	str	r2, [r3, #28]
    }
    break;
 8001fba:	e000      	b.n	8001fbe <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8001fbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0c8      	b.n	8002186 <HAL_TIM_ConfigClockSource+0x1ae>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800201a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d077      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x144>
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d80e      	bhi.n	800204e <HAL_TIM_ConfigClockSource+0x76>
 8002030:	2b10      	cmp	r3, #16
 8002032:	f000 808a 	beq.w	800214a <HAL_TIM_ConfigClockSource+0x172>
 8002036:	2b10      	cmp	r3, #16
 8002038:	d802      	bhi.n	8002040 <HAL_TIM_ConfigClockSource+0x68>
 800203a:	2b00      	cmp	r3, #0
 800203c:	d07e      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 800203e:	e099      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002040:	2b20      	cmp	r3, #32
 8002042:	f000 8089 	beq.w	8002158 <HAL_TIM_ConfigClockSource+0x180>
 8002046:	2b30      	cmp	r3, #48	; 0x30
 8002048:	f000 808d 	beq.w	8002166 <HAL_TIM_ConfigClockSource+0x18e>
    break;
 800204c:	e092      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 800204e:	2b70      	cmp	r3, #112	; 0x70
 8002050:	d016      	beq.n	8002080 <HAL_TIM_ConfigClockSource+0xa8>
 8002052:	2b70      	cmp	r3, #112	; 0x70
 8002054:	d804      	bhi.n	8002060 <HAL_TIM_ConfigClockSource+0x88>
 8002056:	2b50      	cmp	r3, #80	; 0x50
 8002058:	d040      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0x104>
 800205a:	2b60      	cmp	r3, #96	; 0x60
 800205c:	d04e      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x124>
    break;
 800205e:	e089      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8002060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002064:	d003      	beq.n	800206e <HAL_TIM_ConfigClockSource+0x96>
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206a:	d024      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0xde>
    break;
 800206c:	e082      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0207 	bic.w	r2, r2, #7
 800207c:	609a      	str	r2, [r3, #8]
    break;
 800207e:	e079      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f000 fb2c 	bl	80026ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
    break;
 80020b4:	e05e      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f000 fb11 	bl	80026ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d8:	609a      	str	r2, [r3, #8]
    break;
 80020da:	e04b      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f000 fa7b 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2150      	movs	r1, #80	; 0x50
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 fada 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 80020fa:	e03b      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	461a      	mov	r2, r3
 800210a:	f000 fa9d 	bl	8002648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2160      	movs	r1, #96	; 0x60
 8002114:	4618      	mov	r0, r3
 8002116:	f000 faca 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 800211a:	e02b      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f000 fa5b 	bl	80025e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4618      	mov	r0, r3
 8002136:	f000 faba 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 800213a:	e01b      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fab3 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002148:	e014      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2110      	movs	r1, #16
 8002150:	4618      	mov	r0, r3
 8002152:	f000 faac 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002156:	e00d      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2120      	movs	r1, #32
 800215e:	4618      	mov	r0, r3
 8002160:	f000 faa5 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002164:	e006      	b.n	8002174 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2130      	movs	r1, #48	; 0x30
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fa9e 	bl	80026ae <TIM_ITRx_SetConfig>
    break;
 8002172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
	...

080021d8 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <TIM_Base_SetConfig+0xc0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00b      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d007      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a27      	ldr	r2, [pc, #156]	; (800229c <TIM_Base_SetConfig+0xc4>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0x34>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <TIM_Base_SetConfig+0xc8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d108      	bne.n	800221e <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <TIM_Base_SetConfig+0xc0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00b      	beq.n	800223e <TIM_Base_SetConfig+0x66>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800222c:	d007      	beq.n	800223e <TIM_Base_SetConfig+0x66>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a1a      	ldr	r2, [pc, #104]	; (800229c <TIM_Base_SetConfig+0xc4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d003      	beq.n	800223e <TIM_Base_SetConfig+0x66>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <TIM_Base_SetConfig+0xc8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d108      	bne.n	8002250 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002256:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4313      	orrs	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <TIM_Base_SetConfig+0xc0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d103      	bne.n	8002288 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	615a      	str	r2, [r3, #20]
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800

080022a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	f023 0201 	bic.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f023 0302 	bic.w	r3, r3, #2
 80022f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <TIM_OC1_SetConfig+0xd4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d10c      	bne.n	8002326 <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0308 	bic.w	r3, r3, #8
 8002312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 0304 	bic.w	r3, r3, #4
 8002324:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <TIM_OC1_SetConfig+0xd4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d111      	bne.n	8002352 <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800233c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	621a      	str	r2, [r3, #32]
}
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40012c00 	.word	0x40012c00

0800237c <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0210 	bic.w	r2, r3, #16
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0320 	bic.w	r3, r3, #32
 80023d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <TIM_OC2_SetConfig+0xdc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d10d      	bne.n	8002404 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	011b      	lsls	r3, r3, #4
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002402:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <TIM_OC2_SetConfig+0xdc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d113      	bne.n	8002434 <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800241a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	621a      	str	r2, [r3, #32]
}
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	40012c00 	.word	0x40012c00

0800245c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <TIM_OC3_SetConfig+0xdc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10d      	bne.n	80024e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024e0:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <TIM_OC3_SetConfig+0xdc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d113      	bne.n	8002512 <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	011b      	lsls	r3, r3, #4
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	621a      	str	r2, [r3, #32]
}
 800252c:	bf00      	nop
 800252e:	371c      	adds	r7, #28
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40012c00 	.word	0x40012c00

0800253c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002576:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800257e:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002592:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	031b      	lsls	r3, r3, #12
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <TIM_OC4_SetConfig+0xa4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d109      	bne.n	80025bc <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	621a      	str	r2, [r3, #32]
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00

080025e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 030a 	bic.w	r3, r3, #10
 8002628:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b087      	sub	sp, #28
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 0210 	bic.w	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800267a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800268c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	621a      	str	r2, [r3, #32]
}
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b085      	sub	sp, #20
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	460b      	mov	r3, r1
 80026b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ca:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	f043 0307 	orr.w	r3, r3, #7
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	609a      	str	r2, [r3, #8]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	021a      	lsls	r2, r3, #8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	4313      	orrs	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr

0800272e <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800273e:	2201      	movs	r2, #1
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a1a      	ldr	r2, [r3, #32]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1a      	ldr	r2, [r3, #32]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	fa01 f303 	lsl.w	r3, r1, r3
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	621a      	str	r2, [r3, #32]
}
 8002768:	bf00      	nop
 800276a:	371c      	adds	r7, #28
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002786:	2302      	movs	r3, #2
 8002788:	e032      	b.n	80027f0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a8:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027ca:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6899      	ldr	r1, [r3, #8]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685a      	ldr	r2, [r3, #4]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e03f      	b.n	80028b0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d106      	bne.n	800284a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fe91 	bl	800356c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2224      	movs	r2, #36	; 0x24
 800284e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002860:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f90c 	bl	8002a80 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002886:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002896:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	4613      	mov	r3, r2
 80028c6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	f040 8083 	bne.w	80029e0 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <HAL_UART_Transmit+0x2e>
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07b      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Transmit+0x40>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e074      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2221      	movs	r2, #33	; 0x21
 800290a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800290e:	f7fd fc75 	bl	80001fc <HAL_GetTick>
 8002912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002920:	e042      	b.n	80029a8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002938:	d122      	bne.n	8002980 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	; 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 f850 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e046      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002966:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	3302      	adds	r3, #2
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	e017      	b.n	80029a8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3301      	adds	r3, #1
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	e013      	b.n	80029a8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2200      	movs	r2, #0
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f82d 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e023      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	60ba      	str	r2, [r7, #8]
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1b7      	bne.n	8002922 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2140      	movs	r1, #64	; 0x40
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f814 	bl	80029ea <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e00a      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4613      	mov	r3, r2
 80029f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80029fa:	e02c      	b.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d028      	beq.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d007      	beq.n	8002a1a <UART_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	f7fd fbf7 	bl	80001fc <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d21d      	bcs.n	8002a56 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a28:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e00f      	b.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	bf0c      	ite	eq
 8002a66:	2301      	moveq	r3, #1
 8002a68:	2300      	movne	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d0c3      	beq.n	80029fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ac2:	f023 030c 	bic.w	r3, r3, #12
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	430b      	orrs	r3, r1
 8002ace:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a6f      	ldr	r2, [pc, #444]	; (8002ca8 <UART_SetConfig+0x228>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d16b      	bne.n	8002bc8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002af0:	f7fe ff44 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a68      	ldr	r2, [pc, #416]	; (8002cac <UART_SetConfig+0x22c>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	011c      	lsls	r4, r3, #4
 8002b14:	f7fe ff32 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	441a      	add	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b2e:	f7fe ff25 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009a      	lsls	r2, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <UART_SetConfig+0x22c>)
 8002b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2264      	movs	r2, #100	; 0x64
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	1aeb      	subs	r3, r5, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	; 0x32
 8002b5c:	4a53      	ldr	r2, [pc, #332]	; (8002cac <UART_SetConfig+0x22c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b68:	441c      	add	r4, r3
 8002b6a:	f7fe ff07 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	441a      	add	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b84:	f7fe fefa 	bl	800197c <HAL_RCC_GetPCLK2Freq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	009a      	lsls	r2, r3, #2
 8002b92:	441a      	add	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	4a43      	ldr	r2, [pc, #268]	; (8002cac <UART_SetConfig+0x22c>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	2264      	movs	r2, #100	; 0x64
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	1aeb      	subs	r3, r5, r3
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	3332      	adds	r3, #50	; 0x32
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	; (8002cac <UART_SetConfig+0x22c>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4422      	add	r2, r4
 8002bc4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002bc6:	e06a      	b.n	8002c9e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002bc8:	f7fe fec4 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4a32      	ldr	r2, [pc, #200]	; (8002cac <UART_SetConfig+0x22c>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	011c      	lsls	r4, r3, #4
 8002bec:	f7fe feb2 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009a      	lsls	r2, r3, #2
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c06:	f7fe fea5 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	009a      	lsls	r2, r3, #2
 8002c14:	441a      	add	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <UART_SetConfig+0x22c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2264      	movs	r2, #100	; 0x64
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	1aeb      	subs	r3, r5, r3
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	3332      	adds	r3, #50	; 0x32
 8002c34:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <UART_SetConfig+0x22c>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c40:	441c      	add	r4, r3
 8002c42:	f7fe fe87 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4613      	mov	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009a      	lsls	r2, r3, #2
 8002c50:	441a      	add	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c5c:	f7fe fe7a 	bl	8001954 <HAL_RCC_GetPCLK1Freq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	441a      	add	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	4a0d      	ldr	r2, [pc, #52]	; (8002cac <UART_SetConfig+0x22c>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2264      	movs	r2, #100	; 0x64
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	1aeb      	subs	r3, r5, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <UART_SetConfig+0x22c>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 020f 	and.w	r2, r3, #15
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4422      	add	r2, r4
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	51eb851f 	.word	0x51eb851f

08002cb0 <PWM_Control_1>:
/* USER CODE BEGIN 0 */

    volatile int duty = 36;
    volatile int duty_1 = 36;
    int pwm = 0;
	void PWM_Control_1(int duty){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

		if(duty > 0){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	dd0c      	ble.n	8002cd8 <PWM_Control_1+0x28>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cc4:	4817      	ldr	r0, [pc, #92]	; (8002d24 <PWM_Control_1+0x74>)
 8002cc6:	f7fd fd2d 	bl	8000724 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cd0:	4814      	ldr	r0, [pc, #80]	; (8002d24 <PWM_Control_1+0x74>)
 8002cd2:	f7fd fd27 	bl	8000724 <HAL_GPIO_WritePin>
 8002cd6:	e00e      	b.n	8002cf6 <PWM_Control_1+0x46>

		}
		else{
		  duty = -duty;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	425b      	negs	r3, r3
 8002cdc:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ce4:	480f      	ldr	r0, [pc, #60]	; (8002d24 <PWM_Control_1+0x74>)
 8002ce6:	f7fd fd1d 	bl	8000724 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 8002cea:	2201      	movs	r2, #1
 8002cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <PWM_Control_1+0x74>)
 8002cf2:	f7fd fd17 	bl	8000724 <HAL_GPIO_WritePin>
		}
		 if(duty < 800)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002cfc:	da06      	bge.n	8002d0c <PWM_Control_1+0x5c>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <PWM_Control_1+0x78>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3334      	adds	r3, #52	; 0x34
 8002d04:	3308      	adds	r3, #8
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	601a      	str	r2, [r3, #0]
		else
	      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 800);

	}
 8002d0a:	e006      	b.n	8002d1a <PWM_Control_1+0x6a>
	      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 800);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <PWM_Control_1+0x78>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3334      	adds	r3, #52	; 0x34
 8002d12:	3308      	adds	r3, #8
 8002d14:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002d18:	601a      	str	r2, [r3, #0]
	}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40010c00 	.word	0x40010c00
 8002d28:	20000160 	.word	0x20000160

08002d2c <HAL_TIM_PeriodElapsedCallback>:
				              	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 850);

	}

	  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	  {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	      if (__HAL_TIM_GET_IT_SOURCE(&htim1,TIM_IT_UPDATE)) {
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
	    	 // pre_com_angle = com_angle; // đạo hàm, lúc trước khi lấy mẫu cái hiện tại đã thành cái mới
	    	 // process_MPU();
	    	 // duty = PID(0,com_angle);
	      }
	  }
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000120 	.word	0x20000120

08002d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d4c:	f7fd f9fe 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d50:	f000 f838 	bl	8002dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d54:	f000 f9e0 	bl	8003118 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002d58:	f000 f8f8 	bl	8002f4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002d5c:	f000 f95e 	bl	800301c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8002d60:	f000 f9b0 	bl	80030c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002d64:	f000 f874 	bl	8002e50 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002d68:	f000 f8a0 	bl	8002eac <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8002d6c:	2108      	movs	r1, #8
 8002d6e:	4812      	ldr	r0, [pc, #72]	; (8002db8 <main+0x70>)
 8002d70:	f7fe fea6 	bl	8001ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8002d74:	210c      	movs	r1, #12
 8002d76:	4810      	ldr	r0, [pc, #64]	; (8002db8 <main+0x70>)
 8002d78:	f7fe fea2 	bl	8001ac0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <main+0x74>)
 8002d7e:	f7fe fe5a 	bl	8001a36 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1);
  //HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 init_MPU();
 8002d82:	f000 fa3d 	bl	8003200 <init_MPU>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    for(duty = 0 ; duty <1000 ;duty ++)
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <main+0x78>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	e009      	b.n	8002da2 <main+0x5a>
	  PWM_Control_1(duty);
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <main+0x78>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff8c 	bl	8002cb0 <PWM_Control_1>
    for(duty = 0 ; duty <1000 ;duty ++)
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <main+0x78>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <main+0x78>)
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <main+0x78>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002daa:	dbf0      	blt.n	8002d8e <main+0x46>
      HAL_Delay(1000);
 8002dac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db0:	f7fd fa2e 	bl	8000210 <HAL_Delay>
    for(duty = 0 ; duty <1000 ;duty ++)
 8002db4:	e7e7      	b.n	8002d86 <main+0x3e>
 8002db6:	bf00      	nop
 8002db8:	20000160 	.word	0x20000160
 8002dbc:	20000120 	.word	0x20000120
 8002dc0:	20000008 	.word	0x20000008

08002dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b090      	sub	sp, #64	; 0x40
 8002dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dca:	f107 0318 	add.w	r3, r7, #24
 8002dce:	2228      	movs	r2, #40	; 0x28
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fcc8 	bl	8003768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002de6:	2301      	movs	r3, #1
 8002de8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002df4:	2301      	movs	r3, #1
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002e02:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e08:	f107 0318 	add.w	r3, r7, #24
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f9c5 	bl	800119c <HAL_RCC_OscConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002e18:	f000 f9ec 	bl	80031f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1c:	230f      	movs	r3, #15
 8002e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e20:	2302      	movs	r3, #2
 8002e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2102      	movs	r1, #2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fc14 	bl	8001664 <HAL_RCC_ClockConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e42:	f000 f9d7 	bl	80031f4 <Error_Handler>
  }
}
 8002e46:	bf00      	nop
 8002e48:	3740      	adds	r7, #64	; 0x40
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e56:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <MX_I2C1_Init+0x54>)
 8002e58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <MX_I2C1_Init+0x58>)
 8002e5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e8c:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <MX_I2C1_Init+0x50>)
 8002e8e:	f7fd fc61 	bl	8000754 <HAL_I2C_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002e98:	f000 f9ac 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000034 	.word	0x20000034
 8002ea4:	40005400 	.word	0x40005400
 8002ea8:	00061a80 	.word	0x00061a80

08002eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb2:	f107 0308 	add.w	r3, r7, #8
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <MX_TIM1_Init+0x9c>)
 8002ecc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8002ece:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ed0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002ed4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ede:	2264      	movs	r2, #100	; 0x64
 8002ee0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ee8:	4b16      	ldr	r3, [pc, #88]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ef4:	4813      	ldr	r0, [pc, #76]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002ef6:	f7fe fd73 	bl	80019e0 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f00:	f000 f978 	bl	80031f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f0a:	f107 0308 	add.w	r3, r7, #8
 8002f0e:	4619      	mov	r1, r3
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002f12:	f7ff f861 	bl	8001fd8 <HAL_TIM_ConfigClockSource>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002f1c:	f000 f96a 	bl	80031f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f28:	463b      	mov	r3, r7
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_TIM1_Init+0x98>)
 8002f2e:	f7ff fc20 	bl	8002772 <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f38:	f000 f95c 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000120 	.word	0x20000120
 8002f48:	40012c00 	.word	0x40012c00

08002f4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f52:	f107 0320 	add.w	r3, r7, #32
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8002f76:	4b28      	ldr	r3, [pc, #160]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f78:	2203      	movs	r2, #3
 8002f7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f8a:	4b23      	ldr	r3, [pc, #140]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f96:	4820      	ldr	r0, [pc, #128]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002f98:	f7fe fd67 	bl	8001a6a <HAL_TIM_PWM_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002fa2:	f000 f927 	bl	80031f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002faa:	2300      	movs	r3, #0
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fae:	f107 0320 	add.w	r3, r7, #32
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4818      	ldr	r0, [pc, #96]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002fb6:	f7ff fbdc 	bl	8002772 <HAL_TIMEx_MasterConfigSynchronization>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002fc0:	f000 f918 	bl	80031f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc4:	2360      	movs	r3, #96	; 0x60
 8002fc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6000;
 8002fc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8002fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4619      	mov	r1, r3
 8002fdc:	480e      	ldr	r0, [pc, #56]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002fde:	f7fe ff35 	bl	8001e4c <HAL_TIM_PWM_ConfigChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002fe8:	f000 f904 	bl	80031f4 <Error_Handler>
  }
  sConfigOC.Pulse = 5999;
 8002fec:	f241 736f 	movw	r3, #5999	; 0x176f
 8002ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ff2:	1d3b      	adds	r3, r7, #4
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <MX_TIM2_Init+0xcc>)
 8002ffa:	f7fe ff27 	bl	8001e4c <HAL_TIM_PWM_ConfigChannel>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003004:	f000 f8f6 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <MX_TIM2_Init+0xcc>)
 800300a:	f000 fa7f 	bl	800350c <HAL_TIM_MspPostInit>

}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000160 	.word	0x20000160

0800301c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003022:	f107 030c 	add.w	r3, r7, #12
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fb9c 	bl	8003768 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003038:	4b20      	ldr	r3, [pc, #128]	; (80030bc <MX_TIM3_Init+0xa0>)
 800303a:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <MX_TIM3_Init+0xa4>)
 800303c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <MX_TIM3_Init+0xa0>)
 8003040:	2200      	movs	r2, #0
 8003042:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003044:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <MX_TIM3_Init+0xa0>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800304a:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <MX_TIM3_Init+0xa0>)
 800304c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003050:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003052:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <MX_TIM3_Init+0xa0>)
 8003054:	2200      	movs	r2, #0
 8003056:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <MX_TIM3_Init+0xa0>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800305e:	2301      	movs	r3, #1
 8003060:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003066:	2301      	movs	r3, #1
 8003068:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003072:	2300      	movs	r3, #0
 8003074:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800307a:	2300      	movs	r3, #0
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4619      	mov	r1, r3
 8003088:	480c      	ldr	r0, [pc, #48]	; (80030bc <MX_TIM3_Init+0xa0>)
 800308a:	f7fe fd41 	bl	8001b10 <HAL_TIM_Encoder_Init>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003094:	f000 f8ae 	bl	80031f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003098:	2300      	movs	r3, #0
 800309a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	; (80030bc <MX_TIM3_Init+0xa0>)
 80030a6:	f7ff fb64 	bl	8002772 <HAL_TIMEx_MasterConfigSynchronization>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80030b0:	f000 f8a0 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	3730      	adds	r7, #48	; 0x30
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	2000009c 	.word	0x2000009c
 80030c0:	40000400 	.word	0x40000400

080030c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <MX_USART1_UART_Init+0x50>)
 80030cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030e8:	4b09      	ldr	r3, [pc, #36]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030ea:	220c      	movs	r2, #12
 80030ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ee:	4b08      	ldr	r3, [pc, #32]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f4:	4b06      	ldr	r3, [pc, #24]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030fa:	4805      	ldr	r0, [pc, #20]	; (8003110 <MX_USART1_UART_Init+0x4c>)
 80030fc:	f7ff fb8f 	bl	800281e <HAL_UART_Init>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003106:	f000 f875 	bl	80031f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	200000dc 	.word	0x200000dc
 8003114:	40013800 	.word	0x40013800

08003118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311e:	f107 0310 	add.w	r3, r7, #16
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	605a      	str	r2, [r3, #4]
 8003128:	609a      	str	r2, [r3, #8]
 800312a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800312c:	4b2e      	ldr	r3, [pc, #184]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	4a2d      	ldr	r2, [pc, #180]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003132:	f043 0310 	orr.w	r3, r3, #16
 8003136:	6193      	str	r3, [r2, #24]
 8003138:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003144:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800314a:	f043 0320 	orr.w	r3, r3, #32
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003162:	f043 0304 	orr.w	r3, r3, #4
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	607b      	str	r3, [r7, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	4a1b      	ldr	r2, [pc, #108]	; (80031e8 <MX_GPIO_Init+0xd0>)
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6193      	str	r3, [r2, #24]
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <MX_GPIO_Init+0xd0>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003192:	4816      	ldr	r0, [pc, #88]	; (80031ec <MX_GPIO_Init+0xd4>)
 8003194:	f7fd fac6 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8003198:	2200      	movs	r2, #0
 800319a:	f640 4103 	movw	r1, #3075	; 0xc03
 800319e:	4814      	ldr	r0, [pc, #80]	; (80031f0 <MX_GPIO_Init+0xd8>)
 80031a0:	f7fd fac0 	bl	8000724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031aa:	2301      	movs	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2302      	movs	r3, #2
 80031b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	4619      	mov	r1, r3
 80031bc:	480b      	ldr	r0, [pc, #44]	; (80031ec <MX_GPIO_Init+0xd4>)
 80031be:	f7fd f953 	bl	8000468 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 80031c2:	f640 4303 	movw	r3, #3075	; 0xc03
 80031c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c8:	2301      	movs	r3, #1
 80031ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d0:	2302      	movs	r3, #2
 80031d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4619      	mov	r1, r3
 80031da:	4805      	ldr	r0, [pc, #20]	; (80031f0 <MX_GPIO_Init+0xd8>)
 80031dc:	f7fd f944 	bl	8000468 <HAL_GPIO_Init>

}
 80031e0:	bf00      	nop
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40011000 	.word	0x40011000
 80031f0:	40010c00 	.word	0x40010c00

080031f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <init_MPU>:
	*ptr = 0;

	return buf;
}

char init_MPU(){
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af02      	add	r7, sp, #8
    char status = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	77fb      	strb	r3, [r7, #31]
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 800320a:	23d0      	movs	r3, #208	; 0xd0
 800320c:	77bb      	strb	r3, [r7, #30]

    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 800320e:	7fbb      	ldrb	r3, [r7, #30]
 8003210:	b299      	uxth	r1, r3
 8003212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003216:	2203      	movs	r2, #3
 8003218:	4840      	ldr	r0, [pc, #256]	; (800331c <init_MPU+0x11c>)
 800321a:	f7fd fcad 	bl	8000b78 <HAL_I2C_IsDeviceReady>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <init_MPU+0x34>
    	strcpy( rx_data, "No Device \r \n");
 8003224:	463b      	mov	r3, r7
 8003226:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <init_MPU+0x120>)
 8003228:	461c      	mov	r4, r3
 800322a:	4613      	mov	r3, r2
 800322c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800322e:	c407      	stmia	r4!, {r0, r1, r2}
 8003230:	8023      	strh	r3, [r4, #0]
 8003232:	e007      	b.n	8003244 <init_MPU+0x44>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 8003234:	463b      	mov	r3, r7
 8003236:	4a3b      	ldr	r2, [pc, #236]	; (8003324 <init_MPU+0x124>)
 8003238:	461c      	mov	r4, r3
 800323a:	4615      	mov	r5, r2
 800323c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800323e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003240:	682b      	ldr	r3, [r5, #0]
 8003242:	7023      	strb	r3, [r4, #0]
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 8003244:	4639      	mov	r1, r7
 8003246:	2364      	movs	r3, #100	; 0x64
 8003248:	2219      	movs	r2, #25
 800324a:	4837      	ldr	r0, [pc, #220]	; (8003328 <init_MPU+0x128>)
 800324c:	f7ff fb34 	bl	80028b8 <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8003250:	236b      	movs	r3, #107	; 0x6b
 8003252:	773b      	strb	r3, [r7, #28]
    d[1] = 0;
 8003254:	2300      	movs	r3, #0
 8003256:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8003258:	7fbb      	ldrb	r3, [r7, #30]
 800325a:	b299      	uxth	r1, r3
 800325c:	f107 021c 	add.w	r2, r7, #28
 8003260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2302      	movs	r3, #2
 8003268:	482c      	ldr	r0, [pc, #176]	; (800331c <init_MPU+0x11c>)
 800326a:	f7fd fb77 	bl	800095c <HAL_I2C_Master_Transmit>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <init_MPU+0x78>
	{
		status = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	77fb      	strb	r3, [r7, #31]
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8003278:	2319      	movs	r3, #25
 800327a:	773b      	strb	r3, [r7, #28]
	d[1] = sample_1khz;
 800327c:	2307      	movs	r3, #7
 800327e:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8003280:	bf00      	nop
 8003282:	7fbb      	ldrb	r3, [r7, #30]
 8003284:	b299      	uxth	r1, r3
 8003286:	f107 021c 	add.w	r2, r7, #28
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2302      	movs	r3, #2
 8003292:	4822      	ldr	r0, [pc, #136]	; (800331c <init_MPU+0x11c>)
 8003294:	f7fd fb62 	bl	800095c <HAL_I2C_Master_Transmit>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f1      	bne.n	8003282 <init_MPU+0x82>

	d[0] = GYRO_CONFIG;
 800329e:	231b      	movs	r3, #27
 80032a0:	773b      	strb	r3, [r7, #28]
	d[1] = gyro_con;
 80032a2:	2318      	movs	r3, #24
 80032a4:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80032a6:	bf00      	nop
 80032a8:	7fbb      	ldrb	r3, [r7, #30]
 80032aa:	b299      	uxth	r1, r3
 80032ac:	f107 021c 	add.w	r2, r7, #28
 80032b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	2302      	movs	r3, #2
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <init_MPU+0x11c>)
 80032ba:	f7fd fb4f 	bl	800095c <HAL_I2C_Master_Transmit>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f1      	bne.n	80032a8 <init_MPU+0xa8>

	d[0] = ACCEL_CONFIG;
 80032c4:	231c      	movs	r3, #28
 80032c6:	773b      	strb	r3, [r7, #28]
	d[1] = 0x00;
 80032c8:	2300      	movs	r3, #0
 80032ca:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80032cc:	bf00      	nop
 80032ce:	7fbb      	ldrb	r3, [r7, #30]
 80032d0:	b299      	uxth	r1, r3
 80032d2:	f107 021c 	add.w	r2, r7, #28
 80032d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2302      	movs	r3, #2
 80032de:	480f      	ldr	r0, [pc, #60]	; (800331c <init_MPU+0x11c>)
 80032e0:	f7fd fb3c 	bl	800095c <HAL_I2C_Master_Transmit>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f1      	bne.n	80032ce <init_MPU+0xce>

	d[0] = INIT_ENB;
 80032ea:	2338      	movs	r3, #56	; 0x38
 80032ec:	773b      	strb	r3, [r7, #28]
	d[1] = inter;
 80032ee:	2301      	movs	r3, #1
 80032f0:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80032f2:	bf00      	nop
 80032f4:	7fbb      	ldrb	r3, [r7, #30]
 80032f6:	b299      	uxth	r1, r3
 80032f8:	f107 021c 	add.w	r2, r7, #28
 80032fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2302      	movs	r3, #2
 8003304:	4805      	ldr	r0, [pc, #20]	; (800331c <init_MPU+0x11c>)
 8003306:	f7fd fb29 	bl	800095c <HAL_I2C_Master_Transmit>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f1      	bne.n	80032f4 <init_MPU+0xf4>

  return status;
 8003310:	7ffb      	ldrb	r3, [r7, #31]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bdb0      	pop	{r4, r5, r7, pc}
 800331a:	bf00      	nop
 800331c:	20000034 	.word	0x20000034
 8003320:	080037a4 	.word	0x080037a4
 8003324:	080037b4 	.word	0x080037b4
 8003328:	200000dc 	.word	0x200000dc

0800332c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_MspInit+0x5c>)
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	4a14      	ldr	r2, [pc, #80]	; (8003388 <HAL_MspInit+0x5c>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6193      	str	r3, [r2, #24]
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_MspInit+0x5c>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_MspInit+0x5c>)
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <HAL_MspInit+0x5c>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003354:	61d3      	str	r3, [r2, #28]
 8003356:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_MspInit+0x5c>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	607b      	str	r3, [r7, #4]
 8003360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003362:	4b0a      	ldr	r3, [pc, #40]	; (800338c <HAL_MspInit+0x60>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <HAL_MspInit+0x60>)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000

08003390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 0310 	add.w	r3, r7, #16
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a15      	ldr	r2, [pc, #84]	; (8003400 <HAL_I2C_MspInit+0x70>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d123      	bne.n	80033f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033b6:	f043 0308 	orr.w	r3, r3, #8
 80033ba:	6193      	str	r3, [r2, #24]
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0308 	and.w	r3, r3, #8
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033c8:	23c0      	movs	r3, #192	; 0xc0
 80033ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033cc:	2312      	movs	r3, #18
 80033ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4619      	mov	r1, r3
 80033da:	480b      	ldr	r0, [pc, #44]	; (8003408 <HAL_I2C_MspInit+0x78>)
 80033dc:	f7fd f844 	bl	8000468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4a07      	ldr	r2, [pc, #28]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033ea:	61d3      	str	r3, [r2, #28]
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_I2C_MspInit+0x74>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033f8:	bf00      	nop
 80033fa:	3720      	adds	r7, #32
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40005400 	.word	0x40005400
 8003404:	40021000 	.word	0x40021000
 8003408:	40010c00 	.word	0x40010c00

0800340c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <HAL_TIM_Base_MspInit+0x44>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d113      	bne.n	8003446 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_TIM_Base_MspInit+0x48>)
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <HAL_TIM_Base_MspInit+0x48>)
 8003424:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003428:	6193      	str	r3, [r2, #24]
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_TIM_Base_MspInit+0x48>)
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2100      	movs	r1, #0
 800343a:	2019      	movs	r0, #25
 800343c:	f7fc ffdd 	bl	80003fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003440:	2019      	movs	r0, #25
 8003442:	f7fc fff6 	bl	8000432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40021000 	.word	0x40021000

08003458 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003468:	d10b      	bne.n	8003482 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_TIM_PWM_MspInit+0x34>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_TIM_PWM_MspInit+0x34>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	61d3      	str	r3, [r2, #28]
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_TIM_PWM_MspInit+0x34>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	40021000 	.word	0x40021000

08003490 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 0310 	add.w	r3, r7, #16
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a15      	ldr	r2, [pc, #84]	; (8003500 <HAL_TIM_Encoder_MspInit+0x70>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d123      	bne.n	80034f8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034b0:	4b14      	ldr	r3, [pc, #80]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	4a13      	ldr	r2, [pc, #76]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	61d3      	str	r3, [r2, #28]
 80034bc:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c8:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6193      	str	r3, [r2, #24]
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <HAL_TIM_Encoder_MspInit+0x74>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e0:	23c0      	movs	r3, #192	; 0xc0
 80034e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ec:	f107 0310 	add.w	r3, r7, #16
 80034f0:	4619      	mov	r1, r3
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <HAL_TIM_Encoder_MspInit+0x78>)
 80034f4:	f7fc ffb8 	bl	8000468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034f8:	bf00      	nop
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40000400 	.word	0x40000400
 8003504:	40021000 	.word	0x40021000
 8003508:	40010800 	.word	0x40010800

0800350c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003514:	f107 0310 	add.w	r3, r7, #16
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d117      	bne.n	800355c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_TIM_MspPostInit+0x58>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <HAL_TIM_MspPostInit+0x58>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6193      	str	r3, [r2, #24]
 8003538:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <HAL_TIM_MspPostInit+0x58>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003544:	230c      	movs	r3, #12
 8003546:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003548:	2302      	movs	r3, #2
 800354a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354c:	2302      	movs	r3, #2
 800354e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	4804      	ldr	r0, [pc, #16]	; (8003568 <HAL_TIM_MspPostInit+0x5c>)
 8003558:	f7fc ff86 	bl	8000468 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	3720      	adds	r7, #32
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000
 8003568:	40010800 	.word	0x40010800

0800356c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <HAL_UART_MspInit+0x8c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d131      	bne.n	80035f0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800358c:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_UART_MspInit+0x90>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_UART_MspInit+0x90>)
 8003592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_UART_MspInit+0x90>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_UART_MspInit+0x90>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <HAL_UART_MspInit+0x90>)
 80035aa:	f043 0304 	orr.w	r3, r3, #4
 80035ae:	6193      	str	r3, [r2, #24]
 80035b0:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_UART_MspInit+0x90>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c6:	2303      	movs	r3, #3
 80035c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	f107 0310 	add.w	r3, r7, #16
 80035ce:	4619      	mov	r1, r3
 80035d0:	480b      	ldr	r0, [pc, #44]	; (8003600 <HAL_UART_MspInit+0x94>)
 80035d2:	f7fc ff49 	bl	8000468 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4619      	mov	r1, r3
 80035ea:	4805      	ldr	r0, [pc, #20]	; (8003600 <HAL_UART_MspInit+0x94>)
 80035ec:	f7fc ff3c 	bl	8000468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035f0:	bf00      	nop
 80035f2:	3720      	adds	r7, #32
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40021000 	.word	0x40021000
 8003600:	40010800 	.word	0x40010800

08003604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <HardFault_Handler+0x4>

08003616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <MemManage_Handler+0x4>

0800361c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <BusFault_Handler+0x4>

08003622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <UsageFault_Handler+0x4>

08003628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003650:	f7fc fdc2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	bd80      	pop	{r7, pc}

08003658 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <TIM1_UP_IRQHandler+0x10>)
 800365e:	f7fe faed 	bl	8001c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000120 	.word	0x20000120

0800366c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003670:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <SystemInit+0x5c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <SystemInit+0x5c>)
 8003676:	f043 0301 	orr.w	r3, r3, #1
 800367a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <SystemInit+0x5c>)
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	4911      	ldr	r1, [pc, #68]	; (80036c8 <SystemInit+0x5c>)
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <SystemInit+0x60>)
 8003684:	4013      	ands	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <SystemInit+0x5c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0e      	ldr	r2, [pc, #56]	; (80036c8 <SystemInit+0x5c>)
 800368e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003696:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <SystemInit+0x5c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <SystemInit+0x5c>)
 800369e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80036a4:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <SystemInit+0x5c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4a07      	ldr	r2, [pc, #28]	; (80036c8 <SystemInit+0x5c>)
 80036aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80036ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <SystemInit+0x5c>)
 80036b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80036b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <SystemInit+0x64>)
 80036ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036be:	609a      	str	r2, [r3, #8]
#endif 
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	40021000 	.word	0x40021000
 80036cc:	f8ff0000 	.word	0xf8ff0000
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036d6:	e003      	b.n	80036e0 <LoopCopyDataInit>

080036d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036de:	3104      	adds	r1, #4

080036e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80036e0:	480a      	ldr	r0, [pc, #40]	; (800370c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80036e2:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80036e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80036e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80036e8:	d3f6      	bcc.n	80036d8 <CopyDataInit>
  ldr r2, =_sbss
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80036ec:	e002      	b.n	80036f4 <LoopFillZerobss>

080036ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80036ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80036f0:	f842 3b04 	str.w	r3, [r2], #4

080036f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036f8:	d3f9      	bcc.n	80036ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036fa:	f7ff ffb7 	bl	800366c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036fe:	f000 f80f 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003702:	f7ff fb21 	bl	8002d48 <main>
  bx lr
 8003706:	4770      	bx	lr
  ldr r3, =_sidata
 8003708:	080037e8 	.word	0x080037e8
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003710:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8003714:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8003718:	200001ac 	.word	0x200001ac

0800371c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800371c:	e7fe      	b.n	800371c <ADC1_2_IRQHandler>
	...

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	2500      	movs	r5, #0
 8003724:	4e0c      	ldr	r6, [pc, #48]	; (8003758 <__libc_init_array+0x38>)
 8003726:	4c0d      	ldr	r4, [pc, #52]	; (800375c <__libc_init_array+0x3c>)
 8003728:	1ba4      	subs	r4, r4, r6
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	42a5      	cmp	r5, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	f000 f822 	bl	8003778 <_init>
 8003734:	2500      	movs	r5, #0
 8003736:	4e0a      	ldr	r6, [pc, #40]	; (8003760 <__libc_init_array+0x40>)
 8003738:	4c0a      	ldr	r4, [pc, #40]	; (8003764 <__libc_init_array+0x44>)
 800373a:	1ba4      	subs	r4, r4, r6
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	42a5      	cmp	r5, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003748:	4798      	blx	r3
 800374a:	3501      	adds	r5, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003752:	4798      	blx	r3
 8003754:	3501      	adds	r5, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037e0 	.word	0x080037e0
 800375c:	080037e0 	.word	0x080037e0
 8003760:	080037e0 	.word	0x080037e0
 8003764:	080037e4 	.word	0x080037e4

08003768 <memset>:
 8003768:	4603      	mov	r3, r0
 800376a:	4402      	add	r2, r0
 800376c:	4293      	cmp	r3, r2
 800376e:	d100      	bne.n	8003772 <memset+0xa>
 8003770:	4770      	bx	lr
 8003772:	f803 1b01 	strb.w	r1, [r3], #1
 8003776:	e7f9      	b.n	800376c <memset+0x4>

08003778 <_init>:
 8003778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800377a:	bf00      	nop
 800377c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	469e      	mov	lr, r3
 8003782:	4770      	bx	lr

08003784 <_fini>:
 8003784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003786:	bf00      	nop
 8003788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378a:	bc08      	pop	{r3}
 800378c:	469e      	mov	lr, r3
 800378e:	4770      	bx	lr

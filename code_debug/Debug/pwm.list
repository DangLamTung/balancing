
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006cd8  08006cd8  00016cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ed0  08006ed0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006ed0  08006ed0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ed0  08006ed0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001e0  080070b8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080070b8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140c5  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ac  00000000  00000000  000342ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d40  00000000  00000000  000375b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f6a  00000000  00000000  000382f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1cb  00000000  00000000  0004e262  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000744b5  00000000  00000000  0005942d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cd8e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000cd960  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cbc 	.word	0x08006cbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006cbc 	.word	0x08006cbc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2uiz>:
 8000a78:	004a      	lsls	r2, r1, #1
 8000a7a:	d211      	bcs.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a80:	d211      	bcs.n	8000aa6 <__aeabi_d2uiz+0x2e>
 8000a82:	d50d      	bpl.n	8000aa0 <__aeabi_d2uiz+0x28>
 8000a84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a8c:	d40e      	bmi.n	8000aac <__aeabi_d2uiz+0x34>
 8000a8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_d2uiz+0x3a>
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c14:	f1a2 0201 	sub.w	r2, r2, #1
 8000c18:	d1ed      	bne.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_f2iz>:
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800101c:	d30f      	bcc.n	800103e <__aeabi_f2iz+0x2a>
 800101e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001022:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001026:	d90d      	bls.n	8001044 <__aeabi_f2iz+0x30>
 8001028:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800102c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001030:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001034:	fa23 f002 	lsr.w	r0, r3, r2
 8001038:	bf18      	it	ne
 800103a:	4240      	negne	r0, r0
 800103c:	4770      	bx	lr
 800103e:	f04f 0000 	mov.w	r0, #0
 8001042:	4770      	bx	lr
 8001044:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001048:	d101      	bne.n	800104e <__aeabi_f2iz+0x3a>
 800104a:	0242      	lsls	r2, r0, #9
 800104c:	d105      	bne.n	800105a <__aeabi_f2iz+0x46>
 800104e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001052:	bf08      	it	eq
 8001054:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_Init+0x28>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_Init+0x28>)
 800106a:	f043 0310 	orr.w	r3, r3, #16
 800106e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f939 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f808 	bl	800108c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800107c:	f004 ff96 	bl	8005fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001094:	4b12      	ldr	r3, [pc, #72]	; (80010e0 <HAL_InitTick+0x54>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_InitTick+0x58>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f95f 	bl	800136e <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00e      	b.n	80010d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d80a      	bhi.n	80010d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f000 f919 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010cc:	4a06      	ldr	r2, [pc, #24]	; (80010e8 <HAL_InitTick+0x5c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e000      	b.n	80010d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000008 	.word	0x20000008
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000000 	.word	0x20000000

080010ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_IncTick+0x1c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_IncTick+0x20>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a03      	ldr	r2, [pc, #12]	; (800110c <HAL_IncTick+0x20>)
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	20000004 	.word	0x20000004
 800110c:	20000208 	.word	0x20000208

08001110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b02      	ldr	r3, [pc, #8]	; (8001120 <HAL_GetTick+0x10>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	20000208 	.word	0x20000208

08001124 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	; (80011b4 <NVIC_EnableIRQ+0x2c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	f003 021f 	and.w	r2, r3, #31
 80011c8:	4907      	ldr	r1, [pc, #28]	; (80011e8 <NVIC_DisableIRQ+0x30>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	095b      	lsrs	r3, r3, #5
 80011d0:	2001      	movs	r0, #1
 80011d2:	fa00 f202 	lsl.w	r2, r0, r2
 80011d6:	3320      	adds	r3, #32
 80011d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100

080011ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da0b      	bge.n	8001218 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <NVIC_SetPriority+0x4c>)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 030f 	and.w	r3, r3, #15
 800120c:	3b04      	subs	r3, #4
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001216:	e009      	b.n	800122c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4907      	ldr	r1, [pc, #28]	; (800123c <NVIC_SetPriority+0x50>)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	0112      	lsls	r2, r2, #4
 8001224:	b2d2      	uxtb	r2, r2
 8001226:	440b      	add	r3, r1
 8001228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	e000e100 	.word	0xe000e100

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff17 	bl	8001124 <NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff2c 	bl	800116c <NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff1f 	bl	8001188 <NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff29 	bl	80011b8 <NVIC_DisableIRQ>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff94 	bl	80012a4 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800139a:	2b02      	cmp	r3, #2
 800139c:	d005      	beq.n	80013aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e051      	b.n	800144e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 020e 	bic.w	r2, r2, #14
 80013b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f022 0201 	bic.w	r2, r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a22      	ldr	r2, [pc, #136]	; (8001458 <HAL_DMA_Abort_IT+0xd0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d029      	beq.n	8001428 <HAL_DMA_Abort_IT+0xa0>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <HAL_DMA_Abort_IT+0xd4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d022      	beq.n	8001424 <HAL_DMA_Abort_IT+0x9c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_DMA_Abort_IT+0xd8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d01a      	beq.n	800141e <HAL_DMA_Abort_IT+0x96>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_DMA_Abort_IT+0xdc>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d012      	beq.n	8001418 <HAL_DMA_Abort_IT+0x90>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_DMA_Abort_IT+0xe0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00a      	beq.n	8001412 <HAL_DMA_Abort_IT+0x8a>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1a      	ldr	r2, [pc, #104]	; (800146c <HAL_DMA_Abort_IT+0xe4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d102      	bne.n	800140c <HAL_DMA_Abort_IT+0x84>
 8001406:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800140a:	e00e      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 800140c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001410:	e00b      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001416:	e008      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	e005      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	e002      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001424:	2310      	movs	r3, #16
 8001426:	e000      	b.n	800142a <HAL_DMA_Abort_IT+0xa2>
 8001428:	2301      	movs	r3, #1
 800142a:	4a11      	ldr	r2, [pc, #68]	; (8001470 <HAL_DMA_Abort_IT+0xe8>)
 800142c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
    } 
  }
  return status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40020008 	.word	0x40020008
 800145c:	4002001c 	.word	0x4002001c
 8001460:	40020030 	.word	0x40020030
 8001464:	40020044 	.word	0x40020044
 8001468:	40020058 	.word	0x40020058
 800146c:	4002006c 	.word	0x4002006c
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
 8001496:	e127      	b.n	80016e8 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001498:	2201      	movs	r2, #1
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	f040 8116 	bne.w	80016e2 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d034      	beq.n	8001528 <HAL_GPIO_Init+0xb4>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d80d      	bhi.n	80014de <HAL_GPIO_Init+0x6a>
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d02b      	beq.n	800151e <HAL_GPIO_Init+0xaa>
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d804      	bhi.n	80014d4 <HAL_GPIO_Init+0x60>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d031      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d01c      	beq.n	800150c <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014d2:	e048      	b.n	8001566 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d043      	beq.n	8001560 <HAL_GPIO_Init+0xec>
 80014d8:	2b11      	cmp	r3, #17
 80014da:	d01b      	beq.n	8001514 <HAL_GPIO_Init+0xa0>
          break;
 80014dc:	e043      	b.n	8001566 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014de:	4a87      	ldr	r2, [pc, #540]	; (80016fc <HAL_GPIO_Init+0x288>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d026      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
 80014e4:	4a85      	ldr	r2, [pc, #532]	; (80016fc <HAL_GPIO_Init+0x288>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d806      	bhi.n	80014f8 <HAL_GPIO_Init+0x84>
 80014ea:	4a85      	ldr	r2, [pc, #532]	; (8001700 <HAL_GPIO_Init+0x28c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d020      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
 80014f0:	4a84      	ldr	r2, [pc, #528]	; (8001704 <HAL_GPIO_Init+0x290>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d01d      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
          break;
 80014f6:	e036      	b.n	8001566 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80014f8:	4a83      	ldr	r2, [pc, #524]	; (8001708 <HAL_GPIO_Init+0x294>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d019      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
 80014fe:	4a83      	ldr	r2, [pc, #524]	; (800170c <HAL_GPIO_Init+0x298>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d016      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
 8001504:	4a82      	ldr	r2, [pc, #520]	; (8001710 <HAL_GPIO_Init+0x29c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0xbe>
          break;
 800150a:	e02c      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	623b      	str	r3, [r7, #32]
          break;
 8001512:	e028      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	3304      	adds	r3, #4
 800151a:	623b      	str	r3, [r7, #32]
          break;
 800151c:	e023      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	3308      	adds	r3, #8
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e01e      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	330c      	adds	r3, #12
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e019      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d102      	bne.n	8001540 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800153a:	2304      	movs	r3, #4
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e012      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001548:	2308      	movs	r3, #8
 800154a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	611a      	str	r2, [r3, #16]
          break;
 8001552:	e008      	b.n	8001566 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001554:	2308      	movs	r3, #8
 8001556:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	615a      	str	r2, [r3, #20]
          break;
 800155e:	e002      	b.n	8001566 <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
          break;
 8001564:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2bff      	cmp	r3, #255	; 0xff
 800156a:	d801      	bhi.n	8001570 <HAL_GPIO_Init+0xfc>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	e001      	b.n	8001574 <HAL_GPIO_Init+0x100>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3304      	adds	r3, #4
 8001574:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2bff      	cmp	r3, #255	; 0xff
 800157a:	d802      	bhi.n	8001582 <HAL_GPIO_Init+0x10e>
 800157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x114>
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	3b08      	subs	r3, #8
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	210f      	movs	r1, #15
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	401a      	ands	r2, r3
 800159a:	6a39      	ldr	r1, [r7, #32]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
 80015a2:	431a      	orrs	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8096 	beq.w	80016e2 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015b6:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_GPIO_Init+0x2a0>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	4a56      	ldr	r2, [pc, #344]	; (8001714 <HAL_GPIO_Init+0x2a0>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6193      	str	r3, [r2, #24]
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <HAL_GPIO_Init+0x2a0>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 80015ce:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_GPIO_Init+0x2a4>)
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4013      	ands	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a49      	ldr	r2, [pc, #292]	; (800171c <HAL_GPIO_Init+0x2a8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d013      	beq.n	8001622 <HAL_GPIO_Init+0x1ae>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a48      	ldr	r2, [pc, #288]	; (8001720 <HAL_GPIO_Init+0x2ac>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00d      	beq.n	800161e <HAL_GPIO_Init+0x1aa>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a47      	ldr	r2, [pc, #284]	; (8001724 <HAL_GPIO_Init+0x2b0>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d007      	beq.n	800161a <HAL_GPIO_Init+0x1a6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_GPIO_Init+0x2b4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d101      	bne.n	8001616 <HAL_GPIO_Init+0x1a2>
 8001612:	2303      	movs	r3, #3
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x1b0>
 8001616:	2304      	movs	r3, #4
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x1b0>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x1b0>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x1b0>
 8001622:	2300      	movs	r3, #0
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	f002 0203 	and.w	r2, r2, #3
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	4313      	orrs	r3, r2
 8001632:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8001634:	4938      	ldr	r1, [pc, #224]	; (8001718 <HAL_GPIO_Init+0x2a4>)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800164e:	4b37      	ldr	r3, [pc, #220]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4936      	ldr	r1, [pc, #216]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	600b      	str	r3, [r1, #0]
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <HAL_GPIO_Init+0x2b8>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4931      	ldr	r1, [pc, #196]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	492c      	ldr	r1, [pc, #176]	; (800172c <HAL_GPIO_Init+0x2b8>)
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
 8001682:	e006      	b.n	8001692 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001684:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_GPIO_Init+0x2b8>)
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	43db      	mvns	r3, r3
 800168c:	4927      	ldr	r1, [pc, #156]	; (800172c <HAL_GPIO_Init+0x2b8>)
 800168e:	4013      	ands	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	4922      	ldr	r1, [pc, #136]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
 80016aa:	e006      	b.n	80016ba <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	43db      	mvns	r3, r3
 80016b4:	491d      	ldr	r1, [pc, #116]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d006      	beq.n	80016d4 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	4918      	ldr	r1, [pc, #96]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]
 80016d2:	e006      	b.n	80016e2 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	43db      	mvns	r3, r3
 80016dc:	4913      	ldr	r1, [pc, #76]	; (800172c <HAL_GPIO_Init+0x2b8>)
 80016de:	4013      	ands	r3, r2
 80016e0:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	3301      	adds	r3, #1
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aed4 	bls.w	8001498 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	372c      	adds	r7, #44	; 0x2c
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	10210000 	.word	0x10210000
 8001700:	10110000 	.word	0x10110000
 8001704:	10120000 	.word	0x10120000
 8001708:	10310000 	.word	0x10310000
 800170c:	10320000 	.word	0x10320000
 8001710:	10220000 	.word	0x10220000
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	40010800 	.word	0x40010800
 8001720:	40010c00 	.word	0x40010c00
 8001724:	40011000 	.word	0x40011000
 8001728:	40011400 	.word	0x40011400
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800174a:	e09a      	b.n	8001882 <HAL_GPIO_DeInit+0x152>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808d 	beq.w	800187c <HAL_GPIO_DeInit+0x14c>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	d801      	bhi.n	800176c <HAL_GPIO_DeInit+0x3c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	e001      	b.n	8001770 <HAL_GPIO_DeInit+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3304      	adds	r3, #4
 8001770:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	2bff      	cmp	r3, #255	; 0xff
 8001776:	d802      	bhi.n	800177e <HAL_GPIO_DeInit+0x4e>
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	e002      	b.n	8001784 <HAL_GPIO_DeInit+0x54>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b08      	subs	r3, #8
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	613b      	str	r3, [r7, #16]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	210f      	movs	r1, #15
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	401a      	ands	r2, r3
 8001796:	2104      	movs	r1, #4
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	431a      	orrs	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2U];
 80017b2:	4a3a      	ldr	r2, [pc, #232]	; (800189c <HAL_GPIO_DeInit+0x16c>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FU << (4U * (position & 0x03U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	4013      	ands	r3, r2
 80017d2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a32      	ldr	r2, [pc, #200]	; (80018a0 <HAL_GPIO_DeInit+0x170>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d013      	beq.n	8001804 <HAL_GPIO_DeInit+0xd4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a31      	ldr	r2, [pc, #196]	; (80018a4 <HAL_GPIO_DeInit+0x174>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00d      	beq.n	8001800 <HAL_GPIO_DeInit+0xd0>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a30      	ldr	r2, [pc, #192]	; (80018a8 <HAL_GPIO_DeInit+0x178>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d007      	beq.n	80017fc <HAL_GPIO_DeInit+0xcc>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a2f      	ldr	r2, [pc, #188]	; (80018ac <HAL_GPIO_DeInit+0x17c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_GPIO_DeInit+0xc8>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_DeInit+0xd6>
 80017f8:	2304      	movs	r3, #4
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_DeInit+0xd6>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_DeInit+0xd6>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_DeInit+0xd6>
 8001804:	2300      	movs	r3, #0
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	429a      	cmp	r2, r3
 8001814:	d132      	bne.n	800187c <HAL_GPIO_DeInit+0x14c>
      {
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2U], tmp);
 8001826:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_GPIO_DeInit+0x16c>)
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	43da      	mvns	r2, r3
 8001836:	4819      	ldr	r0, [pc, #100]	; (800189c <HAL_GPIO_DeInit+0x16c>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	400a      	ands	r2, r1
 800183e:	3302      	adds	r3, #2
 8001840:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	43db      	mvns	r3, r3
 800184c:	4918      	ldr	r1, [pc, #96]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 800184e:	4013      	ands	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	43db      	mvns	r3, r3
 800185a:	4915      	ldr	r1, [pc, #84]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 800185c:	4013      	ands	r3, r2
 800185e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4911      	ldr	r1, [pc, #68]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 800186a:	4013      	ands	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_GPIO_DeInit+0x180>)
 8001878:	4013      	ands	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
      }
    }

    position++;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3301      	adds	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	fa22 f303 	lsr.w	r3, r2, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	f47f af5e 	bne.w	800174c <HAL_GPIO_DeInit+0x1c>
  }
}
 8001890:	bf00      	nop
 8001892:	3724      	adds	r7, #36	; 0x24
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40010000 	.word	0x40010000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	40011000 	.word	0x40011000
 80018ac:	40011400 	.word	0x40011400
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	041a      	lsls	r2, r3, #16
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0e7      	b.n	8001ace <HAL_I2C_Init+0x1ea>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d106      	bne.n	8001918 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f004 fb7c 	bl	8006010 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2224      	movs	r2, #36	; 0x24
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001930:	f001 fc24 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8001934:	60b8      	str	r0, [r7, #8]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	4a67      	ldr	r2, [pc, #412]	; (8001ad8 <HAL_I2C_Init+0x1f4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d807      	bhi.n	8001950 <HAL_I2C_Init+0x6c>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4a66      	ldr	r2, [pc, #408]	; (8001adc <HAL_I2C_Init+0x1f8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	bf94      	ite	ls
 8001948:	2301      	movls	r3, #1
 800194a:	2300      	movhi	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	e006      	b.n	800195e <HAL_I2C_Init+0x7a>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4a63      	ldr	r2, [pc, #396]	; (8001ae0 <HAL_I2C_Init+0x1fc>)
 8001954:	4293      	cmp	r3, r2
 8001956:	bf94      	ite	ls
 8001958:	2301      	movls	r3, #1
 800195a:	2300      	movhi	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_I2C_Init+0x82>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0b3      	b.n	8001ace <HAL_I2C_Init+0x1ea>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4a5e      	ldr	r2, [pc, #376]	; (8001ae4 <HAL_I2C_Init+0x200>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a56      	ldr	r2, [pc, #344]	; (8001ad8 <HAL_I2C_Init+0x1f4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d802      	bhi.n	800198a <HAL_I2C_Init+0xa6>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	3301      	adds	r3, #1
 8001988:	e009      	b.n	800199e <HAL_I2C_Init+0xba>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001990:	fb02 f303 	mul.w	r3, r2, r3
 8001994:	4a54      	ldr	r2, [pc, #336]	; (8001ae8 <HAL_I2C_Init+0x204>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	3301      	adds	r3, #1
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a4b      	ldr	r2, [pc, #300]	; (8001ad8 <HAL_I2C_Init+0x1f4>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d80d      	bhi.n	80019ca <HAL_I2C_Init+0xe6>
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf38      	it	cc
 80019c6:	2304      	movcc	r3, #4
 80019c8:	e04f      	b.n	8001a6a <HAL_I2C_Init+0x186>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d111      	bne.n	80019f6 <HAL_I2C_Init+0x112>
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1e59      	subs	r1, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	e012      	b.n	8001a1c <HAL_I2C_Init+0x138>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1e59      	subs	r1, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009a      	lsls	r2, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	bf0c      	ite	eq
 8001a16:	2301      	moveq	r3, #1
 8001a18:	2300      	movne	r3, #0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Init+0x140>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e022      	b.n	8001a6a <HAL_I2C_Init+0x186>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10e      	bne.n	8001a4a <HAL_I2C_Init+0x166>
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1e59      	subs	r1, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a48:	e00f      	b.n	8001a6a <HAL_I2C_Init+0x186>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1e59      	subs	r1, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	009a      	lsls	r2, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69d9      	ldr	r1, [r3, #28]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6959      	ldr	r1, [r3, #20]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2220      	movs	r2, #32
 8001aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	000186a0 	.word	0x000186a0
 8001adc:	001e847f 	.word	0x001e847f
 8001ae0:	003d08ff 	.word	0x003d08ff
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	10624dd3 	.word	0x10624dd3

08001aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	460b      	mov	r3, r1
 8001afa:	817b      	strh	r3, [r7, #10]
 8001afc:	4613      	mov	r3, r2
 8001afe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b04:	f7ff fb04 	bl	8001110 <HAL_GetTick>
 8001b08:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	f040 80ee 	bne.w	8001cf4 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2319      	movs	r3, #25
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4977      	ldr	r1, [pc, #476]	; (8001d00 <HAL_I2C_Master_Transmit+0x214>)
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fda4 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e0e1      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_I2C_Master_Transmit+0x54>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e0da      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d007      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b74:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2221      	movs	r2, #33	; 0x21
 8001b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2210      	movs	r2, #16
 8001b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	893a      	ldrh	r2, [r7, #8]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a5a      	ldr	r2, [pc, #360]	; (8001d04 <HAL_I2C_Master_Transmit+0x218>)
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ba8:	8979      	ldrh	r1, [r7, #10]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	6a3a      	ldr	r2, [r7, #32]
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fc14 	bl	80023dc <I2C_MasterRequestWrite>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00f      	beq.n	8001bda <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d105      	bne.n	8001bce <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e093      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e08d      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8001bf0:	e066      	b.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	6a39      	ldr	r1, [r7, #32]
 8001bf6:	68f8      	ldr	r0, [r7, #12]
 8001bf8:	f000 fdf9 	bl	80027ee <I2C_WaitOnTXEFlagUntilTimeout>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00f      	beq.n	8001c22 <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d109      	bne.n	8001c1e <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c18:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06b      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e069      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1c59      	adds	r1, r3, #1
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	6251      	str	r1, [r2, #36]	; 0x24
 8001c2c:	781a      	ldrb	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d119      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x1a4>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d015      	beq.n	8001c90 <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	1c59      	adds	r1, r3, #1
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	6251      	str	r1, [r2, #36]	; 0x24
 8001c6e:	781a      	ldrb	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	6a39      	ldr	r1, [r7, #32]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fde7 	bl	8002868 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00f      	beq.n	8001cc0 <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d109      	bne.n	8001cbc <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e01c      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e01a      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d194      	bne.n	8001bf2 <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	00100002 	.word	0x00100002
 8001d04:	ffff0000 	.word	0xffff0000

08001d08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	817b      	strh	r3, [r7, #10]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d20:	f7ff f9f6 	bl	8001110 <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b20      	cmp	r3, #32
 8001d30:	f040 821d 	bne.w	800216e <HAL_I2C_Master_Receive+0x466>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2319      	movs	r3, #25
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4987      	ldr	r1, [pc, #540]	; (8001f5c <HAL_I2C_Master_Receive+0x254>)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fc96 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e210      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_I2C_Master_Receive+0x54>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e209      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d007      	beq.n	8001d82 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0201 	orr.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2222      	movs	r2, #34	; 0x22
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	893a      	ldrh	r2, [r7, #8]
 8001db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_I2C_Master_Receive+0x258>)
 8001db8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001dc4:	8979      	ldrh	r1, [r7, #10]
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fb88 	bl	80024e0 <I2C_MasterRequestRead>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00f      	beq.n	8001df6 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d105      	bne.n	8001dea <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c2      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1bc      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
      }
    }

    if(hi2c->XferSize == 0U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d113      	bne.n	8001e26 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	623b      	str	r3, [r7, #32]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	623b      	str	r3, [r7, #32]
 8001e12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e190      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
    }
    else if(hi2c->XferSize == 1U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d11d      	bne.n	8001e6a <HAL_I2C_Master_Receive+0x162>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e3e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e66:	b662      	cpsie	i
 8001e68:	e16e      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>

      /* Re-enable IRQs */
      __enable_irq(); 
    }
    else if(hi2c->XferSize == 2U)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d11d      	bne.n	8001eae <HAL_I2C_Master_Receive+0x1a6>
    {
      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e84:	2300      	movs	r3, #0
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001eaa:	b662      	cpsie	i
 8001eac:	e14c      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
      __enable_irq(); 
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8001ed4:	e138      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
    {
      if(hi2c->XferSize <= 3U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	f200 80ef 	bhi.w	80020be <HAL_I2C_Master_Receive+0x3b6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d127      	bne.n	8001f38 <HAL_I2C_Master_Receive+0x230>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8001ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fcf8 	bl	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_I2C_Master_Receive+0x200>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efc:	2b20      	cmp	r3, #32
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_Master_Receive+0x1fc>
            {
              return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e135      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
            }
            else
            {
              return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e133      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6918      	ldr	r0, [r3, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	1c59      	adds	r1, r3, #1
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	6251      	str	r1, [r2, #36]	; 0x24
 8001f18:	b2c2      	uxtb	r2, r0
 8001f1a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f20:	3b01      	subs	r3, #1
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f36:	e107      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d14c      	bne.n	8001fda <HAL_I2C_Master_Receive+0x2d2>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f46:	2200      	movs	r2, #0
 8001f48:	4906      	ldr	r1, [pc, #24]	; (8001f64 <HAL_I2C_Master_Receive+0x25c>)
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f000 fb90 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_I2C_Master_Receive+0x260>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e10a      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
 8001f5a:	bf00      	nop
 8001f5c:	00100002 	.word	0x00100002
 8001f60:	ffff0000 	.word	0xffff0000
 8001f64:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001f68:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
           __disable_irq();

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f78:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6918      	ldr	r0, [r3, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	1c59      	adds	r1, r3, #1
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6251      	str	r1, [r2, #36]	; 0x24
 8001f8a:	b2c2      	uxtb	r2, r0
 8001f8c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6918      	ldr	r0, [r3, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	1c59      	adds	r1, r3, #1
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	6251      	str	r1, [r2, #36]	; 0x24
 8001fba:	b2c2      	uxtb	r2, r0
 8001fbc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd8:	e0b6      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	4965      	ldr	r1, [pc, #404]	; (8002178 <HAL_I2C_Master_Receive+0x470>)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 fb43 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <HAL_I2C_Master_Receive+0x2ec>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0bd      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002002:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6918      	ldr	r0, [r3, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	1c59      	adds	r1, r3, #1
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	6251      	str	r1, [r2, #36]	; 0x24
 8002016:	b2c2      	uxtb	r2, r0
 8002018:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201e:	3b01      	subs	r3, #1
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202a:	b29b      	uxth	r3, r3
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	2200      	movs	r2, #0
 800203c:	494e      	ldr	r1, [pc, #312]	; (8002178 <HAL_I2C_Master_Receive+0x470>)
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f000 fb16 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Master_Receive+0x346>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e090      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6918      	ldr	r0, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6251      	str	r1, [r2, #36]	; 0x24
 800206e:	b2c2      	uxtb	r2, r0
 8002070:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800208c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq(); 

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6918      	ldr	r0, [r3, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	6251      	str	r1, [r2, #36]	; 0x24
 800209e:	b2c2      	uxtb	r2, r0
 80020a0:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020bc:	e044      	b.n	8002148 <HAL_I2C_Master_Receive+0x440>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80020be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 fc0d 	bl	80028e2 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_I2C_Master_Receive+0x3d6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	d101      	bne.n	80020da <HAL_I2C_Master_Receive+0x3d2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e04a      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
          }
          else
          {
            return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e048      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6918      	ldr	r0, [r3, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	1c59      	adds	r1, r3, #1
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6251      	str	r1, [r2, #36]	; 0x24
 80020ee:	b2c2      	uxtb	r2, r0
 80020f0:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29a      	uxth	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d116      	bne.n	8002148 <HAL_I2C_Master_Receive+0x440>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6918      	ldr	r0, [r3, #16]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	6251      	str	r1, [r2, #36]	; 0x24
 800212a:	b2c2      	uxtb	r2, r0
 800212c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	2b00      	cmp	r3, #0
 800214e:	f47f aec2 	bne.w	8001ed6 <HAL_I2C_Master_Receive+0x1ce>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2220      	movs	r2, #32
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	e000      	b.n	8002170 <HAL_I2C_Master_Receive+0x468>
  }
  else
  {
    return HAL_BUSY;
 800216e:	2302      	movs	r3, #2
  }
}
 8002170:	4618      	mov	r0, r3
 8002172:	3728      	adds	r7, #40	; 0x28
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	00010004 	.word	0x00010004

0800217c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08c      	sub	sp, #48	; 0x30
 8002180:	af02      	add	r7, sp, #8
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U, tmp1 = 0U, tmp2 = 0U, tmp3 = 0U, I2C_Trials = 1U;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	2300      	movs	r3, #0
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	2301      	movs	r3, #1
 800219e:	617b      	str	r3, [r7, #20]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021a0:	f7fe ffb6 	bl	8001110 <HAL_GetTick>
 80021a4:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	f040 810b 	bne.w	80023ca <HAL_I2C_IsDeviceReady+0x24e>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2319      	movs	r3, #25
 80021ba:	2201      	movs	r2, #1
 80021bc:	4985      	ldr	r1, [pc, #532]	; (80023d4 <HAL_I2C_IsDeviceReady+0x258>)
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fa56 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_IsDeviceReady+0x52>
    {
      return HAL_BUSY;
 80021ca:	2302      	movs	r3, #2
 80021cc:	e0fe      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_I2C_IsDeviceReady+0x60>
 80021d8:	2302      	movs	r3, #2
 80021da:	e0f7      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d007      	beq.n	8002202 <HAL_I2C_IsDeviceReady+0x86>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002210:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2224      	movs	r2, #36	; 0x24
 8002216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a6d      	ldr	r2, [pc, #436]	; (80023d8 <HAL_I2C_IsDeviceReady+0x25c>)
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
    
    do
    {
      /* Generate Start */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002234:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2200      	movs	r2, #0
 800223e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	f000 fa14 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_IsDeviceReady+0xd6>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0bc      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002260:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe ff55 	bl	8001110 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	623b      	str	r3, [r7, #32]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	bf0c      	ite	eq
 800228e:	2301      	moveq	r3, #1
 8002290:	2300      	movne	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	61fb      	str	r3, [r7, #28]
      tmp3 = hi2c->State;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229c:	b2db      	uxtb	r3, r3
 800229e:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80022a0:	e02a      	b.n	80022f8 <HAL_I2C_IsDeviceReady+0x17c>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_I2C_IsDeviceReady+0x13c>
 80022a8:	f7fe ff32 	bl	8001110 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d203      	bcs.n	80022c0 <HAL_I2C_IsDeviceReady+0x144>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	22a0      	movs	r2, #160	; 0xa0
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	623b      	str	r3, [r7, #32]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	61fb      	str	r3, [r7, #28]
        tmp3 = hi2c->State;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	61bb      	str	r3, [r7, #24]
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_I2C_IsDeviceReady+0x18e>
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <HAL_I2C_IsDeviceReady+0x18e>
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2ba0      	cmp	r3, #160	; 0xa0
 8002308:	d1cb      	bne.n	80022a2 <HAL_I2C_IsDeviceReady+0x126>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d129      	bne.n	8002374 <HAL_I2C_IsDeviceReady+0x1f8>
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2319      	movs	r3, #25
 800234c:	2201      	movs	r2, #1
 800234e:	4921      	ldr	r1, [pc, #132]	; (80023d4 <HAL_I2C_IsDeviceReady+0x258>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f98d 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_IsDeviceReady+0x1e4>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e035      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	e02b      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
      }
      else
      {
        /* Generate Stop */
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800238c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2319      	movs	r3, #25
 8002394:	2201      	movs	r2, #1
 8002396:	490f      	ldr	r1, [pc, #60]	; (80023d4 <HAL_I2C_IsDeviceReady+0x258>)
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f969 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_IsDeviceReady+0x22c>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e011      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
        }
      }
    }while(I2C_Trials++ < Trials);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	617a      	str	r2, [r7, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f63f af38 	bhi.w	8002226 <HAL_I2C_IsDeviceReady+0xaa>

    hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_I2C_IsDeviceReady+0x250>
  }
  else
  {
    return HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
  }
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d006      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00b      	b.n	8002430 <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	2b12      	cmp	r3, #18
 800241e:	d107      	bne.n	8002430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f917 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e041      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002454:	d108      	bne.n	8002468 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	e021      	b.n	80024ac <I2C_MasterRequestWrite+0xd0>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002468:	897b      	ldrh	r3, [r7, #10]
 800246a:	11db      	asrs	r3, r3, #7
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 0306 	and.w	r3, r3, #6
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f063 030f 	orn	r3, r3, #15
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4914      	ldr	r1, [pc, #80]	; (80024d8 <I2C_MasterRequestWrite+0xfc>)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f943 	bl	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d007      	beq.n	80024a2 <I2C_MasterRequestWrite+0xc6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b04      	cmp	r3, #4
 8002498:	d101      	bne.n	800249e <I2C_MasterRequestWrite+0xc2>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e018      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
      }
      else
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e016      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024a2:	897b      	ldrh	r3, [r7, #10]
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	490a      	ldr	r1, [pc, #40]	; (80024dc <I2C_MasterRequestWrite+0x100>)
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f92d 	bl	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <I2C_MasterRequestWrite+0xf2>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d101      	bne.n	80024ca <I2C_MasterRequestWrite+0xee>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e002      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
    }
    else
    {
      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e000      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
    }
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010008 	.word	0x00010008
 80024dc:	00010002 	.word	0x00010002

080024e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	460b      	mov	r3, r1
 80024ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002504:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d006      	beq.n	800251a <I2C_MasterRequestRead+0x3a>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d003      	beq.n	800251a <I2C_MasterRequestRead+0x3a>
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002518:	d108      	bne.n	800252c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e00b      	b.n	8002544 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	2b11      	cmp	r3, #17
 8002532:	d107      	bne.n	8002544 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002542:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f88d 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e07f      	b.n	8002660 <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002568:	d108      	bne.n	800257c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800256a:	897b      	ldrh	r3, [r7, #10]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	e05f      	b.n	800263c <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800257c:	897b      	ldrh	r3, [r7, #10]
 800257e:	11db      	asrs	r3, r3, #7
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f003 0306 	and.w	r3, r3, #6
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f063 030f 	orn	r3, r3, #15
 800258c:	b2da      	uxtb	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	4933      	ldr	r1, [pc, #204]	; (8002668 <I2C_MasterRequestRead+0x188>)
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f8b9 	bl	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d101      	bne.n	80025b2 <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e056      	b.n	8002660 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e054      	b.n	8002660 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80025b6:	897b      	ldrh	r3, [r7, #10]
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4929      	ldr	r1, [pc, #164]	; (800266c <I2C_MasterRequestRead+0x18c>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f8a3 	bl	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d101      	bne.n	80025de <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e040      	b.n	8002660 <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e03e      	b.n	8002660 <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002606:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f82b 	bl	8002670 <I2C_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e01d      	b.n	8002660 <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	11db      	asrs	r3, r3, #7
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0306 	and.w	r3, r3, #6
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f063 030e 	orn	r3, r3, #14
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	490a      	ldr	r1, [pc, #40]	; (800266c <I2C_MasterRequestRead+0x18c>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f865 	bl	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d007      	beq.n	800265e <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b04      	cmp	r3, #4
 8002654:	d101      	bne.n	800265a <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e002      	b.n	8002660 <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e000      	b.n	8002660 <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00010008 	.word	0x00010008
 800266c:	00010002 	.word	0x00010002

08002670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	603b      	str	r3, [r7, #0]
 800267c:	4613      	mov	r3, r2
 800267e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002680:	e01f      	b.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d01b      	beq.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002690:	f7fe fd3e 	bl	8001110 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d210      	bcs.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e023      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0c1b      	lsrs	r3, r3, #16
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d10d      	bne.n	80026e8 <I2C_WaitOnFlagUntilTimeout+0x78>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4013      	ands	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf0c      	ite	eq
 80026de:	2301      	moveq	r3, #1
 80026e0:	2300      	movne	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	e00c      	b.n	8002702 <I2C_WaitOnFlagUntilTimeout+0x92>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	43da      	mvns	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d0bc      	beq.n	8002682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002720:	e040      	b.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002730:	d11c      	bne.n	800276c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800274a:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2204      	movs	r2, #4
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e03c      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d017      	beq.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 800277a:	f7fe fcc9 	bl	8001110 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	429a      	cmp	r2, r3
 8002788:	d20c      	bcs.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e020      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	0c1b      	lsrs	r3, r3, #16
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10c      	bne.n	80027c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf14      	ite	ne
 80027c0:	2301      	movne	r3, #1
 80027c2:	2300      	moveq	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e00b      	b.n	80027e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4013      	ands	r3, r2
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bf14      	ite	ne
 80027da:	2301      	movne	r3, #1
 80027dc:	2300      	moveq	r3, #0
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d19e      	bne.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fa:	e029      	b.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f8ba 	bl	8002976 <I2C_IsAcknowledgeFailed>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e029      	b.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002812:	d01d      	beq.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800281a:	f7fe fc79 	bl	8001110 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	d212      	bcs.n	8002850 <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e007      	b.n	8002860 <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d1ce      	bne.n	80027fc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002874:	e029      	b.n	80028ca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f87d 	bl	8002976 <I2C_IsAcknowledgeFailed>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e029      	b.n	80028da <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d01d      	beq.n	80028ca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d007      	beq.n	80028a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002894:	f7fe fc3c 	bl	8001110 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d212      	bcs.n	80028ca <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e007      	b.n	80028da <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d1ce      	bne.n	8002876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ee:	e036      	b.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	d114      	bne.n	8002928 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f06f 0210 	mvn.w	r2, #16
 8002906:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e022      	b.n	800296e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800292e:	f7fe fbef 	bl	8001110 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d20f      	bcs.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f043 0220 	orr.w	r2, r3, #32
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e007      	b.n	800296e <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d1c1      	bne.n	80028f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298c:	d114      	bne.n	80029b8 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002996:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2204      	movs	r2, #4
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e000      	b.n	80029ba <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8087 	beq.w	8002aec <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029de:	4b92      	ldr	r3, [pc, #584]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ea:	4b8f      	ldr	r3, [pc, #572]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d112      	bne.n	8002a1c <HAL_RCC_OscConfig+0x58>
 80029f6:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a02:	d10b      	bne.n	8002a1c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d06c      	beq.n	8002aea <HAL_RCC_OscConfig+0x126>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d168      	bne.n	8002aea <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e22d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_OscConfig+0x70>
 8002a26:	4b80      	ldr	r3, [pc, #512]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a7f      	ldr	r2, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	e02e      	b.n	8002a92 <HAL_RCC_OscConfig+0xce>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x92>
 8002a3c:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a79      	ldr	r2, [pc, #484]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	4b77      	ldr	r3, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a76      	ldr	r2, [pc, #472]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e01d      	b.n	8002a92 <HAL_RCC_OscConfig+0xce>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5e:	d10c      	bne.n	8002a7a <HAL_RCC_OscConfig+0xb6>
 8002a60:	4b71      	ldr	r3, [pc, #452]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a70      	ldr	r2, [pc, #448]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b6e      	ldr	r3, [pc, #440]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a6d      	ldr	r2, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	e00b      	b.n	8002a92 <HAL_RCC_OscConfig+0xce>
 8002a7a:	4b6b      	ldr	r3, [pc, #428]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a6a      	ldr	r2, [pc, #424]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a67      	ldr	r2, [pc, #412]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a90:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d013      	beq.n	8002ac2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fb39 	bl	8001110 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa2:	f7fe fb35 	bl	8001110 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1e1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab4:	4b5c      	ldr	r3, [pc, #368]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0xde>
 8002ac0:	e014      	b.n	8002aec <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fb25 	bl	8001110 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aca:	f7fe fb21 	bl	8001110 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b64      	cmp	r3, #100	; 0x64
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e1cd      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002adc:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <HAL_RCC_OscConfig+0x106>
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d063      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00b      	beq.n	8002b1c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b08      	cmp	r3, #8
 8002b0e:	d11c      	bne.n	8002b4a <HAL_RCC_OscConfig+0x186>
 8002b10:	4b45      	ldr	r3, [pc, #276]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d116      	bne.n	8002b4a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1c:	4b42      	ldr	r3, [pc, #264]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x170>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e1a1      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4939      	ldr	r1, [pc, #228]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b48:	e03a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d020      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_RCC_OscConfig+0x268>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fada 	bl	8001110 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fad6 	bl	8001110 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e182      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b72:	4b2d      	ldr	r3, [pc, #180]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4926      	ldr	r1, [pc, #152]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
 8002b92:	e015      	b.n	8002bc0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <HAL_RCC_OscConfig+0x268>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fab9 	bl	8001110 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fab5 	bl	8001110 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e161      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f0      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d039      	beq.n	8002c40 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d019      	beq.n	8002c08 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe fa99 	bl	8001110 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002be2:	f7fe fa95 	bl	8001110 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e141      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_OscConfig+0x264>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f000 fae3 	bl	80031cc <RCC_Delay>
 8002c06:	e01b      	b.n	8002c40 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fa7f 	bl	8001110 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	e00e      	b.n	8002c34 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c16:	f7fe fa7b 	bl	8001110 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d907      	bls.n	8002c34 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e127      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	42420000 	.word	0x42420000
 8002c30:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1ea      	bne.n	8002c16 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a6 	beq.w	8002d9a <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c52:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4a87      	ldr	r2, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	61d3      	str	r3, [r2, #28]
 8002c6a:	4b85      	ldr	r3, [pc, #532]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7a:	4b82      	ldr	r3, [pc, #520]	; (8002e84 <HAL_RCC_OscConfig+0x4c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d118      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c86:	4b7f      	ldr	r3, [pc, #508]	; (8002e84 <HAL_RCC_OscConfig+0x4c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	; (8002e84 <HAL_RCC_OscConfig+0x4c0>)
 8002c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c92:	f7fe fa3d 	bl	8001110 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9a:	f7fe fa39 	bl	8001110 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b64      	cmp	r3, #100	; 0x64
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0e5      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cac:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x4c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d106      	bne.n	8002cce <HAL_RCC_OscConfig+0x30a>
 8002cc0:	4b6f      	ldr	r3, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4a6e      	ldr	r2, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	e02d      	b.n	8002d2a <HAL_RCC_OscConfig+0x366>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x32c>
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a69      	ldr	r2, [pc, #420]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6213      	str	r3, [r2, #32]
 8002ce2:	4b67      	ldr	r3, [pc, #412]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a66      	ldr	r2, [pc, #408]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002ce8:	f023 0304 	bic.w	r3, r3, #4
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	e01c      	b.n	8002d2a <HAL_RCC_OscConfig+0x366>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	2b05      	cmp	r3, #5
 8002cf6:	d10c      	bne.n	8002d12 <HAL_RCC_OscConfig+0x34e>
 8002cf8:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4a60      	ldr	r2, [pc, #384]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002cfe:	f043 0304 	orr.w	r3, r3, #4
 8002d02:	6213      	str	r3, [r2, #32]
 8002d04:	4b5e      	ldr	r3, [pc, #376]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	4a5d      	ldr	r2, [pc, #372]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6213      	str	r3, [r2, #32]
 8002d10:	e00b      	b.n	8002d2a <HAL_RCC_OscConfig+0x366>
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a5a      	ldr	r2, [pc, #360]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4b58      	ldr	r3, [pc, #352]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a57      	ldr	r2, [pc, #348]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d015      	beq.n	8002d5e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe f9ed 	bl	8001110 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe f9e9 	bl	8001110 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e093      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	4b4b      	ldr	r3, [pc, #300]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ee      	beq.n	8002d3a <HAL_RCC_OscConfig+0x376>
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d5e:	f7fe f9d7 	bl	8001110 <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d64:	e00a      	b.n	8002d7c <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d66:	f7fe f9d3 	bl	8001110 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e07d      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ee      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d88:	7dfb      	ldrb	r3, [r7, #23]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d105      	bne.n	8002d9a <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b3c      	ldr	r3, [pc, #240]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	4a3b      	ldr	r2, [pc, #236]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d069      	beq.n	8002e76 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d061      	beq.n	8002e72 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d146      	bne.n	8002e44 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f9a8 	bl	8001110 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7fe f9a4 	bl	8001110 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e050      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d108      	bne.n	8002dfe <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dec:	4b24      	ldr	r3, [pc, #144]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4921      	ldr	r1, [pc, #132]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a19      	ldr	r1, [r3, #32]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	491b      	ldr	r1, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e16:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f978 	bl	8001110 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe f974 	bl	8001110 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e020      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x460>
 8002e42:	e018      	b.n	8002e76 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe f961 	bl	8001110 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e52:	f7fe f95d 	bl	8001110 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e009      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <HAL_RCC_OscConfig+0x4bc>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1f0      	bne.n	8002e52 <HAL_RCC_OscConfig+0x48e>
 8002e70:	e001      	b.n	8002e76 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40007000 	.word	0x40007000
 8002e88:	42420060 	.word	0x42420060

08002e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e9a:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	683a      	ldr	r2, [r7, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d910      	bls.n	8002eca <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea8:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f023 0207 	bic.w	r2, r3, #7
 8002eb0:	4978      	ldr	r1, [pc, #480]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002eb8:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d001      	beq.n	8002eca <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e0e0      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d020      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002ee8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eec:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002efa:	4b67      	ldr	r3, [pc, #412]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a66      	ldr	r2, [pc, #408]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f00:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f04:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	4b64      	ldr	r3, [pc, #400]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4961      	ldr	r1, [pc, #388]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d06a      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0a7      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	4b54      	ldr	r3, [pc, #336]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e09b      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e093      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4949      	ldr	r1, [pc, #292]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f76:	f7fe f8cb 	bl	8001110 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fe f8c3 	bl	8001110 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e077      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xfa>
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11d      	bne.n	8002fee <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe f8ac 	bl	8001110 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e060      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x128>
 8002fd6:	e010      	b.n	8002ffa <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe f89a 	bl	8001110 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04e      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d210      	bcs.n	800302a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f023 0207 	bic.w	r2, r3, #7
 8003010:	4920      	ldr	r1, [pc, #128]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_ClockConfig+0x208>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e030      	b.n	800308c <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	4915      	ldr	r1, [pc, #84]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003054:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003068:	f000 f81c 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x20c>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_RCC_ClockConfig+0x210>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_ClockConfig+0x214>)
 8003082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe f801 	bl	800108c <HAL_InitTick>
  
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	08006d68 	.word	0x08006d68
 80030a0:	20000008 	.word	0x20000008

080030a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030ac:	1d3c      	adds	r4, r7, #4
 80030ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x46>
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f6:	4413      	add	r3, r2
 80030f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c5b      	lsrs	r3, r3, #17
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003116:	4413      	add	r3, r2
 8003118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800311c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003122:	fb02 f203 	mul.w	r2, r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e004      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	623b      	str	r3, [r7, #32]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6a3b      	ldr	r3, [r7, #32]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc90      	pop	{r4, r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	08006cd8 	.word	0x08006cd8
 8003158:	08006ce8 	.word	0x08006ce8
 800315c:	40021000 	.word	0x40021000
 8003160:	007a1200 	.word	0x007a1200
 8003164:	003d0900 	.word	0x003d0900

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_RCC_GetHCLKFreq+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000008 	.word	0x20000008

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff2 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003184:	4601      	mov	r1, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	08006d78 	.word	0x08006d78

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffde 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0adb      	lsrs	r3, r3, #11
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08006d78 	.word	0x08006d78

080031cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <RCC_Delay+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <RCC_Delay+0x38>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80031e8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <RCC_Delay+0x1c>
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000008 	.word	0x20000008
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01d      	b.n	8003256 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f002 ff2c 	bl	800608c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 fbda 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_Init>:
  *       Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e01d      	b.n	80032e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f002 ff0d 	bl	80060d8 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f000 fb95 	bl	8003a00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	6839      	ldr	r1, [r7, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fe2b 	bl	8003f56 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <HAL_TIM_PWM_Start+0x4c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d107      	bne.n	800331a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0201 	orr.w	r2, r2, #1
 8003328:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40012c00 	.word	0x40012c00

08003338 <HAL_TIM_Encoder_Init>:
  * @param  htim : TIM Encoder Interface handle
  * @param  sConfig : TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Check the TIM handle allocation */
  if(htim == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e081      	b.n	800345c <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_TIM_Encoder_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f002 fecf 	bl	8006110 <HAL_TIM_Encoder_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0207 	bic.w	r2, r2, #7
 8003388:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 fb33 	bl	8003a00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c2:	f023 0303 	bic.w	r3, r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	021b      	lsls	r3, r3, #8
 80033d2:	4313      	orrs	r3, r2
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]

  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033e0:	f023 030c 	bic.w	r3, r3, #12
 80033e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	4313      	orrs	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	011a      	lsls	r2, r3, #4
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	031b      	lsls	r3, r3, #12
 8003410:	4313      	orrs	r3, r2
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	4313      	orrs	r3, r2
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b02      	cmp	r3, #2
 8003478:	d122      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b02      	cmp	r3, #2
 8003486:	d11b      	bne.n	80034c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0202 	mvn.w	r2, #2
 8003490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa8e 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa81 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa90 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d122      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d11b      	bne.n	8003514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f06f 0204 	mvn.w	r2, #4
 80034e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa64 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003500:	e005      	b.n	800350e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fa57 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 fa66 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d122      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b08      	cmp	r3, #8
 800352e:	d11b      	bne.n	8003568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0208 	mvn.w	r2, #8
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2204      	movs	r2, #4
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fa3a 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa2d 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fa3c 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b10      	cmp	r3, #16
 8003574:	d122      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b10      	cmp	r3, #16
 8003582:	d11b      	bne.n	80035bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0210 	mvn.w	r2, #16
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2208      	movs	r2, #8
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69db      	ldr	r3, [r3, #28]
 800359a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa10 	bl	80039c8 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa03 	bl	80039b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa12 	bl	80039da <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d10e      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d107      	bne.n	80035e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0201 	mvn.w	r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f001 fcfc 	bl	8004fe0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d107      	bne.n	8003614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800360c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fd10 	bl	8004034 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d10e      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d107      	bne.n	8003640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003638:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9d6 	bl	80039ec <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b20      	cmp	r3, #32
 800364c:	d10e      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b20      	cmp	r3, #32
 800365a:	d107      	bne.n	800366c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0220 	mvn.w	r2, #32
 8003664:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 fcdb 	bl	8004022 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800368a:	2302      	movs	r3, #2
 800368c:	e0b4      	b.n	80037f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2202      	movs	r2, #2
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	f200 809f 	bhi.w	80037e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80036a6:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80036a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	080037e5 	.word	0x080037e5
 80036b4:	080037e5 	.word	0x080037e5
 80036b8:	080037e5 	.word	0x080037e5
 80036bc:	08003721 	.word	0x08003721
 80036c0:	080037e5 	.word	0x080037e5
 80036c4:	080037e5 	.word	0x080037e5
 80036c8:	080037e5 	.word	0x080037e5
 80036cc:	08003763 	.word	0x08003763
 80036d0:	080037e5 	.word	0x080037e5
 80036d4:	080037e5 	.word	0x080037e5
 80036d8:	080037e5 	.word	0x080037e5
 80036dc:	080037a3 	.word	0x080037a3
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68b9      	ldr	r1, [r7, #8]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f9f0 	bl	8003acc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0208 	orr.w	r2, r2, #8
 80036fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0204 	bic.w	r2, r2, #4
 800370a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6999      	ldr	r1, [r3, #24]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	619a      	str	r2, [r3, #24]
    }
    break;
 800371e:	e062      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fa3c 	bl	8003ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699a      	ldr	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800374a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6999      	ldr	r1, [r3, #24]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	619a      	str	r2, [r3, #24]
    }
    break;
 8003760:	e041      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	4618      	mov	r0, r3
 800376a:	f000 fa8b 	bl	8003c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0208 	orr.w	r2, r2, #8
 800377c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0204 	bic.w	r2, r2, #4
 800378c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69d9      	ldr	r1, [r3, #28]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	61da      	str	r2, [r3, #28]
    }
    break;
 80037a0:	e021      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fadb 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037bc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69d9      	ldr	r1, [r3, #28]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	61da      	str	r2, [r3, #28]
    }
    break;
 80037e2:	e000      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 80037e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_TIM_ConfigClockSource+0x1c>
 8003818:	2302      	movs	r3, #2
 800381a:	e0c8      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x1ae>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800383a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003842:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	d077      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0x144>
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d80e      	bhi.n	8003876 <HAL_TIM_ConfigClockSource+0x76>
 8003858:	2b10      	cmp	r3, #16
 800385a:	f000 808a 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x172>
 800385e:	2b10      	cmp	r3, #16
 8003860:	d802      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x68>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d07e      	beq.n	8003964 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8003866:	e099      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003868:	2b20      	cmp	r3, #32
 800386a:	f000 8089 	beq.w	8003980 <HAL_TIM_ConfigClockSource+0x180>
 800386e:	2b30      	cmp	r3, #48	; 0x30
 8003870:	f000 808d 	beq.w	800398e <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8003874:	e092      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003876:	2b70      	cmp	r3, #112	; 0x70
 8003878:	d016      	beq.n	80038a8 <HAL_TIM_ConfigClockSource+0xa8>
 800387a:	2b70      	cmp	r3, #112	; 0x70
 800387c:	d804      	bhi.n	8003888 <HAL_TIM_ConfigClockSource+0x88>
 800387e:	2b50      	cmp	r3, #80	; 0x50
 8003880:	d040      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x104>
 8003882:	2b60      	cmp	r3, #96	; 0x60
 8003884:	d04e      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8003886:	e089      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388c:	d003      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0x96>
 800388e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003892:	d024      	beq.n	80038de <HAL_TIM_ConfigClockSource+0xde>
    break;
 8003894:	e082      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0207 	bic.w	r2, r2, #7
 80038a4:	609a      	str	r2, [r3, #8]
    break;
 80038a6:	e079      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6818      	ldr	r0, [r3, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	6899      	ldr	r1, [r3, #8]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f000 fb2c 	bl	8003f14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	609a      	str	r2, [r3, #8]
    break;
 80038dc:	e05e      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f000 fb11 	bl	8003f14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003900:	609a      	str	r2, [r3, #8]
    break;
 8003902:	e04b      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	461a      	mov	r2, r3
 8003912:	f000 fa7b 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2150      	movs	r1, #80	; 0x50
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fada 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 8003922:	e03b      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	461a      	mov	r2, r3
 8003932:	f000 fa9d 	bl	8003e70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2160      	movs	r1, #96	; 0x60
 800393c:	4618      	mov	r0, r3
 800393e:	f000 faca 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 8003942:	e02b      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	461a      	mov	r2, r3
 8003952:	f000 fa5b 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2140      	movs	r1, #64	; 0x40
 800395c:	4618      	mov	r0, r3
 800395e:	f000 faba 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 8003962:	e01b      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fab3 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 8003970:	e014      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2110      	movs	r1, #16
 8003978:	4618      	mov	r0, r3
 800397a:	f000 faac 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 800397e:	e00d      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2120      	movs	r1, #32
 8003986:	4618      	mov	r0, r3
 8003988:	f000 faa5 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 800398c:	e006      	b.n	800399c <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2130      	movs	r1, #48	; 0x30
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fa9e 	bl	8003ed6 <TIM_ITRx_SetConfig>
    break;
 800399a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr

080039da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bc80      	pop	{r7}
 80039ea:	4770      	bx	lr

080039ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr
	...

08003a00 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <TIM_Base_SetConfig+0xc0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_Base_SetConfig+0x34>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d007      	beq.n	8003a34 <TIM_Base_SetConfig+0x34>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <TIM_Base_SetConfig+0xc4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_Base_SetConfig+0x34>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <TIM_Base_SetConfig+0xc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d108      	bne.n	8003a46 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	; (8003ac0 <TIM_Base_SetConfig+0xc0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_Base_SetConfig+0x66>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a54:	d007      	beq.n	8003a66 <TIM_Base_SetConfig+0x66>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <TIM_Base_SetConfig+0xc4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_Base_SetConfig+0x66>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <TIM_Base_SetConfig+0xc8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d108      	bne.n	8003a78 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <TIM_Base_SetConfig+0xc0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	691a      	ldr	r2, [r3, #16]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40000400 	.word	0x40000400
 8003ac8:	40000800 	.word	0x40000800

08003acc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0303 	bic.w	r3, r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f023 0302 	bic.w	r3, r3, #2
 8003b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <TIM_OC1_SetConfig+0xd4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10c      	bne.n	8003b4e <TIM_OC1_SetConfig+0x82>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f023 0308 	bic.w	r3, r3, #8
 8003b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <TIM_OC1_SetConfig+0xd4>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d111      	bne.n	8003b7a <TIM_OC1_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	621a      	str	r2, [r3, #32]
}
 8003b94:	bf00      	nop
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00

08003ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0210 	bic.w	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	021b      	lsls	r3, r3, #8
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0320 	bic.w	r3, r3, #32
 8003bfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <TIM_OC2_SetConfig+0xdc>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c2a:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a14      	ldr	r2, [pc, #80]	; (8003c80 <TIM_OC2_SetConfig+0xdc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d113      	bne.n	8003c5c <TIM_OC2_SetConfig+0xb8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	621a      	str	r2, [r3, #32]
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40012c00 	.word	0x40012c00

08003c84 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0303 	bic.w	r3, r3, #3
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	; (8003d60 <TIM_OC3_SetConfig+0xdc>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10d      	bne.n	8003d0a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d08:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <TIM_OC3_SetConfig+0xdc>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d113      	bne.n	8003d3a <TIM_OC3_SetConfig+0xb6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40012c00 	.word	0x40012c00

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da6:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	031b      	lsls	r3, r3, #12
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a0f      	ldr	r2, [pc, #60]	; (8003e08 <TIM_OC4_SetConfig+0xa4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d109      	bne.n	8003de4 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr
 8003e08:	40012c00 	.word	0x40012c00

08003e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f023 0210 	bic.w	r2, r3, #16
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	621a      	str	r2, [r3, #32]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr

08003ed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	f043 0307 	orr.w	r3, r3, #7
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	609a      	str	r2, [r3, #8]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr

08003f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	021a      	lsls	r2, r3, #8
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bc80      	pop	{r7}
 8003f54:	4770      	bx	lr

08003f56 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b087      	sub	sp, #28
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003f66:	2201      	movs	r2, #1
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a1a      	ldr	r2, [r3, #32]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	401a      	ands	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a1a      	ldr	r2, [r3, #32]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e032      	b.n	8004018 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003fd0:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e03f      	b.n	80040d8 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f002 f8bd 	bl	80061ec <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2224      	movs	r2, #36	; 0x24
 8004076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004088:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fc58 	bl	8004940 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800409e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ae:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040be:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_UART_DeInit>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e016      	b.n	8004120 <HAL_UART_DeInit+0x40>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2224      	movs	r2, #36	; 0x24
 80040f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f002 f8ca 	bl	8006294 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_RESET;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_RESET;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	f040 8083 	bne.w	8004250 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_UART_Transmit+0x2e>
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e07b      	b.n	8004252 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit+0x40>
 8004164:	2302      	movs	r3, #2
 8004166:	e074      	b.n	8004252 <HAL_UART_Transmit+0x12a>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2221      	movs	r2, #33	; 0x21
 800417a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800417e:	f7fc ffc7 	bl	8001110 <HAL_GetTick>
 8004182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	88fa      	ldrh	r2, [r7, #6]
 800418e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8004190:	e042      	b.n	8004218 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a8:	d122      	bne.n	80041f0 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	; 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fa59 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e046      	b.n	8004252 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d103      	bne.n	80041e8 <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3302      	adds	r3, #2
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	e017      	b.n	8004218 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	e013      	b.n	8004218 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2200      	movs	r2, #0
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 fa36 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e023      	b.n	8004252 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	60ba      	str	r2, [r7, #8]
 8004210:	781a      	ldrb	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800421c:	b29b      	uxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1b7      	bne.n	8004192 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	2200      	movs	r2, #0
 800422a:	2140      	movs	r1, #64	; 0x40
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 fa1d 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e00a      	b.n	8004252 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	e000      	b.n	8004252 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004250:	2302      	movs	r3, #2
  }
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b088      	sub	sp, #32
 800425e:	af02      	add	r7, sp, #8
 8004260:	60f8      	str	r0, [r7, #12]
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	4613      	mov	r3, r2
 8004268:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b20      	cmp	r3, #32
 8004278:	f040 8090 	bne.w	800439c <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Receive+0x2e>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e088      	b.n	800439e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <HAL_UART_Receive+0x40>
 8004296:	2302      	movs	r3, #2
 8004298:	e081      	b.n	800439e <HAL_UART_Receive+0x144>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2222      	movs	r2, #34	; 0x22
 80042ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042b0:	f7fc ff2e 	bl	8001110 <HAL_GetTick>
 80042b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	88fa      	ldrh	r2, [r7, #6]
 80042ba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	88fa      	ldrh	r2, [r7, #6]
 80042c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80042c2:	e05c      	b.n	800437e <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042da:	d12b      	bne.n	8004334 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2120      	movs	r1, #32
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f9c0 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e053      	b.n	800439e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800430e:	b29a      	uxth	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	3302      	adds	r3, #2
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	e030      	b.n	800437e <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	b29b      	uxth	r3, r3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	b29a      	uxth	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	3301      	adds	r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	e024      	b.n	800437e <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2200      	movs	r2, #0
 800433c:	2120      	movs	r1, #32
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f994 	bl	800466c <UART_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e027      	b.n	800439e <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	b2ca      	uxtb	r2, r1
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	e00a      	b.n	800437e <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	b2da      	uxtb	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004382:	b29b      	uxth	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d19d      	bne.n	80042c4 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	e000      	b.n	800439e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800439c:	2302      	movs	r3, #2
  }
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_UART_Receive_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	4613      	mov	r3, r2
 80043b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d140      	bne.n	8004442 <HAL_UART_Receive_IT+0x9c>
  {
    if((pData == NULL) || (Size == 0U))
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Receive_IT+0x26>
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e039      	b.n	8004444 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_UART_Receive_IT+0x38>
 80043da:	2302      	movs	r3, #2
 80043dc:	e032      	b.n	8004444 <HAL_UART_Receive_IT+0x9e>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2222      	movs	r2, #34	; 0x22
 8004402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695a      	ldr	r2, [r3, #20]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 0201 	orr.w	r2, r2, #1
 800442c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0220 	orr.w	r2, r2, #32
 800443c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
	...

08004450 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b088      	sub	sp, #32
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10d      	bne.n	80044a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_UART_IRQHandler+0x52>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9ce 	bl	800483c <UART_Receive_IT>
      return;
 80044a0:	e0cc      	b.n	800463c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 80ab 	beq.w	8004600 <HAL_UART_IRQHandler+0x1b0>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <HAL_UART_IRQHandler+0x70>
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a0 	beq.w	8004600 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <HAL_UART_IRQHandler+0x90>
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <HAL_UART_IRQHandler+0xb0>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f043 0202 	orr.w	r2, r3, #2
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00a      	beq.n	8004520 <HAL_UART_IRQHandler+0xd0>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_UART_IRQHandler+0xf0>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	f043 0208 	orr.w	r2, r3, #8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	2b00      	cmp	r3, #0
 8004546:	d078      	beq.n	800463a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_UART_IRQHandler+0x112>
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f96d 	bl	800483c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	f003 0308 	and.w	r3, r3, #8
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <HAL_UART_IRQHandler+0x13a>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d031      	beq.n	80045ee <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8b8 	bl	8004700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d023      	beq.n	80045e6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695a      	ldr	r2, [r3, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d013      	beq.n	80045de <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ba:	4a22      	ldr	r2, [pc, #136]	; (8004644 <HAL_UART_IRQHandler+0x1f4>)
 80045bc:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fc fee0 	bl	8001388 <HAL_DMA_Abort_IT>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045d8:	4610      	mov	r0, r2
 80045da:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00e      	b.n	80045fc <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f83b 	bl	800465a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e00a      	b.n	80045fc <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f837 	bl	800465a <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e006      	b.n	80045fc <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f833 	bl	800465a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80045fa:	e01e      	b.n	800463a <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	bf00      	nop
    return;
 80045fe:	e01c      	b.n	800463a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <HAL_UART_IRQHandler+0x1cc>
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8a4 	bl	8004762 <UART_Transmit_IT>
    return;
 800461a:	e00f      	b.n	800463c <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_UART_IRQHandler+0x1ec>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f8eb 	bl	800480c <UART_EndTransmit_IT>
    return;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <HAL_UART_IRQHandler+0x1ec>
    return;
 800463a:	bf00      	nop
  }
}
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	0800473b 	.word	0x0800473b

08004648 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	603b      	str	r3, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800467c:	e02c      	b.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004684:	d028      	beq.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <UART_WaitOnFlagUntilTimeout+0x30>
 800468c:	f7fc fd40 	bl	8001110 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	429a      	cmp	r2, r3
 800469a:	d21d      	bcs.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80046aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e00f      	b.n	80046f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	4013      	ands	r3, r2
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	bf0c      	ite	eq
 80046e8:	2301      	moveq	r3, #1
 80046ea:	2300      	movne	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d0c3      	beq.n	800467e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004716:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr

0800473a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff ff80 	bl	800465a <HAL_UART_ErrorCallback>
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b21      	cmp	r3, #33	; 0x21
 8004774:	d144      	bne.n	8004800 <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477e:	d11a      	bne.n	80047b6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	461a      	mov	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004794:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d105      	bne.n	80047aa <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]
 80047a8:	e00e      	b.n	80047c8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	621a      	str	r2, [r3, #32]
 80047b4:	e008      	b.n	80047c8 <UART_Transmit_IT+0x66>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6211      	str	r1, [r2, #32]
 80047c0:	781a      	ldrb	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4619      	mov	r1, r3
 80047d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10f      	bne.n	80047fc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e000      	b.n	8004802 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004800:	2302      	movs	r3, #2
  }
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004822:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f7ff ff0b 	bl	8004648 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b22      	cmp	r3, #34	; 0x22
 800484e:	d171      	bne.n	8004934 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004858:	d123      	bne.n	80048a2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10e      	bne.n	8004886 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	b29a      	uxth	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28
 8004884:	e029      	b.n	80048da <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	b29b      	uxth	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
 80048a0:	e01b      	b.n	80048da <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6858      	ldr	r0, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	1c59      	adds	r1, r3, #1
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6291      	str	r1, [r2, #40]	; 0x28
 80048ba:	b2c2      	uxtb	r2, r0
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	e00c      	b.n	80048da <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	1c58      	adds	r0, r3, #1
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6288      	str	r0, [r1, #40]	; 0x28
 80048d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4619      	mov	r1, r3
 80048e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d120      	bne.n	8004930 <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0220 	bic.w	r2, r2, #32
 80048fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800490c:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fae2 	bl	8004ef0 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e002      	b.n	8004936 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	e000      	b.n	8004936 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004934:	2302      	movs	r3, #2
  }
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004940:	b5b0      	push	{r4, r5, r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004982:	f023 030c 	bic.w	r3, r3, #12
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	68f9      	ldr	r1, [r7, #12]
 800498c:	430b      	orrs	r3, r1
 800498e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a6f      	ldr	r2, [pc, #444]	; (8004b68 <UART_SetConfig+0x228>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d16b      	bne.n	8004a88 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80049b0:	f7fe fbf8 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009a      	lsls	r2, r3, #2
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ca:	4a68      	ldr	r2, [pc, #416]	; (8004b6c <UART_SetConfig+0x22c>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	011c      	lsls	r4, r3, #4
 80049d4:	f7fe fbe6 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009a      	lsls	r2, r3, #2
 80049e2:	441a      	add	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	fbb2 f5f3 	udiv	r5, r2, r3
 80049ee:	f7fe fbd9 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80049f2:	4602      	mov	r2, r0
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009a      	lsls	r2, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a58      	ldr	r2, [pc, #352]	; (8004b6c <UART_SetConfig+0x22c>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	095b      	lsrs	r3, r3, #5
 8004a10:	2264      	movs	r2, #100	; 0x64
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	1aeb      	subs	r3, r5, r3
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	3332      	adds	r3, #50	; 0x32
 8004a1c:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <UART_SetConfig+0x22c>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a28:	441c      	add	r4, r3
 8004a2a:	f7fe fbbb 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009a      	lsls	r2, r3, #2
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	fbb2 f5f3 	udiv	r5, r2, r3
 8004a44:	f7fe fbae 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	441a      	add	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4a43      	ldr	r2, [pc, #268]	; (8004b6c <UART_SetConfig+0x22c>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	2264      	movs	r2, #100	; 0x64
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	1aeb      	subs	r3, r5, r3
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	3332      	adds	r3, #50	; 0x32
 8004a72:	4a3e      	ldr	r2, [pc, #248]	; (8004b6c <UART_SetConfig+0x22c>)
 8004a74:	fba2 2303 	umull	r2, r3, r2, r3
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4422      	add	r2, r4
 8004a84:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004a86:	e06a      	b.n	8004b5e <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004a88:	f7fe fb78 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009a      	lsls	r2, r3, #2
 8004a96:	441a      	add	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa2:	4a32      	ldr	r2, [pc, #200]	; (8004b6c <UART_SetConfig+0x22c>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	011c      	lsls	r4, r3, #4
 8004aac:	f7fe fb66 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009a      	lsls	r2, r3, #2
 8004aba:	441a      	add	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004ac6:	f7fe fb59 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004aca:	4602      	mov	r2, r0
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009a      	lsls	r2, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	4a22      	ldr	r2, [pc, #136]	; (8004b6c <UART_SetConfig+0x22c>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2264      	movs	r2, #100	; 0x64
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	1aeb      	subs	r3, r5, r3
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	3332      	adds	r3, #50	; 0x32
 8004af4:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <UART_SetConfig+0x22c>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b00:	441c      	add	r4, r3
 8004b02:	f7fe fb3b 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004b06:	4602      	mov	r2, r0
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009a      	lsls	r2, r3, #2
 8004b10:	441a      	add	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	fbb2 f5f3 	udiv	r5, r2, r3
 8004b1c:	f7fe fb2e 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004b20:	4602      	mov	r2, r0
 8004b22:	4613      	mov	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	009a      	lsls	r2, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b36:	4a0d      	ldr	r2, [pc, #52]	; (8004b6c <UART_SetConfig+0x22c>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	095b      	lsrs	r3, r3, #5
 8004b3e:	2264      	movs	r2, #100	; 0x64
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	1aeb      	subs	r3, r5, r3
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	3332      	adds	r3, #50	; 0x32
 8004b4a:	4a08      	ldr	r2, [pc, #32]	; (8004b6c <UART_SetConfig+0x22c>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	f003 020f 	and.w	r2, r3, #15
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4422      	add	r2, r4
 8004b5c:	609a      	str	r2, [r3, #8]
}
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bdb0      	pop	{r4, r5, r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40013800 	.word	0x40013800
 8004b6c:	51eb851f 	.word	0x51eb851f

08004b70 <PID>:
#include "PID.h"

int PID(float setpoint, float input){
 8004b70:	b5b0      	push	{r4, r5, r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
	Kp = 10;
 8004b7a:	4b5d      	ldr	r3, [pc, #372]	; (8004cf0 <PID+0x180>)
 8004b7c:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <PID+0x184>)
 8004b7e:	601a      	str	r2, [r3, #0]
	Kd = 0.35;
 8004b80:	4b5d      	ldr	r3, [pc, #372]	; (8004cf8 <PID+0x188>)
 8004b82:	4a5e      	ldr	r2, [pc, #376]	; (8004cfc <PID+0x18c>)
 8004b84:	601a      	str	r2, [r3, #0]
	Ki = 0;
 8004b86:	4b5e      	ldr	r3, [pc, #376]	; (8004d00 <PID+0x190>)
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
	dt = 0.0116;
 8004b8e:	4b5d      	ldr	r3, [pc, #372]	; (8004d04 <PID+0x194>)
 8004b90:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <PID+0x198>)
 8004b92:	601a      	str	r2, [r3, #0]
    int out;

	err = input - setpoint;
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	6838      	ldr	r0, [r7, #0]
 8004b98:	f7fb ffe2 	bl	8000b60 <__aeabi_fsub>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	4b5a      	ldr	r3, [pc, #360]	; (8004d0c <PID+0x19c>)
 8004ba2:	601a      	str	r2, [r3, #0]

	P = Kp*(err );
 8004ba4:	4b52      	ldr	r3, [pc, #328]	; (8004cf0 <PID+0x180>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <PID+0x19c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f7fc f8e0 	bl	8000d74 <__aeabi_fmul>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <PID+0x1a0>)
 8004bba:	601a      	str	r2, [r3, #0]
	I = 0.5*Ki*dt*(err + err_1);
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <PID+0x190>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fb fc29 	bl	8000418 <__aeabi_f2d>
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	4b52      	ldr	r3, [pc, #328]	; (8004d14 <PID+0x1a4>)
 8004bcc:	f7fb fc7c 	bl	80004c8 <__aeabi_dmul>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4625      	mov	r5, r4
 8004bd6:	461c      	mov	r4, r3
 8004bd8:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <PID+0x194>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7fb fc1b 	bl	8000418 <__aeabi_f2d>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4620      	mov	r0, r4
 8004be8:	4629      	mov	r1, r5
 8004bea:	f7fb fc6d 	bl	80004c8 <__aeabi_dmul>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4625      	mov	r5, r4
 8004bf4:	461c      	mov	r4, r3
 8004bf6:	4b45      	ldr	r3, [pc, #276]	; (8004d0c <PID+0x19c>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <PID+0x1a8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fb ffaf 	bl	8000b64 <__addsf3>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fc05 	bl	8000418 <__aeabi_f2d>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4620      	mov	r0, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb fc57 	bl	80004c8 <__aeabi_dmul>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	4621      	mov	r1, r4
 8004c22:	f7fb ff49 	bl	8000ab8 <__aeabi_d2f>
 8004c26:	4602      	mov	r2, r0
 8004c28:	4b3c      	ldr	r3, [pc, #240]	; (8004d1c <PID+0x1ac>)
 8004c2a:	601a      	str	r2, [r3, #0]
	D = Kd/dt*(err - 2*err_1 + err_2);
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <PID+0x188>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	4b34      	ldr	r3, [pc, #208]	; (8004d04 <PID+0x194>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fc f950 	bl	8000edc <__aeabi_fdiv>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461d      	mov	r5, r3
 8004c40:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <PID+0x19c>)
 8004c42:	681c      	ldr	r4, [r3, #0]
 8004c44:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <PID+0x1a8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb ff8a 	bl	8000b64 <__addsf3>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4619      	mov	r1, r3
 8004c54:	4620      	mov	r0, r4
 8004c56:	f7fb ff83 	bl	8000b60 <__aeabi_fsub>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <PID+0x1b0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fb ff7d 	bl	8000b64 <__addsf3>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f7fc f880 	bl	8000d74 <__aeabi_fmul>
 8004c74:	4603      	mov	r3, r0
 8004c76:	461a      	mov	r2, r3
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <PID+0x1b4>)
 8004c7a:	601a      	str	r2, [r3, #0]
	PID_value =  ( (int) P +(int)D +(int)I);
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <PID+0x1a0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc f9c7 	bl	8001014 <__aeabi_f2iz>
 8004c86:	4604      	mov	r4, r0
 8004c88:	4b26      	ldr	r3, [pc, #152]	; (8004d24 <PID+0x1b4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fc f9c1 	bl	8001014 <__aeabi_f2iz>
 8004c92:	4603      	mov	r3, r0
 8004c94:	441c      	add	r4, r3
 8004c96:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <PID+0x1ac>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fc f9ba 	bl	8001014 <__aeabi_f2iz>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4423      	add	r3, r4
 8004ca4:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <PID+0x1b8>)
 8004ca6:	6013      	str	r3, [r2, #0]
    err_1 = err;
 8004ca8:	4b18      	ldr	r3, [pc, #96]	; (8004d0c <PID+0x19c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <PID+0x1a8>)
 8004cae:	6013      	str	r3, [r2, #0]
    err_2 = err_1;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <PID+0x1a8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1a      	ldr	r2, [pc, #104]	; (8004d20 <PID+0x1b0>)
 8004cb6:	6013      	str	r3, [r2, #0]
    PID_value_pre = PID_value;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <PID+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <PID+0x1bc>)
 8004cbe:	6013      	str	r3, [r2, #0]


    if(PID_value > 0){
 8004cc0:	4b19      	ldr	r3, [pc, #100]	; (8004d28 <PID+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dd04      	ble.n	8004cd2 <PID+0x162>
       out = PID_value + 570;
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <PID+0x1b8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f203 233a 	addw	r3, r3, #570	; 0x23a
 8004cd0:	60fb      	str	r3, [r7, #12]
    }
    if(PID_value < 0){
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <PID+0x1b8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da04      	bge.n	8004ce4 <PID+0x174>
       out = PID_value - 570;
 8004cda:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <PID+0x1b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f2a3 233a 	subw	r3, r3, #570	; 0x23a
 8004ce2:	60fb      	str	r3, [r7, #12]
    }
    return out;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bdb0      	pop	{r4, r5, r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000250 	.word	0x20000250
 8004cf4:	41200000 	.word	0x41200000
 8004cf8:	20000234 	.word	0x20000234
 8004cfc:	3eb33333 	.word	0x3eb33333
 8004d00:	20000214 	.word	0x20000214
 8004d04:	20000254 	.word	0x20000254
 8004d08:	3c3e0ded 	.word	0x3c3e0ded
 8004d0c:	20000230 	.word	0x20000230
 8004d10:	20000268 	.word	0x20000268
 8004d14:	3fe00000 	.word	0x3fe00000
 8004d18:	2000021c 	.word	0x2000021c
 8004d1c:	20000248 	.word	0x20000248
 8004d20:	20000258 	.word	0x20000258
 8004d24:	2000020c 	.word	0x2000020c
 8004d28:	20000228 	.word	0x20000228
 8004d2c:	20000244 	.word	0x20000244

08004d30 <PID_1>:

int PID_1(float setpoint, float input){
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
	Kp1 = 40;
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	; (8004eb0 <PID_1+0x180>)
 8004d3c:	4a5d      	ldr	r2, [pc, #372]	; (8004eb4 <PID_1+0x184>)
 8004d3e:	601a      	str	r2, [r3, #0]
	Kd1 = 0.45;
 8004d40:	4b5d      	ldr	r3, [pc, #372]	; (8004eb8 <PID_1+0x188>)
 8004d42:	4a5e      	ldr	r2, [pc, #376]	; (8004ebc <PID_1+0x18c>)
 8004d44:	601a      	str	r2, [r3, #0]
	Ki1 = 0;
 8004d46:	4b5e      	ldr	r3, [pc, #376]	; (8004ec0 <PID_1+0x190>)
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
    dt = 0.0116;
 8004d4e:	4b5d      	ldr	r3, [pc, #372]	; (8004ec4 <PID_1+0x194>)
 8004d50:	4a5d      	ldr	r2, [pc, #372]	; (8004ec8 <PID_1+0x198>)
 8004d52:	601a      	str	r2, [r3, #0]
    int out;

	err1 = input - setpoint;
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	6838      	ldr	r0, [r7, #0]
 8004d58:	f7fb ff02 	bl	8000b60 <__aeabi_fsub>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4b5a      	ldr	r3, [pc, #360]	; (8004ecc <PID_1+0x19c>)
 8004d62:	601a      	str	r2, [r3, #0]

	P = Kp1*(err1);
 8004d64:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <PID_1+0x180>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b58      	ldr	r3, [pc, #352]	; (8004ecc <PID_1+0x19c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	f7fc f800 	bl	8000d74 <__aeabi_fmul>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <PID_1+0x1a0>)
 8004d7a:	601a      	str	r2, [r3, #0]
	I = 0.5*Ki1*dt*(err1 + err_1_1);
 8004d7c:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <PID_1+0x190>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fb fb49 	bl	8000418 <__aeabi_f2d>
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	4b52      	ldr	r3, [pc, #328]	; (8004ed4 <PID_1+0x1a4>)
 8004d8c:	f7fb fb9c 	bl	80004c8 <__aeabi_dmul>
 8004d90:	4603      	mov	r3, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	4625      	mov	r5, r4
 8004d96:	461c      	mov	r4, r3
 8004d98:	4b4a      	ldr	r3, [pc, #296]	; (8004ec4 <PID_1+0x194>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fb fb3b 	bl	8000418 <__aeabi_f2d>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4620      	mov	r0, r4
 8004da8:	4629      	mov	r1, r5
 8004daa:	f7fb fb8d 	bl	80004c8 <__aeabi_dmul>
 8004dae:	4603      	mov	r3, r0
 8004db0:	460c      	mov	r4, r1
 8004db2:	4625      	mov	r5, r4
 8004db4:	461c      	mov	r4, r3
 8004db6:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <PID_1+0x19c>)
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b47      	ldr	r3, [pc, #284]	; (8004ed8 <PID_1+0x1a8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fb fecf 	bl	8000b64 <__addsf3>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7fb fb25 	bl	8000418 <__aeabi_f2d>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	f7fb fb77 	bl	80004c8 <__aeabi_dmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	4618      	mov	r0, r3
 8004de0:	4621      	mov	r1, r4
 8004de2:	f7fb fe69 	bl	8000ab8 <__aeabi_d2f>
 8004de6:	4602      	mov	r2, r0
 8004de8:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <PID_1+0x1ac>)
 8004dea:	601a      	str	r2, [r3, #0]
	D = Kd1/dt*(err1 - 2*err_1_1 + err_2_1);
 8004dec:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <PID_1+0x188>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b34      	ldr	r3, [pc, #208]	; (8004ec4 <PID_1+0x194>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4619      	mov	r1, r3
 8004df6:	4610      	mov	r0, r2
 8004df8:	f7fc f870 	bl	8000edc <__aeabi_fdiv>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	461d      	mov	r5, r3
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <PID_1+0x19c>)
 8004e02:	681c      	ldr	r4, [r3, #0]
 8004e04:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <PID_1+0x1a8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fb feaa 	bl	8000b64 <__addsf3>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4619      	mov	r1, r3
 8004e14:	4620      	mov	r0, r4
 8004e16:	f7fb fea3 	bl	8000b60 <__aeabi_fsub>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <PID_1+0x1b0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f7fb fe9d 	bl	8000b64 <__addsf3>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f7fb ffa0 	bl	8000d74 <__aeabi_fmul>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <PID_1+0x1b4>)
 8004e3a:	601a      	str	r2, [r3, #0]
	PID_value1 =  ( (int) P +(int)D +(int)I);
 8004e3c:	4b24      	ldr	r3, [pc, #144]	; (8004ed0 <PID_1+0x1a0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fc f8e7 	bl	8001014 <__aeabi_f2iz>
 8004e46:	4604      	mov	r4, r0
 8004e48:	4b26      	ldr	r3, [pc, #152]	; (8004ee4 <PID_1+0x1b4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fc f8e1 	bl	8001014 <__aeabi_f2iz>
 8004e52:	4603      	mov	r3, r0
 8004e54:	441c      	add	r4, r3
 8004e56:	4b21      	ldr	r3, [pc, #132]	; (8004edc <PID_1+0x1ac>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fc f8da 	bl	8001014 <__aeabi_f2iz>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4423      	add	r3, r4
 8004e64:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <PID_1+0x1b8>)
 8004e66:	6013      	str	r3, [r2, #0]
    err_1_1 = err1;
 8004e68:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <PID_1+0x19c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <PID_1+0x1a8>)
 8004e6e:	6013      	str	r3, [r2, #0]
    err_2_1 = err_1_1;
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <PID_1+0x1a8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <PID_1+0x1b0>)
 8004e76:	6013      	str	r3, [r2, #0]
    PID_value_pre1 = PID_value1;
 8004e78:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <PID_1+0x1b8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <PID_1+0x1bc>)
 8004e7e:	6013      	str	r3, [r2, #0]


    if(PID_value1 > 0){
 8004e80:	4b19      	ldr	r3, [pc, #100]	; (8004ee8 <PID_1+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dd04      	ble.n	8004e92 <PID_1+0x162>
       out = PID_value1 + 560;
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <PID_1+0x1b8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004e90:	60fb      	str	r3, [r7, #12]
    }
    if(PID_value1 < 0){
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <PID_1+0x1b8>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	da04      	bge.n	8004ea4 <PID_1+0x174>
       out = PID_value1 - 560;
 8004e9a:	4b13      	ldr	r3, [pc, #76]	; (8004ee8 <PID_1+0x1b8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8004ea2:	60fb      	str	r3, [r7, #12]
    }
    return out;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000022c 	.word	0x2000022c
 8004eb4:	42200000 	.word	0x42200000
 8004eb8:	20000260 	.word	0x20000260
 8004ebc:	3ee66666 	.word	0x3ee66666
 8004ec0:	2000024c 	.word	0x2000024c
 8004ec4:	20000254 	.word	0x20000254
 8004ec8:	3c3e0ded 	.word	0x3c3e0ded
 8004ecc:	2000023c 	.word	0x2000023c
 8004ed0:	20000268 	.word	0x20000268
 8004ed4:	3fe00000 	.word	0x3fe00000
 8004ed8:	20000224 	.word	0x20000224
 8004edc:	20000248 	.word	0x20000248
 8004ee0:	2000025c 	.word	0x2000025c
 8004ee4:	2000020c 	.word	0x2000020c
 8004ee8:	20000240 	.word	0x20000240
 8004eec:	20000218 	.word	0x20000218

08004ef0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
    	if (huart->Instance == USART1)  //current UART
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <HAL_UART_RxCpltCallback+0x24>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d104      	bne.n	8004f0c <HAL_UART_RxCpltCallback+0x1c>
    	{
              HAL_UART_Receive_IT(&huart1, &mode, 1);   //activate UART receive interrupt every time
 8004f02:	2201      	movs	r2, #1
 8004f04:	4904      	ldr	r1, [pc, #16]	; (8004f18 <HAL_UART_RxCpltCallback+0x28>)
 8004f06:	4805      	ldr	r0, [pc, #20]	; (8004f1c <HAL_UART_RxCpltCallback+0x2c>)
 8004f08:	f7ff fa4d 	bl	80043a6 <HAL_UART_Receive_IT>
    	}
    }
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40013800 	.word	0x40013800
 8004f18:	2000031c 	.word	0x2000031c
 8004f1c:	20000320 	.word	0x20000320

08004f20 <PWM_Control_1>:


	void PWM_Control_1(int duty){
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

		if(duty > 0){
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	dd0c      	ble.n	8004f48 <PWM_Control_1+0x28>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f34:	4811      	ldr	r0, [pc, #68]	; (8004f7c <PWM_Control_1+0x5c>)
 8004f36:	f7fc fcbd 	bl	80018b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET);
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f40:	480e      	ldr	r0, [pc, #56]	; (8004f7c <PWM_Control_1+0x5c>)
 8004f42:	f7fc fcb7 	bl	80018b4 <HAL_GPIO_WritePin>
 8004f46:	e00e      	b.n	8004f66 <PWM_Control_1+0x46>

		}
		else{
		  duty = -duty;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	425b      	negs	r3, r3
 8004f4c:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_RESET);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f54:	4809      	ldr	r0, [pc, #36]	; (8004f7c <PWM_Control_1+0x5c>)
 8004f56:	f7fc fcad 	bl	80018b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f60:	4806      	ldr	r0, [pc, #24]	; (8004f7c <PWM_Control_1+0x5c>)
 8004f62:	f7fc fca7 	bl	80018b4 <HAL_GPIO_WritePin>
		}

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty);
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <PWM_Control_1+0x60>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3334      	adds	r3, #52	; 0x34
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	601a      	str	r2, [r3, #0]


	}
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40010c00 	.word	0x40010c00
 8004f80:	200003c4 	.word	0x200003c4

08004f84 <PWM_Control_2>:

	void PWM_Control_2(int duty){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
		if(duty > 0){
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dd0a      	ble.n	8004fa8 <PWM_Control_2+0x24>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8004f92:	2200      	movs	r2, #0
 8004f94:	2102      	movs	r1, #2
 8004f96:	4810      	ldr	r0, [pc, #64]	; (8004fd8 <PWM_Control_2+0x54>)
 8004f98:	f7fc fc8c 	bl	80018b4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	480d      	ldr	r0, [pc, #52]	; (8004fd8 <PWM_Control_2+0x54>)
 8004fa2:	f7fc fc87 	bl	80018b4 <HAL_GPIO_WritePin>
 8004fa6:	e00c      	b.n	8004fc2 <PWM_Control_2+0x3e>

		}
		else{
	      duty = -duty;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	425b      	negs	r3, r3
 8004fac:	607b      	str	r3, [r7, #4]
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	4809      	ldr	r0, [pc, #36]	; (8004fd8 <PWM_Control_2+0x54>)
 8004fb4:	f7fc fc7e 	bl	80018b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4806      	ldr	r0, [pc, #24]	; (8004fd8 <PWM_Control_2+0x54>)
 8004fbe:	f7fc fc79 	bl	80018b4 <HAL_GPIO_WritePin>
		}

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty);
 8004fc2:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <PWM_Control_2+0x58>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3334      	adds	r3, #52	; 0x34
 8004fc8:	330c      	adds	r3, #12
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	601a      	str	r2, [r3, #0]


	}
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40010c00 	.word	0x40010c00
 8004fdc:	200003c4 	.word	0x200003c4

08004fe0 <HAL_TIM_PeriodElapsedCallback>:

	  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	  {
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	      if (__HAL_TIM_GET_IT_SOURCE(&htim1,TIM_IT_UPDATE)) {
 8004fe8:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d11a      	bne.n	800502c <HAL_TIM_PeriodElapsedCallback+0x4c>
	    	 // pre_com_angle = com_angle; // đạo hàm, lúc trước khi lấy mẫu cái hiện tại đã thành cái mới
	    	  process_MPU();
 8004ff6:	f000 fc8f 	bl	8005918 <process_MPU>
	    	  duty = PID(0,com_angle);
 8004ffa:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f04f 0000 	mov.w	r0, #0
 8005004:	f7ff fdb4 	bl	8004b70 <PID>
 8005008:	4602      	mov	r2, r0
 800500a:	4b0c      	ldr	r3, [pc, #48]	; (800503c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800500c:	601a      	str	r2, [r3, #0]
	    	  duty_1 = PID_1(0,com_angle);
 800500e:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f7fb fa00 	bl	8000418 <__aeabi_f2d>
 8005018:	4603      	mov	r3, r0
 800501a:	460c      	mov	r4, r1
 800501c:	461a      	mov	r2, r3
 800501e:	4623      	mov	r3, r4
 8005020:	2000      	movs	r0, #0
 8005022:	f7ff fe85 	bl	8004d30 <PID_1>
 8005026:	4602      	mov	r2, r0
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800502a:	601a      	str	r2, [r3, #0]
	      }
	  }
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	2000036c 	.word	0x2000036c
 8005038:	2000026c 	.word	0x2000026c
 800503c:	20000200 	.word	0x20000200
 8005040:	20000204 	.word	0x20000204

08005044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005044:	b598      	push	{r3, r4, r7, lr}
 8005046:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005048:	f7fc f80a 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800504c:	f000 f876 	bl	800513c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005050:	f000 fa20 	bl	8005494 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005054:	f000 f938 	bl	80052c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005058:	f000 f99e 	bl	8005398 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800505c:	f000 f9f0 	bl	8005440 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8005060:	f000 f8b2 	bl	80051c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8005064:	f000 f8de 	bl	8005224 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8005068:	2108      	movs	r1, #8
 800506a:	482b      	ldr	r0, [pc, #172]	; (8005118 <main+0xd4>)
 800506c:	f7fe f93c 	bl	80032e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8005070:	210c      	movs	r1, #12
 8005072:	4829      	ldr	r0, [pc, #164]	; (8005118 <main+0xd4>)
 8005074:	f7fe f938 	bl	80032e8 <HAL_TIM_PWM_Start>


  init_MPU();
 8005078:	f000 fbb6 	bl	80057e8 <init_MPU>
    /* USER CODE END WHILE */
  while(1){
    /* USER CODE BEGIN 3 */
	HAL_UART_Receive_IT(&huart1, &mode, 1);
 800507c:	2201      	movs	r2, #1
 800507e:	4927      	ldr	r1, [pc, #156]	; (800511c <main+0xd8>)
 8005080:	4827      	ldr	r0, [pc, #156]	; (8005120 <main+0xdc>)
 8005082:	f7ff f990 	bl	80043a6 <HAL_UART_Receive_IT>
    if(mode == 's'){
 8005086:	4b25      	ldr	r3, [pc, #148]	; (800511c <main+0xd8>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b73      	cmp	r3, #115	; 0x73
 800508c:	d10d      	bne.n	80050aa <main+0x66>
    	HAL_TIM_Base_Start_IT(&htim1);
 800508e:	4825      	ldr	r0, [pc, #148]	; (8005124 <main+0xe0>)
 8005090:	f7fe f8e5 	bl	800325e <HAL_TIM_Base_Start_IT>
        while (1)
        {
	      PWM_Control_1(duty);
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <main+0xe4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff ff41 	bl	8004f20 <PWM_Control_1>
	      PWM_Control_2(duty_1);
 800509e:	4b23      	ldr	r3, [pc, #140]	; (800512c <main+0xe8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7ff ff6e 	bl	8004f84 <PWM_Control_2>
	      PWM_Control_1(duty);
 80050a8:	e7f4      	b.n	8005094 <main+0x50>
        }
     }
     if(mode == 'c'){
 80050aa:	4b1c      	ldr	r3, [pc, #112]	; (800511c <main+0xd8>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b63      	cmp	r3, #99	; 0x63
 80050b0:	d101      	bne.n	80050b6 <main+0x72>
	     calib_MPU();
 80050b2:	f000 fe03 	bl	8005cbc <calib_MPU>
     }
     if(mode == 'p'){
 80050b6:	4b19      	ldr	r3, [pc, #100]	; (800511c <main+0xd8>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b70      	cmp	r3, #112	; 0x70
 80050bc:	d1de      	bne.n	800507c <main+0x38>
    	 HAL_UART_DeInit(&huart1);
 80050be:	4818      	ldr	r0, [pc, #96]	; (8005120 <main+0xdc>)
 80050c0:	f7ff f80e 	bl	80040e0 <HAL_UART_DeInit>
    	 MX_USART1_UART_Init();
 80050c4:	f000 f9bc 	bl	8005440 <MX_USART1_UART_Init>
    	 while(1){
    		 while(i<4){
 80050c8:	e017      	b.n	80050fa <main+0xb6>
    	        if(HAL_UART_Receive(&huart1, &buffer, 4, 1000) == HAL_OK){
 80050ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050ce:	2204      	movs	r2, #4
 80050d0:	4917      	ldr	r1, [pc, #92]	; (8005130 <main+0xec>)
 80050d2:	4813      	ldr	r0, [pc, #76]	; (8005120 <main+0xdc>)
 80050d4:	f7ff f8c1 	bl	800425a <HAL_UART_Receive>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10d      	bne.n	80050fa <main+0xb6>
    	         pid_data[i] = atoi(buffer);
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <main+0xf0>)
 80050e0:	681c      	ldr	r4, [r3, #0]
 80050e2:	4813      	ldr	r0, [pc, #76]	; (8005130 <main+0xec>)
 80050e4:	f001 fd00 	bl	8006ae8 <atoi>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b13      	ldr	r3, [pc, #76]	; (8005138 <main+0xf4>)
 80050ec:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    	         i++;
 80050f0:	4b10      	ldr	r3, [pc, #64]	; (8005134 <main+0xf0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3301      	adds	r3, #1
 80050f6:	4a0f      	ldr	r2, [pc, #60]	; (8005134 <main+0xf0>)
 80050f8:	6013      	str	r3, [r2, #0]
    		 while(i<4){
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <main+0xf0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	dde3      	ble.n	80050ca <main+0x86>
    	       }
    		 }

            	 HAL_UART_Receive_IT(&huart1, &mode, 1);
 8005102:	2201      	movs	r2, #1
 8005104:	4905      	ldr	r1, [pc, #20]	; (800511c <main+0xd8>)
 8005106:	4806      	ldr	r0, [pc, #24]	; (8005120 <main+0xdc>)
 8005108:	f7ff f94d 	bl	80043a6 <HAL_UART_Receive_IT>
            	 mode = ' ';
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <main+0xd8>)
 800510e:	2220      	movs	r2, #32
 8005110:	701a      	strb	r2, [r3, #0]
            	 break;
 8005112:	bf00      	nop
	HAL_UART_Receive_IT(&huart1, &mode, 1);
 8005114:	e7b2      	b.n	800507c <main+0x38>
 8005116:	bf00      	nop
 8005118:	200003c4 	.word	0x200003c4
 800511c:	2000031c 	.word	0x2000031c
 8005120:	20000320 	.word	0x20000320
 8005124:	2000036c 	.word	0x2000036c
 8005128:	20000200 	.word	0x20000200
 800512c:	20000204 	.word	0x20000204
 8005130:	20000364 	.word	0x20000364
 8005134:	200001fc 	.word	0x200001fc
 8005138:	200003b0 	.word	0x200003b0

0800513c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b090      	sub	sp, #64	; 0x40
 8005140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005142:	f107 0318 	add.w	r3, r7, #24
 8005146:	2228      	movs	r2, #40	; 0x28
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f001 fcfa 	bl	8006b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	609a      	str	r2, [r3, #8]
 800515a:	60da      	str	r2, [r3, #12]
 800515c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800515e:	2301      	movs	r3, #1
 8005160:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005168:	2300      	movs	r3, #0
 800516a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800516c:	2301      	movs	r3, #1
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005170:	2302      	movs	r3, #2
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800517a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005180:	f107 0318 	add.w	r3, r7, #24
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd fc1d 	bl	80029c4 <HAL_RCC_OscConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005190:	f000 f9ee 	bl	8005570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005194:	230f      	movs	r3, #15
 8005196:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005198:	2302      	movs	r3, #2
 800519a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80051a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	2102      	movs	r1, #2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fe6c 	bl	8002e8c <HAL_RCC_ClockConfig>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80051ba:	f000 f9d9 	bl	8005570 <Error_Handler>
  }
}
 80051be:	bf00      	nop
 80051c0:	3740      	adds	r7, #64	; 0x40
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051cc:	4b12      	ldr	r3, [pc, #72]	; (8005218 <MX_I2C1_Init+0x50>)
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <MX_I2C1_Init+0x54>)
 80051d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80051d2:	4b11      	ldr	r3, [pc, #68]	; (8005218 <MX_I2C1_Init+0x50>)
 80051d4:	4a12      	ldr	r2, [pc, #72]	; (8005220 <MX_I2C1_Init+0x58>)
 80051d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <MX_I2C1_Init+0x50>)
 80051da:	2200      	movs	r2, #0
 80051dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <MX_I2C1_Init+0x50>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051e4:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <MX_I2C1_Init+0x50>)
 80051e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <MX_I2C1_Init+0x50>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <MX_I2C1_Init+0x50>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051f8:	4b07      	ldr	r3, [pc, #28]	; (8005218 <MX_I2C1_Init+0x50>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <MX_I2C1_Init+0x50>)
 8005200:	2200      	movs	r2, #0
 8005202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005204:	4804      	ldr	r0, [pc, #16]	; (8005218 <MX_I2C1_Init+0x50>)
 8005206:	f7fc fb6d 	bl	80018e4 <HAL_I2C_Init>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005210:	f000 f9ae 	bl	8005570 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005214:	bf00      	nop
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000270 	.word	0x20000270
 800521c:	40005400 	.word	0x40005400
 8005220:	00061a80 	.word	0x00061a80

08005224 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005238:	463b      	mov	r3, r7
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005240:	4b1f      	ldr	r3, [pc, #124]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005242:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <MX_TIM1_Init+0xa0>)
 8005244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8005246:	4b1e      	ldr	r3, [pc, #120]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005248:	f240 22cf 	movw	r2, #719	; 0x2cf
 800524c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524e:	4b1c      	ldr	r3, [pc, #112]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005250:	2200      	movs	r2, #0
 8005252:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8005254:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800525a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525c:	4b18      	ldr	r3, [pc, #96]	; (80052c0 <MX_TIM1_Init+0x9c>)
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005264:	2200      	movs	r2, #0
 8005266:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005268:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <MX_TIM1_Init+0x9c>)
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800526e:	4814      	ldr	r0, [pc, #80]	; (80052c0 <MX_TIM1_Init+0x9c>)
 8005270:	f7fd ffca 	bl	8003208 <HAL_TIM_Base_Init>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800527a:	f000 f979 	bl	8005570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800527e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005282:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	4619      	mov	r1, r3
 800528a:	480d      	ldr	r0, [pc, #52]	; (80052c0 <MX_TIM1_Init+0x9c>)
 800528c:	f7fe fab8 	bl	8003800 <HAL_TIM_ConfigClockSource>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8005296:	f000 f96b 	bl	8005570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800529e:	2300      	movs	r3, #0
 80052a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052a2:	463b      	mov	r3, r7
 80052a4:	4619      	mov	r1, r3
 80052a6:	4806      	ldr	r0, [pc, #24]	; (80052c0 <MX_TIM1_Init+0x9c>)
 80052a8:	f7fe fe77 	bl	8003f9a <HAL_TIMEx_MasterConfigSynchronization>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80052b2:	f000 f95d 	bl	8005570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	2000036c 	.word	0x2000036c
 80052c4:	40012c00 	.word	0x40012c00

080052c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052ce:	f107 0320 	add.w	r3, r7, #32
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	611a      	str	r2, [r3, #16]
 80052e6:	615a      	str	r2, [r3, #20]
 80052e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052ea:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <MX_TIM2_Init+0xcc>)
 80052ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80052f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80052f2:	4b28      	ldr	r3, [pc, #160]	; (8005394 <MX_TIM2_Init+0xcc>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <MX_TIM2_Init+0xcc>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 80052fe:	4b25      	ldr	r3, [pc, #148]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005300:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005304:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005306:	4b23      	ldr	r3, [pc, #140]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530c:	4b21      	ldr	r3, [pc, #132]	; (8005394 <MX_TIM2_Init+0xcc>)
 800530e:	2200      	movs	r2, #0
 8005310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005312:	4820      	ldr	r0, [pc, #128]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005314:	f7fd ffbd 	bl	8003292 <HAL_TIM_PWM_Init>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800531e:	f000 f927 	bl	8005570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005322:	2300      	movs	r3, #0
 8005324:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800532a:	f107 0320 	add.w	r3, r7, #32
 800532e:	4619      	mov	r1, r3
 8005330:	4818      	ldr	r0, [pc, #96]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005332:	f7fe fe32 	bl	8003f9a <HAL_TIMEx_MasterConfigSynchronization>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800533c:	f000 f918 	bl	8005570 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005340:	2360      	movs	r3, #96	; 0x60
 8005342:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 6000;
 8005344:	f241 7370 	movw	r3, #6000	; 0x1770
 8005348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800534e:	2304      	movs	r3, #4
 8005350:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005352:	1d3b      	adds	r3, r7, #4
 8005354:	2208      	movs	r2, #8
 8005356:	4619      	mov	r1, r3
 8005358:	480e      	ldr	r0, [pc, #56]	; (8005394 <MX_TIM2_Init+0xcc>)
 800535a:	f7fe f98b 	bl	8003674 <HAL_TIM_PWM_ConfigChannel>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8005364:	f000 f904 	bl	8005570 <Error_Handler>
  }
  sConfigOC.Pulse = 5999;
 8005368:	f241 736f 	movw	r3, #5999	; 0x176f
 800536c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	220c      	movs	r2, #12
 8005372:	4619      	mov	r1, r3
 8005374:	4807      	ldr	r0, [pc, #28]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005376:	f7fe f97d 	bl	8003674 <HAL_TIM_PWM_ConfigChannel>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8005380:	f000 f8f6 	bl	8005570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005384:	4803      	ldr	r0, [pc, #12]	; (8005394 <MX_TIM2_Init+0xcc>)
 8005386:	f000 ff01 	bl	800618c <HAL_TIM_MspPostInit>

}
 800538a:	bf00      	nop
 800538c:	3728      	adds	r7, #40	; 0x28
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200003c4 	.word	0x200003c4

08005398 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800539e:	f107 030c 	add.w	r3, r7, #12
 80053a2:	2224      	movs	r2, #36	; 0x24
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fbcc 	bl	8006b44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053b4:	4b20      	ldr	r3, [pc, #128]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053b6:	4a21      	ldr	r2, [pc, #132]	; (800543c <MX_TIM3_Init+0xa4>)
 80053b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80053c6:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80053cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <MX_TIM3_Init+0xa0>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80053da:	2301      	movs	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80053ee:	2300      	movs	r3, #0
 80053f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80053f2:	2301      	movs	r3, #1
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80053f6:	2300      	movs	r3, #0
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	4619      	mov	r1, r3
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <MX_TIM3_Init+0xa0>)
 8005406:	f7fd ff97 	bl	8003338 <HAL_TIM_Encoder_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8005410:	f000 f8ae 	bl	8005570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005414:	2300      	movs	r3, #0
 8005416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <MX_TIM3_Init+0xa0>)
 8005422:	f7fe fdba 	bl	8003f9a <HAL_TIMEx_MasterConfigSynchronization>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800542c:	f000 f8a0 	bl	8005570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005430:	bf00      	nop
 8005432:	3730      	adds	r7, #48	; 0x30
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200002dc 	.word	0x200002dc
 800543c:	40000400 	.word	0x40000400

08005440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <MX_USART1_UART_Init+0x50>)
 8005448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800544c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005454:	2200      	movs	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800545a:	2200      	movs	r2, #0
 800545c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005460:	2200      	movs	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005466:	220c      	movs	r2, #12
 8005468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005476:	4805      	ldr	r0, [pc, #20]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005478:	f7fe fde5 	bl	8004046 <HAL_UART_Init>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005482:	f000 f875 	bl	8005570 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20000320 	.word	0x20000320
 8005490:	40013800 	.word	0x40013800

08005494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549a:	f107 0310 	add.w	r3, r7, #16
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	605a      	str	r2, [r3, #4]
 80054a4:	609a      	str	r2, [r3, #8]
 80054a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a8:	4b2e      	ldr	r3, [pc, #184]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054ae:	f043 0310 	orr.w	r3, r3, #16
 80054b2:	6193      	str	r3, [r2, #24]
 80054b4:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c0:	4b28      	ldr	r3, [pc, #160]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054c6:	f043 0320 	orr.w	r3, r3, #32
 80054ca:	6193      	str	r3, [r2, #24]
 80054cc:	4b25      	ldr	r3, [pc, #148]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d8:	4b22      	ldr	r3, [pc, #136]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	4a21      	ldr	r2, [pc, #132]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	6193      	str	r3, [r2, #24]
 80054e4:	4b1f      	ldr	r3, [pc, #124]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054f6:	f043 0308 	orr.w	r3, r3, #8
 80054fa:	6193      	str	r3, [r2, #24]
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <MX_GPIO_Init+0xd0>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005508:	2200      	movs	r2, #0
 800550a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800550e:	4816      	ldr	r0, [pc, #88]	; (8005568 <MX_GPIO_Init+0xd4>)
 8005510:	f7fc f9d0 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8005514:	2200      	movs	r2, #0
 8005516:	f640 4103 	movw	r1, #3075	; 0xc03
 800551a:	4814      	ldr	r0, [pc, #80]	; (800556c <MX_GPIO_Init+0xd8>)
 800551c:	f7fc f9ca 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	2300      	movs	r3, #0
 800552c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800552e:	2302      	movs	r3, #2
 8005530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005532:	f107 0310 	add.w	r3, r7, #16
 8005536:	4619      	mov	r1, r3
 8005538:	480b      	ldr	r0, [pc, #44]	; (8005568 <MX_GPIO_Init+0xd4>)
 800553a:	f7fb ff9b 	bl	8001474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 800553e:	f640 4303 	movw	r3, #3075	; 0xc03
 8005542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005544:	2301      	movs	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800554c:	2302      	movs	r3, #2
 800554e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005550:	f107 0310 	add.w	r3, r7, #16
 8005554:	4619      	mov	r1, r3
 8005556:	4805      	ldr	r0, [pc, #20]	; (800556c <MX_GPIO_Init+0xd8>)
 8005558:	f7fb ff8c 	bl	8001474 <HAL_GPIO_Init>

}
 800555c:	bf00      	nop
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000
 8005568:	40011000 	.word	0x40011000
 800556c:	40010c00 	.word	0x40010c00

08005570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005574:	bf00      	nop
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr
 800557c:	0000      	movs	r0, r0
	...

08005580 <ftoa>:
	0.000000005,		// 8
	0.0000000005,		// 9
	0.00000000005		// 10
};
char * ftoa(double f, char * buf, int precision)
{
 8005580:	b590      	push	{r4, r7, lr}
 8005582:	b08b      	sub	sp, #44	; 0x2c
 8005584:	af00      	add	r7, sp, #0
 8005586:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b0a      	cmp	r3, #10
 800559a:	dd01      	ble.n	80055a0 <ftoa+0x20>
		precision = MAX_PRECISION;
 800559c:	230a      	movs	r3, #10
 800559e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ac:	f7fb f9fe 	bl	80009ac <__aeabi_dcmplt>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <ftoa+0x4c>
	{
		f = -f;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	60bb      	str	r3, [r7, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80055c0:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	627a      	str	r2, [r7, #36]	; 0x24
 80055c8:	222d      	movs	r2, #45	; 0x2d
 80055ca:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da4f      	bge.n	8005672 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	4b7e      	ldr	r3, [pc, #504]	; (80057d0 <ftoa+0x250>)
 80055d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055dc:	f7fb f9e6 	bl	80009ac <__aeabi_dcmplt>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <ftoa+0x6c>
 80055e6:	2306      	movs	r3, #6
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	e042      	b.n	8005672 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 80055ec:	f04f 0200 	mov.w	r2, #0
 80055f0:	4b78      	ldr	r3, [pc, #480]	; (80057d4 <ftoa+0x254>)
 80055f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055f6:	f7fb f9d9 	bl	80009ac <__aeabi_dcmplt>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <ftoa+0x86>
 8005600:	2305      	movs	r3, #5
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	e035      	b.n	8005672 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	4b73      	ldr	r3, [pc, #460]	; (80057d8 <ftoa+0x258>)
 800560c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005610:	f7fb f9cc 	bl	80009ac <__aeabi_dcmplt>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <ftoa+0xa0>
 800561a:	2304      	movs	r3, #4
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	e028      	b.n	8005672 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	4b6d      	ldr	r3, [pc, #436]	; (80057dc <ftoa+0x25c>)
 8005626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800562a:	f7fb f9bf 	bl	80009ac <__aeabi_dcmplt>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <ftoa+0xba>
 8005634:	2303      	movs	r3, #3
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	e01b      	b.n	8005672 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800563a:	a361      	add	r3, pc, #388	; (adr r3, 80057c0 <ftoa+0x240>)
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005644:	f7fb f9b2 	bl	80009ac <__aeabi_dcmplt>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <ftoa+0xd4>
 800564e:	2302      	movs	r3, #2
 8005650:	603b      	str	r3, [r7, #0]
 8005652:	e00e      	b.n	8005672 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8005654:	a35c      	add	r3, pc, #368	; (adr r3, 80057c8 <ftoa+0x248>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800565e:	f7fb f9a5 	bl	80009ac <__aeabi_dcmplt>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <ftoa+0xee>
 8005668:	2301      	movs	r3, #1
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	e001      	b.n	8005672 <ftoa+0xf2>
		else precision = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <ftoa+0x116>
		f += rounders[precision];
 8005678:	4a59      	ldr	r2, [pc, #356]	; (80057e0 <ftoa+0x260>)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	cb18      	ldmia	r3, {r3, r4}
 8005682:	461a      	mov	r2, r3
 8005684:	4623      	mov	r3, r4
 8005686:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800568a:	f7fa fd67 	bl	800015c <__adddf3>
 800568e:	4603      	mov	r3, r0
 8005690:	460c      	mov	r4, r1
 8005692:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8005696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800569a:	f7fb f9c5 	bl	8000a28 <__aeabi_d2iz>
 800569e:	4603      	mov	r3, r0
 80056a0:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 80056a2:	69f8      	ldr	r0, [r7, #28]
 80056a4:	f7fa fea6 	bl	80003f4 <__aeabi_i2d>
 80056a8:	4603      	mov	r3, r0
 80056aa:	460c      	mov	r4, r1
 80056ac:	461a      	mov	r2, r3
 80056ae:	4623      	mov	r3, r4
 80056b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b4:	f7fa fd50 	bl	8000158 <__aeabi_dsub>
 80056b8:	4603      	mov	r3, r0
 80056ba:	460c      	mov	r4, r1
 80056bc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <ftoa+0x152>
		*ptr++ = '0';
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	627a      	str	r2, [r7, #36]	; 0x24
 80056cc:	2230      	movs	r2, #48	; 0x30
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	e038      	b.n	8005744 <ftoa+0x1c4>
	else
	{
		// save start pointer
		p = ptr;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80056d6:	e01a      	b.n	800570e <ftoa+0x18e>
		{
			*p++ = '0' + intPart % 10;
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	4b42      	ldr	r3, [pc, #264]	; (80057e4 <ftoa+0x264>)
 80056dc:	fb83 1302 	smull	r1, r3, r3, r2
 80056e0:	1099      	asrs	r1, r3, #2
 80056e2:	17d3      	asrs	r3, r2, #31
 80056e4:	1ac9      	subs	r1, r1, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	1ad1      	subs	r1, r2, r3
 80056f0:	b2ca      	uxtb	r2, r1
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	6239      	str	r1, [r7, #32]
 80056f8:	3230      	adds	r2, #48	; 0x30
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4a38      	ldr	r2, [pc, #224]	; (80057e4 <ftoa+0x264>)
 8005702:	fb82 1203 	smull	r1, r2, r2, r3
 8005706:	1092      	asrs	r2, r2, #2
 8005708:	17db      	asrs	r3, r3, #31
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	61fb      	str	r3, [r7, #28]
		while (intPart)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e1      	bne.n	80056d8 <ftoa+0x158>
		}

		// save end pos
		p1 = p;
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8005718:	e00e      	b.n	8005738 <ftoa+0x1b8>
		{
			c = *--p;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	3b01      	subs	r3, #1
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	627a      	str	r2, [r7, #36]	; 0x24
 8005734:	7dfa      	ldrb	r2, [r7, #23]
 8005736:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	429a      	cmp	r2, r3
 800573e:	d8ec      	bhi.n	800571a <ftoa+0x19a>
		}

		// restore end pos
		ptr = p1;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d032      	beq.n	80057b0 <ftoa+0x230>
	{
		// place decimal point
		*ptr++ = '.';
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	627a      	str	r2, [r7, #36]	; 0x24
 8005750:	222e      	movs	r2, #46	; 0x2e
 8005752:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8005754:	e027      	b.n	80057a6 <ftoa+0x226>
		{
			f *= 10.0;
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <ftoa+0x254>)
 800575c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005760:	f7fa feb2 	bl	80004c8 <__aeabi_dmul>
 8005764:	4603      	mov	r3, r0
 8005766:	460c      	mov	r4, r1
 8005768:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 800576c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005770:	f7fb f982 	bl	8000a78 <__aeabi_d2uiz>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	627a      	str	r2, [r7, #36]	; 0x24
 800577e:	7dfa      	ldrb	r2, [r7, #23]
 8005780:	3230      	adds	r2, #48	; 0x30
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
			f -= c;
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fa fe33 	bl	80003f4 <__aeabi_i2d>
 800578e:	4603      	mov	r3, r0
 8005790:	460c      	mov	r4, r1
 8005792:	461a      	mov	r2, r3
 8005794:	4623      	mov	r3, r4
 8005796:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800579a:	f7fa fcdd 	bl	8000158 <__aeabi_dsub>
 800579e:	4603      	mov	r3, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	603a      	str	r2, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1d2      	bne.n	8005756 <ftoa+0x1d6>
		}
	}

	// terminating zero
	*ptr = 0;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]

	return buf;
 80057b6:	687b      	ldr	r3, [r7, #4]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	372c      	adds	r7, #44	; 0x2c
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}
 80057c0:	00000000 	.word	0x00000000
 80057c4:	40c38800 	.word	0x40c38800
 80057c8:	00000000 	.word	0x00000000
 80057cc:	40f86a00 	.word	0x40f86a00
 80057d0:	3ff00000 	.word	0x3ff00000
 80057d4:	40240000 	.word	0x40240000
 80057d8:	40590000 	.word	0x40590000
 80057dc:	408f4000 	.word	0x408f4000
 80057e0:	08006d10 	.word	0x08006d10
 80057e4:	66666667 	.word	0x66666667

080057e8 <init_MPU>:

char init_MPU(){
 80057e8:	b5b0      	push	{r4, r5, r7, lr}
 80057ea:	b08a      	sub	sp, #40	; 0x28
 80057ec:	af02      	add	r7, sp, #8
    char status = 1;
 80057ee:	2301      	movs	r3, #1
 80057f0:	77fb      	strb	r3, [r7, #31]
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80057f2:	23d0      	movs	r3, #208	; 0xd0
 80057f4:	77bb      	strb	r3, [r7, #30]

    char rx_data[25];
    if (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 1000) != HAL_OK) {
 80057f6:	7fbb      	ldrb	r3, [r7, #30]
 80057f8:	b299      	uxth	r1, r3
 80057fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057fe:	2203      	movs	r2, #3
 8005800:	4840      	ldr	r0, [pc, #256]	; (8005904 <init_MPU+0x11c>)
 8005802:	f7fc fcbb 	bl	800217c <HAL_I2C_IsDeviceReady>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d007      	beq.n	800581c <init_MPU+0x34>
    	strcpy( rx_data, "No Device \r \n");
 800580c:	463b      	mov	r3, r7
 800580e:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <init_MPU+0x120>)
 8005810:	461c      	mov	r4, r3
 8005812:	4613      	mov	r3, r2
 8005814:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005816:	c407      	stmia	r4!, {r0, r1, r2}
 8005818:	8023      	strh	r3, [r4, #0]
 800581a:	e007      	b.n	800582c <init_MPU+0x44>
      }
      else{
    	  strcpy( rx_data, "Device found \r \n");
 800581c:	463b      	mov	r3, r7
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <init_MPU+0x124>)
 8005820:	461c      	mov	r4, r3
 8005822:	4615      	mov	r5, r2
 8005824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005828:	682b      	ldr	r3, [r5, #0]
 800582a:	7023      	strb	r3, [r4, #0]
      }
    HAL_UART_Transmit(&huart1, (uint8_t *)&rx_data, 25, 100);
 800582c:	4639      	mov	r1, r7
 800582e:	2364      	movs	r3, #100	; 0x64
 8005830:	2219      	movs	r2, #25
 8005832:	4837      	ldr	r0, [pc, #220]	; (8005910 <init_MPU+0x128>)
 8005834:	f7fe fc78 	bl	8004128 <HAL_UART_Transmit>
	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8005838:	236b      	movs	r3, #107	; 0x6b
 800583a:	773b      	strb	r3, [r7, #28]
    d[1] = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	777b      	strb	r3, [r7, #29]
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8005840:	7fbb      	ldrb	r3, [r7, #30]
 8005842:	b299      	uxth	r1, r3
 8005844:	f107 021c 	add.w	r2, r7, #28
 8005848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2302      	movs	r3, #2
 8005850:	482c      	ldr	r0, [pc, #176]	; (8005904 <init_MPU+0x11c>)
 8005852:	f7fc f94b 	bl	8001aec <HAL_I2C_Master_Transmit>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <init_MPU+0x78>
	{
		status = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	77fb      	strb	r3, [r7, #31]
	}
	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8005860:	2319      	movs	r3, #25
 8005862:	773b      	strb	r3, [r7, #28]
	d[1] = sample_1khz;
 8005864:	2307      	movs	r3, #7
 8005866:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8005868:	bf00      	nop
 800586a:	7fbb      	ldrb	r3, [r7, #30]
 800586c:	b299      	uxth	r1, r3
 800586e:	f107 021c 	add.w	r2, r7, #28
 8005872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2302      	movs	r3, #2
 800587a:	4822      	ldr	r0, [pc, #136]	; (8005904 <init_MPU+0x11c>)
 800587c:	f7fc f936 	bl	8001aec <HAL_I2C_Master_Transmit>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f1      	bne.n	800586a <init_MPU+0x82>

	d[0] = GYRO_CONFIG;
 8005886:	231b      	movs	r3, #27
 8005888:	773b      	strb	r3, [r7, #28]
	d[1] = gyro_con;
 800588a:	2318      	movs	r3, #24
 800588c:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800588e:	bf00      	nop
 8005890:	7fbb      	ldrb	r3, [r7, #30]
 8005892:	b299      	uxth	r1, r3
 8005894:	f107 021c 	add.w	r2, r7, #28
 8005898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	2302      	movs	r3, #2
 80058a0:	4818      	ldr	r0, [pc, #96]	; (8005904 <init_MPU+0x11c>)
 80058a2:	f7fc f923 	bl	8001aec <HAL_I2C_Master_Transmit>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1f1      	bne.n	8005890 <init_MPU+0xa8>

	d[0] = ACCEL_CONFIG;
 80058ac:	231c      	movs	r3, #28
 80058ae:	773b      	strb	r3, [r7, #28]
	d[1] = 0x00;
 80058b0:	2300      	movs	r3, #0
 80058b2:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80058b4:	bf00      	nop
 80058b6:	7fbb      	ldrb	r3, [r7, #30]
 80058b8:	b299      	uxth	r1, r3
 80058ba:	f107 021c 	add.w	r2, r7, #28
 80058be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2302      	movs	r3, #2
 80058c6:	480f      	ldr	r0, [pc, #60]	; (8005904 <init_MPU+0x11c>)
 80058c8:	f7fc f910 	bl	8001aec <HAL_I2C_Master_Transmit>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f1      	bne.n	80058b6 <init_MPU+0xce>

	d[0] = INIT_ENB;
 80058d2:	2338      	movs	r3, #56	; 0x38
 80058d4:	773b      	strb	r3, [r7, #28]
	d[1] = inter;
 80058d6:	2301      	movs	r3, #1
 80058d8:	777b      	strb	r3, [r7, #29]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80058da:	bf00      	nop
 80058dc:	7fbb      	ldrb	r3, [r7, #30]
 80058de:	b299      	uxth	r1, r3
 80058e0:	f107 021c 	add.w	r2, r7, #28
 80058e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	2302      	movs	r3, #2
 80058ec:	4805      	ldr	r0, [pc, #20]	; (8005904 <init_MPU+0x11c>)
 80058ee:	f7fc f8fd 	bl	8001aec <HAL_I2C_Master_Transmit>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1f1      	bne.n	80058dc <init_MPU+0xf4>

  return status;
 80058f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bdb0      	pop	{r4, r5, r7, pc}
 8005902:	bf00      	nop
 8005904:	20000270 	.word	0x20000270
 8005908:	08006cec 	.word	0x08006cec
 800590c:	08006cfc 	.word	0x08006cfc
 8005910:	20000320 	.word	0x20000320
 8005914:	00000000 	.word	0x00000000

08005918 <process_MPU>:
	raw.Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
	raw.Temperature = (float)(temp)/340.0 + (float)36.5;
    return raw;
}

void process_MPU(){
 8005918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800591a:	b093      	sub	sp, #76	; 0x4c
 800591c:	af02      	add	r7, sp, #8

	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch,roll_com;

	uint8_t data[13];
	uint8_t reg = ACCEL_XOUT_H;
 800591e:	233b      	movs	r3, #59	; 0x3b
 8005920:	72fb      	strb	r3, [r7, #11]
	uint8_t device_address = MPU_ADDRESS;
 8005922:	23d0      	movs	r3, #208	; 0xd0
 8005924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8005928:	bf00      	nop
 800592a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800592e:	b299      	uxth	r1, r3
 8005930:	f107 020b 	add.w	r2, r7, #11
 8005934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	2301      	movs	r3, #1
 800593c:	48b0      	ldr	r0, [pc, #704]	; (8005c00 <process_MPU+0x2e8>)
 800593e:	f7fc f8d5 	bl	8001aec <HAL_I2C_Master_Transmit>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f0      	bne.n	800592a <process_MPU+0x12>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8005948:	bf00      	nop
 800594a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800594e:	b299      	uxth	r1, r3
 8005950:	f107 020c 	add.w	r2, r7, #12
 8005954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	230e      	movs	r3, #14
 800595c:	48a8      	ldr	r0, [pc, #672]	; (8005c00 <process_MPU+0x2e8>)
 800595e:	f7fc f9d3 	bl	8001d08 <HAL_I2C_Master_Receive>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f0      	bne.n	800594a <process_MPU+0x32>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8005968:	7b3b      	ldrb	r3, [r7, #12]
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	b21a      	sxth	r2, r3
 800596e:	7b7b      	ldrb	r3, [r7, #13]
 8005970:	b21b      	sxth	r3, r3
 8005972:	4313      	orrs	r3, r2
 8005974:	b21b      	sxth	r3, r3
 8005976:	4618      	mov	r0, r3
 8005978:	f7fb f9a8 	bl	8000ccc <__aeabi_i2f>
 800597c:	4603      	mov	r3, r0
 800597e:	63bb      	str	r3, [r7, #56]	; 0x38
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8005980:	7bbb      	ldrb	r3, [r7, #14]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	b21a      	sxth	r2, r3
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	b21b      	sxth	r3, r3
 800598a:	4313      	orrs	r3, r2
 800598c:	b21b      	sxth	r3, r3
 800598e:	4618      	mov	r0, r3
 8005990:	f7fb f99c 	bl	8000ccc <__aeabi_i2f>
 8005994:	4603      	mov	r3, r0
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8005998:	7c3b      	ldrb	r3, [r7, #16]
 800599a:	021b      	lsls	r3, r3, #8
 800599c:	b21a      	sxth	r2, r3
 800599e:	7c7b      	ldrb	r3, [r7, #17]
 80059a0:	b21b      	sxth	r3, r3
 80059a2:	4313      	orrs	r3, r2
 80059a4:	b21b      	sxth	r3, r3
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fb f990 	bl	8000ccc <__aeabi_i2f>
 80059ac:	4603      	mov	r3, r0
 80059ae:	633b      	str	r3, [r7, #48]	; 0x30

    temp = (int16_t)(data[6] << 8 | data[7]);
 80059b0:	7cbb      	ldrb	r3, [r7, #18]
 80059b2:	021b      	lsls	r3, r3, #8
 80059b4:	b21a      	sxth	r2, r3
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b21b      	sxth	r3, r3
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fb f984 	bl	8000ccc <__aeabi_i2f>
 80059c4:	4602      	mov	r2, r0
 80059c6:	4b8f      	ldr	r3, [pc, #572]	; (8005c04 <process_MPU+0x2ec>)
 80059c8:	601a      	str	r2, [r3, #0]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80059ca:	7d3b      	ldrb	r3, [r7, #20]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	b21a      	sxth	r2, r3
 80059d0:	7d7b      	ldrb	r3, [r7, #21]
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	4313      	orrs	r3, r2
 80059d6:	b21b      	sxth	r3, r3
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fb f977 	bl	8000ccc <__aeabi_i2f>
 80059de:	4603      	mov	r3, r0
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80059e2:	7dbb      	ldrb	r3, [r7, #22]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	b21a      	sxth	r2, r3
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	b21b      	sxth	r3, r3
 80059ec:	4313      	orrs	r3, r2
 80059ee:	b21b      	sxth	r3, r3
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fb f96b 	bl	8000ccc <__aeabi_i2f>
 80059f6:	4603      	mov	r3, r0
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 80059fa:	7e3b      	ldrb	r3, [r7, #24]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	b21a      	sxth	r2, r3
 8005a00:	7e7b      	ldrb	r3, [r7, #25]
 8005a02:	b21b      	sxth	r3, r3
 8005a04:	4313      	orrs	r3, r2
 8005a06:	b21b      	sxth	r3, r3
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fb f95f 	bl	8000ccc <__aeabi_i2f>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24

	Acc_x = (Acc_x - bAx)/((float)accel_factor);
 8005a12:	4b7d      	ldr	r3, [pc, #500]	; (8005c08 <process_MPU+0x2f0>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a1a:	f7fb f8a1 	bl	8000b60 <__aeabi_fsub>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fb fa59 	bl	8000edc <__aeabi_fdiv>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	63bb      	str	r3, [r7, #56]	; 0x38
	Acc_y = (Acc_y - bAy)/((float)accel_factor);
 8005a2e:	4b77      	ldr	r3, [pc, #476]	; (8005c0c <process_MPU+0x2f4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4619      	mov	r1, r3
 8005a34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a36:	f7fb f893 	bl	8000b60 <__aeabi_fsub>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fb fa4b 	bl	8000edc <__aeabi_fdiv>
 8005a46:	4603      	mov	r3, r0
 8005a48:	637b      	str	r3, [r7, #52]	; 0x34
	Acc_z = (Acc_z - bAz)/((float)accel_factor);
 8005a4a:	4b71      	ldr	r3, [pc, #452]	; (8005c10 <process_MPU+0x2f8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a52:	f7fb f885 	bl	8000b60 <__aeabi_fsub>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fb fa3d 	bl	8000edc <__aeabi_fdiv>
 8005a62:	4603      	mov	r3, r0
 8005a64:	633b      	str	r3, [r7, #48]	; 0x30

	Gyro_x = (Gyro_x - bGx)/gyro_factor;
 8005a66:	4b6b      	ldr	r3, [pc, #428]	; (8005c14 <process_MPU+0x2fc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a6e:	f7fb f877 	bl	8000b60 <__aeabi_fsub>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fa fccf 	bl	8000418 <__aeabi_f2d>
 8005a7a:	a35d      	add	r3, pc, #372	; (adr r3, 8005bf0 <process_MPU+0x2d8>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f7fa fe4c 	bl	800071c <__aeabi_ddiv>
 8005a84:	4603      	mov	r3, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	f7fb f814 	bl	8000ab8 <__aeabi_d2f>
 8005a90:	4603      	mov	r3, r0
 8005a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	Gyro_y = (Gyro_y - bGy)/gyro_factor;
 8005a94:	4b60      	ldr	r3, [pc, #384]	; (8005c18 <process_MPU+0x300>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9c:	f7fb f860 	bl	8000b60 <__aeabi_fsub>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fa fcb8 	bl	8000418 <__aeabi_f2d>
 8005aa8:	a351      	add	r3, pc, #324	; (adr r3, 8005bf0 <process_MPU+0x2d8>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fe35 	bl	800071c <__aeabi_ddiv>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f7fa fffd 	bl	8000ab8 <__aeabi_d2f>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
	Gyro_z = (Gyro_z - bGz)/gyro_factor;
 8005ac2:	4b56      	ldr	r3, [pc, #344]	; (8005c1c <process_MPU+0x304>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aca:	f7fb f849 	bl	8000b60 <__aeabi_fsub>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fa fca1 	bl	8000418 <__aeabi_f2d>
 8005ad6:	a346      	add	r3, pc, #280	; (adr r3, 8005bf0 <process_MPU+0x2d8>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fe1e 	bl	800071c <__aeabi_ddiv>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	460c      	mov	r4, r1
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	f7fa ffe6 	bl	8000ab8 <__aeabi_d2f>
 8005aec:	4603      	mov	r3, r0
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24


	char buffer[7];
	char n = ' ';
 8005af0:	2320      	movs	r3, #32
 8005af2:	70fb      	strb	r3, [r7, #3]
	char r = '\n';
 8005af4:	230a      	movs	r3, #10
 8005af6:	70bb      	strb	r3, [r7, #2]
	roll = atan2(Acc_y,Acc_z)*RAD2DEC;
 8005af8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005afa:	f7fa fc8d 	bl	8000418 <__aeabi_f2d>
 8005afe:	4604      	mov	r4, r0
 8005b00:	460d      	mov	r5, r1
 8005b02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b04:	f7fa fc88 	bl	8000418 <__aeabi_f2d>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	f000 fe08 	bl	8006724 <atan2>
 8005b14:	a338      	add	r3, pc, #224	; (adr r3, 8005bf8 <process_MPU+0x2e0>)
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f7fa fcd5 	bl	80004c8 <__aeabi_dmul>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	4618      	mov	r0, r3
 8005b24:	4621      	mov	r1, r4
 8005b26:	f7fa ffc7 	bl	8000ab8 <__aeabi_d2f>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	623b      	str	r3, [r7, #32]
	//roll = atan2(Acc_y,Acc_z)*RAD2DEC;
	pitch = atan(-Acc_x/sqrt(Acc_y*Acc_y+Acc_z*Acc_z))*RAD2DEC;
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fa fc6f 	bl	8000418 <__aeabi_f2d>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005b40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005b42:	f7fb f917 	bl	8000d74 <__aeabi_fmul>
 8005b46:	4603      	mov	r3, r0
 8005b48:	461e      	mov	r6, r3
 8005b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4e:	f7fb f911 	bl	8000d74 <__aeabi_fmul>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4619      	mov	r1, r3
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7fb f804 	bl	8000b64 <__addsf3>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fa fc5a 	bl	8000418 <__aeabi_f2d>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f000 fddc 	bl	8006728 <sqrt>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4620      	mov	r0, r4
 8005b76:	4629      	mov	r1, r5
 8005b78:	f7fa fdd0 	bl	800071c <__aeabi_ddiv>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	460c      	mov	r4, r1
 8005b80:	4618      	mov	r0, r3
 8005b82:	4621      	mov	r1, r4
 8005b84:	f000 fc40 	bl	8006408 <atan>
 8005b88:	a31b      	add	r3, pc, #108	; (adr r3, 8005bf8 <process_MPU+0x2e0>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fc9b 	bl	80004c8 <__aeabi_dmul>
 8005b92:	4603      	mov	r3, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	4618      	mov	r0, r3
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f7fa ff8d 	bl	8000ab8 <__aeabi_d2f>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	61fb      	str	r3, [r7, #28]


	complementary_filter(pitch,Gyro_x,0.01);
 8005ba2:	4a1f      	ldr	r2, [pc, #124]	; (8005c20 <process_MPU+0x308>)
 8005ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ba6:	69f8      	ldr	r0, [r7, #28]
 8005ba8:	f000 f842 	bl	8005c30 <complementary_filter>

    ftoa(com_angle, buffer, 2);
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <process_MPU+0x30c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fa fc31 	bl	8000418 <__aeabi_f2d>
 8005bb6:	1d3a      	adds	r2, r7, #4
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f7ff fce1 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005bbe:	1d39      	adds	r1, r7, #4
 8005bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bc4:	2205      	movs	r2, #5
 8005bc6:	4818      	ldr	r0, [pc, #96]	; (8005c28 <process_MPU+0x310>)
 8005bc8:	f7fe faae 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005bcc:	1cf9      	adds	r1, r7, #3
 8005bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4814      	ldr	r0, [pc, #80]	; (8005c28 <process_MPU+0x310>)
 8005bd6:	f7fe faa7 	bl	8004128 <HAL_UART_Transmit>
//    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
//    HAL_UART_Transmit(&huart1, &n, 1, 1000);
//
//    ftoa(Gyro_z, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 7, 1000);
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8005bda:	1cb9      	adds	r1, r7, #2
 8005bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005be0:	2201      	movs	r2, #1
 8005be2:	4811      	ldr	r0, [pc, #68]	; (8005c28 <process_MPU+0x310>)
 8005be4:	f7fe faa0 	bl	8004128 <HAL_UART_Transmit>
}
 8005be8:	bf00      	nop
 8005bea:	3744      	adds	r7, #68	; 0x44
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf0:	66666666 	.word	0x66666666
 8005bf4:	40306666 	.word	0x40306666
 8005bf8:	1a5d2372 	.word	0x1a5d2372
 8005bfc:	404ca5dc 	.word	0x404ca5dc
 8005c00:	20000270 	.word	0x20000270
 8005c04:	200002d8 	.word	0x200002d8
 8005c08:	200003c0 	.word	0x200003c0
 8005c0c:	20000360 	.word	0x20000360
 8005c10:	20000410 	.word	0x20000410
 8005c14:	200003ac 	.word	0x200003ac
 8005c18:	200002c4 	.word	0x200002c4
 8005c1c:	20000414 	.word	0x20000414
 8005c20:	3c23d70a 	.word	0x3c23d70a
 8005c24:	2000026c 	.word	0x2000026c
 8005c28:	20000320 	.word	0x20000320
 8005c2c:	00000000 	.word	0x00000000

08005c30 <complementary_filter>:
void complementary_filter(float angle_acc,float gyro_rate,float dt){
 8005c30:	b5b0      	push	{r4, r5, r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
	com_angle = alpha*(com_angle + dt*gyro_rate) + (1-alpha)*angle_acc;
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb f898 	bl	8000d74 <__aeabi_fmul>
 8005c44:	4603      	mov	r3, r0
 8005c46:	461a      	mov	r2, r3
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <complementary_filter+0x88>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7fa ff88 	bl	8000b64 <__addsf3>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fa fbde 	bl	8000418 <__aeabi_f2d>
 8005c5c:	a312      	add	r3, pc, #72	; (adr r3, 8005ca8 <complementary_filter+0x78>)
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f7fa fc31 	bl	80004c8 <__aeabi_dmul>
 8005c66:	4603      	mov	r3, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	4625      	mov	r5, r4
 8005c6c:	461c      	mov	r4, r3
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7fa fbd2 	bl	8000418 <__aeabi_f2d>
 8005c74:	a30e      	add	r3, pc, #56	; (adr r3, 8005cb0 <complementary_filter+0x80>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fc25 	bl	80004c8 <__aeabi_dmul>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa fa69 	bl	800015c <__adddf3>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	4621      	mov	r1, r4
 8005c92:	f7fa ff11 	bl	8000ab8 <__aeabi_d2f>
 8005c96:	4602      	mov	r2, r0
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <complementary_filter+0x88>)
 8005c9a:	601a      	str	r2, [r3, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	eb851eb8 	.word	0xeb851eb8
 8005cac:	3feeb851 	.word	0x3feeb851
 8005cb0:	47ae1480 	.word	0x47ae1480
 8005cb4:	3fa47ae1 	.word	0x3fa47ae1
 8005cb8:	2000026c 	.word	0x2000026c

08005cbc <calib_MPU>:
void calib_MPU(){
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b090      	sub	sp, #64	; 0x40
 8005cc0:	af02      	add	r7, sp, #8

	float Acc_x,Acc_y,Acc_z,Gyro_x,Gyro_y,Gyro_z,roll,pitch;

		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8005cc2:	233b      	movs	r3, #59	; 0x3b
 8005cc4:	72fb      	strb	r3, [r7, #11]
		uint8_t device_address = MPU_ADDRESS;
 8005cc6:	23d0      	movs	r3, #208	; 0xd0
 8005cc8:	76fb      	strb	r3, [r7, #27]
	    uint8_t register_address = WHO_AM_I_REG;
 8005cca:	2375      	movs	r3, #117	; 0x75
 8005ccc:	76bb      	strb	r3, [r7, #26]
     for(int i = 0; i<100;i++){
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
 8005cd2:	e086      	b.n	8005de2 <calib_MPU+0x126>
		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8005cd4:	bf00      	nop
 8005cd6:	7efb      	ldrb	r3, [r7, #27]
 8005cd8:	b299      	uxth	r1, r3
 8005cda:	f107 020b 	add.w	r2, r7, #11
 8005cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	48a8      	ldr	r0, [pc, #672]	; (8005f88 <calib_MPU+0x2cc>)
 8005ce8:	f7fb ff00 	bl	8001aec <HAL_I2C_Master_Transmit>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <calib_MPU+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8005cf2:	bf00      	nop
 8005cf4:	7efb      	ldrb	r3, [r7, #27]
 8005cf6:	b299      	uxth	r1, r3
 8005cf8:	f107 020c 	add.w	r2, r7, #12
 8005cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	230e      	movs	r3, #14
 8005d04:	48a0      	ldr	r0, [pc, #640]	; (8005f88 <calib_MPU+0x2cc>)
 8005d06:	f7fb ffff 	bl	8001d08 <HAL_I2C_Master_Receive>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1f1      	bne.n	8005cf4 <calib_MPU+0x38>

		Acc_x += (int16_t)(data[0] << 8 | data[1]);
 8005d10:	7b3b      	ldrb	r3, [r7, #12]
 8005d12:	021b      	lsls	r3, r3, #8
 8005d14:	b21a      	sxth	r2, r3
 8005d16:	7b7b      	ldrb	r3, [r7, #13]
 8005d18:	b21b      	sxth	r3, r3
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	b21b      	sxth	r3, r3
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fa ffd4 	bl	8000ccc <__aeabi_i2f>
 8005d24:	4603      	mov	r3, r0
 8005d26:	4619      	mov	r1, r3
 8005d28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d2a:	f7fa ff1b 	bl	8000b64 <__addsf3>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
		Acc_y += (int16_t)(data[2] << 8 | data[3]);
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	b21a      	sxth	r2, r3
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b21b      	sxth	r3, r3
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fa ffc3 	bl	8000ccc <__aeabi_i2f>
 8005d46:	4603      	mov	r3, r0
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d4c:	f7fa ff0a 	bl	8000b64 <__addsf3>
 8005d50:	4603      	mov	r3, r0
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
		Acc_z += (int16_t)(data[4] << 8 | data[5]);
 8005d54:	7c3b      	ldrb	r3, [r7, #16]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b21a      	sxth	r2, r3
 8005d5a:	7c7b      	ldrb	r3, [r7, #17]
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	b21b      	sxth	r3, r3
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fa ffb2 	bl	8000ccc <__aeabi_i2f>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d6e:	f7fa fef9 	bl	8000b64 <__addsf3>
 8005d72:	4603      	mov	r3, r0
 8005d74:	62fb      	str	r3, [r7, #44]	; 0x2c

       //	    temp = (int16_t)(data[6] << 8 | data[7]);

	    Gyro_x += (int16_t)(data[8] << 8 | data[9]);
 8005d76:	7d3b      	ldrb	r3, [r7, #20]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	b21a      	sxth	r2, r3
 8005d7c:	7d7b      	ldrb	r3, [r7, #21]
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fa ffa1 	bl	8000ccc <__aeabi_i2f>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d90:	f7fa fee8 	bl	8000b64 <__addsf3>
 8005d94:	4603      	mov	r3, r0
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
	    Gyro_y += (int16_t)(data[10] << 8 | data[11]);
 8005d98:	7dbb      	ldrb	r3, [r7, #22]
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	b21a      	sxth	r2, r3
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	b21b      	sxth	r3, r3
 8005da2:	4313      	orrs	r3, r2
 8005da4:	b21b      	sxth	r3, r3
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fa ff90 	bl	8000ccc <__aeabi_i2f>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4619      	mov	r1, r3
 8005db0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005db2:	f7fa fed7 	bl	8000b64 <__addsf3>
 8005db6:	4603      	mov	r3, r0
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
	    Gyro_z += (int16_t)(data[12] << 8 | data[13]);
 8005dba:	7e3b      	ldrb	r3, [r7, #24]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	b21a      	sxth	r2, r3
 8005dc0:	7e7b      	ldrb	r3, [r7, #25]
 8005dc2:	b21b      	sxth	r3, r3
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	b21b      	sxth	r3, r3
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fa ff7f 	bl	8000ccc <__aeabi_i2f>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	6a38      	ldr	r0, [r7, #32]
 8005dd4:	f7fa fec6 	bl	8000b64 <__addsf3>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	623b      	str	r3, [r7, #32]
     for(int i = 0; i<100;i++){
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	3301      	adds	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	2b63      	cmp	r3, #99	; 0x63
 8005de6:	f77f af75 	ble.w	8005cd4 <calib_MPU+0x18>
     }
     	Acc_x = Acc_x/100;
 8005dea:	4968      	ldr	r1, [pc, #416]	; (8005f8c <calib_MPU+0x2d0>)
 8005dec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dee:	f7fb f875 	bl	8000edc <__aeabi_fdiv>
 8005df2:	4603      	mov	r3, r0
 8005df4:	637b      	str	r3, [r7, #52]	; 0x34
     	Acc_y = Acc_y/100;
 8005df6:	4965      	ldr	r1, [pc, #404]	; (8005f8c <calib_MPU+0x2d0>)
 8005df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dfa:	f7fb f86f 	bl	8000edc <__aeabi_fdiv>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30
     	Acc_z = Acc_z/100;
 8005e02:	4962      	ldr	r1, [pc, #392]	; (8005f8c <calib_MPU+0x2d0>)
 8005e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e06:	f7fb f869 	bl	8000edc <__aeabi_fdiv>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

     	Gyro_x = Gyro_x/100;
 8005e0e:	495f      	ldr	r1, [pc, #380]	; (8005f8c <calib_MPU+0x2d0>)
 8005e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e12:	f7fb f863 	bl	8000edc <__aeabi_fdiv>
 8005e16:	4603      	mov	r3, r0
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
     	Gyro_y = Gyro_y/100;
 8005e1a:	495c      	ldr	r1, [pc, #368]	; (8005f8c <calib_MPU+0x2d0>)
 8005e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e1e:	f7fb f85d 	bl	8000edc <__aeabi_fdiv>
 8005e22:	4603      	mov	r3, r0
 8005e24:	627b      	str	r3, [r7, #36]	; 0x24
     	Gyro_z = Gyro_z/100;
 8005e26:	4959      	ldr	r1, [pc, #356]	; (8005f8c <calib_MPU+0x2d0>)
 8005e28:	6a38      	ldr	r0, [r7, #32]
 8005e2a:	f7fb f857 	bl	8000edc <__aeabi_fdiv>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	623b      	str	r3, [r7, #32]

    bAx = Acc_x;
 8005e32:	4a57      	ldr	r2, [pc, #348]	; (8005f90 <calib_MPU+0x2d4>)
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	6013      	str	r3, [r2, #0]
    bAy = Acc_y;
 8005e38:	4a56      	ldr	r2, [pc, #344]	; (8005f94 <calib_MPU+0x2d8>)
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	6013      	str	r3, [r2, #0]
    bAz = Acc_z - 16384;
 8005e3e:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8005e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e44:	f7fa fe8c 	bl	8000b60 <__aeabi_fsub>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	4b52      	ldr	r3, [pc, #328]	; (8005f98 <calib_MPU+0x2dc>)
 8005e4e:	601a      	str	r2, [r3, #0]

    bGx = Gyro_x;
 8005e50:	4a52      	ldr	r2, [pc, #328]	; (8005f9c <calib_MPU+0x2e0>)
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	6013      	str	r3, [r2, #0]
    bGy = Gyro_y;
 8005e56:	4a52      	ldr	r2, [pc, #328]	; (8005fa0 <calib_MPU+0x2e4>)
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	6013      	str	r3, [r2, #0]
    bGz = Gyro_z;
 8005e5c:	4a51      	ldr	r2, [pc, #324]	; (8005fa4 <calib_MPU+0x2e8>)
 8005e5e:	6a3b      	ldr	r3, [r7, #32]
 8005e60:	6013      	str	r3, [r2, #0]

	char buffer[5];
	char n = ' ';
 8005e62:	2320      	movs	r3, #32
 8005e64:	70fb      	strb	r3, [r7, #3]
	char r = '\n';
 8005e66:	230a      	movs	r3, #10
 8005e68:	70bb      	strb	r3, [r7, #2]
//
//    ftoa(bGz, buffer, 2);
//    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
//    HAL_UART_Transmit(&huart1, &r, 1, 1000);
//
    ftoa(bAx, buffer, 2);
 8005e6a:	4b49      	ldr	r3, [pc, #292]	; (8005f90 <calib_MPU+0x2d4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fa fad2 	bl	8000418 <__aeabi_f2d>
 8005e74:	1d3a      	adds	r2, r7, #4
 8005e76:	2302      	movs	r3, #2
 8005e78:	f7ff fb82 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005e7c:	1d39      	adds	r1, r7, #4
 8005e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e82:	2205      	movs	r2, #5
 8005e84:	4848      	ldr	r0, [pc, #288]	; (8005fa8 <calib_MPU+0x2ec>)
 8005e86:	f7fe f94f 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005e8a:	1cf9      	adds	r1, r7, #3
 8005e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e90:	2201      	movs	r2, #1
 8005e92:	4845      	ldr	r0, [pc, #276]	; (8005fa8 <calib_MPU+0x2ec>)
 8005e94:	f7fe f948 	bl	8004128 <HAL_UART_Transmit>

    ftoa(bAy, buffer, 2);
 8005e98:	4b3e      	ldr	r3, [pc, #248]	; (8005f94 <calib_MPU+0x2d8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fa fabb 	bl	8000418 <__aeabi_f2d>
 8005ea2:	1d3a      	adds	r2, r7, #4
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f7ff fb6b 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005eaa:	1d39      	adds	r1, r7, #4
 8005eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb0:	2205      	movs	r2, #5
 8005eb2:	483d      	ldr	r0, [pc, #244]	; (8005fa8 <calib_MPU+0x2ec>)
 8005eb4:	f7fe f938 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005eb8:	1cf9      	adds	r1, r7, #3
 8005eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	4839      	ldr	r0, [pc, #228]	; (8005fa8 <calib_MPU+0x2ec>)
 8005ec2:	f7fe f931 	bl	8004128 <HAL_UART_Transmit>

    ftoa(bAz, buffer, 2);
 8005ec6:	4b34      	ldr	r3, [pc, #208]	; (8005f98 <calib_MPU+0x2dc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7fa faa4 	bl	8000418 <__aeabi_f2d>
 8005ed0:	1d3a      	adds	r2, r7, #4
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	f7ff fb54 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005ed8:	1d39      	adds	r1, r7, #4
 8005eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ede:	2205      	movs	r2, #5
 8005ee0:	4831      	ldr	r0, [pc, #196]	; (8005fa8 <calib_MPU+0x2ec>)
 8005ee2:	f7fe f921 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005ee6:	1cf9      	adds	r1, r7, #3
 8005ee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eec:	2201      	movs	r2, #1
 8005eee:	482e      	ldr	r0, [pc, #184]	; (8005fa8 <calib_MPU+0x2ec>)
 8005ef0:	f7fe f91a 	bl	8004128 <HAL_UART_Transmit>

    ftoa(bGx, buffer, 2);
 8005ef4:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <calib_MPU+0x2e0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fa fa8d 	bl	8000418 <__aeabi_f2d>
 8005efe:	1d3a      	adds	r2, r7, #4
 8005f00:	2302      	movs	r3, #2
 8005f02:	f7ff fb3d 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005f06:	1d39      	adds	r1, r7, #4
 8005f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	4826      	ldr	r0, [pc, #152]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f10:	f7fe f90a 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005f14:	1cf9      	adds	r1, r7, #3
 8005f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4822      	ldr	r0, [pc, #136]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f1e:	f7fe f903 	bl	8004128 <HAL_UART_Transmit>

    ftoa(bGy, buffer, 2);
 8005f22:	4b1f      	ldr	r3, [pc, #124]	; (8005fa0 <calib_MPU+0x2e4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fa fa76 	bl	8000418 <__aeabi_f2d>
 8005f2c:	1d3a      	adds	r2, r7, #4
 8005f2e:	2302      	movs	r3, #2
 8005f30:	f7ff fb26 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005f34:	1d39      	adds	r1, r7, #4
 8005f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f3a:	2205      	movs	r2, #5
 8005f3c:	481a      	ldr	r0, [pc, #104]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f3e:	f7fe f8f3 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &n, 1, 1000);
 8005f42:	1cf9      	adds	r1, r7, #3
 8005f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f48:	2201      	movs	r2, #1
 8005f4a:	4817      	ldr	r0, [pc, #92]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f4c:	f7fe f8ec 	bl	8004128 <HAL_UART_Transmit>

    ftoa(bGz, buffer, 2);
 8005f50:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <calib_MPU+0x2e8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fa fa5f 	bl	8000418 <__aeabi_f2d>
 8005f5a:	1d3a      	adds	r2, r7, #4
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	f7ff fb0f 	bl	8005580 <ftoa>
    HAL_UART_Transmit(&huart1, buffer, 5, 1000);
 8005f62:	1d39      	adds	r1, r7, #4
 8005f64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f68:	2205      	movs	r2, #5
 8005f6a:	480f      	ldr	r0, [pc, #60]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f6c:	f7fe f8dc 	bl	8004128 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, &r, 1, 1000);
 8005f70:	1cb9      	adds	r1, r7, #2
 8005f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f76:	2201      	movs	r2, #1
 8005f78:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <calib_MPU+0x2ec>)
 8005f7a:	f7fe f8d5 	bl	8004128 <HAL_UART_Transmit>
}
 8005f7e:	bf00      	nop
 8005f80:	3738      	adds	r7, #56	; 0x38
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000270 	.word	0x20000270
 8005f8c:	42c80000 	.word	0x42c80000
 8005f90:	200003c0 	.word	0x200003c0
 8005f94:	20000360 	.word	0x20000360
 8005f98:	20000410 	.word	0x20000410
 8005f9c:	200003ac 	.word	0x200003ac
 8005fa0:	200002c4 	.word	0x200002c4
 8005fa4:	20000414 	.word	0x20000414
 8005fa8:	20000320 	.word	0x20000320

08005fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <HAL_MspInit+0x5c>)
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <HAL_MspInit+0x5c>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	6193      	str	r3, [r2, #24]
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <HAL_MspInit+0x5c>)
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_MspInit+0x5c>)
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_MspInit+0x5c>)
 8005fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd4:	61d3      	str	r3, [r2, #28]
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_MspInit+0x5c>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_MspInit+0x60>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_MspInit+0x60>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	40021000 	.word	0x40021000
 800600c:	40010000 	.word	0x40010000

08006010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a15      	ldr	r2, [pc, #84]	; (8006080 <HAL_I2C_MspInit+0x70>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d123      	bne.n	8006078 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006030:	4b14      	ldr	r3, [pc, #80]	; (8006084 <HAL_I2C_MspInit+0x74>)
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <HAL_I2C_MspInit+0x74>)
 8006036:	f043 0308 	orr.w	r3, r3, #8
 800603a:	6193      	str	r3, [r2, #24]
 800603c:	4b11      	ldr	r3, [pc, #68]	; (8006084 <HAL_I2C_MspInit+0x74>)
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	60fb      	str	r3, [r7, #12]
 8006046:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006048:	23c0      	movs	r3, #192	; 0xc0
 800604a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800604c:	2312      	movs	r3, #18
 800604e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006050:	2303      	movs	r3, #3
 8006052:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	4619      	mov	r1, r3
 800605a:	480b      	ldr	r0, [pc, #44]	; (8006088 <HAL_I2C_MspInit+0x78>)
 800605c:	f7fb fa0a 	bl	8001474 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <HAL_I2C_MspInit+0x74>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	4a07      	ldr	r2, [pc, #28]	; (8006084 <HAL_I2C_MspInit+0x74>)
 8006066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800606a:	61d3      	str	r3, [r2, #28]
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <HAL_I2C_MspInit+0x74>)
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006074:	60bb      	str	r3, [r7, #8]
 8006076:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006078:	bf00      	nop
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40005400 	.word	0x40005400
 8006084:	40021000 	.word	0x40021000
 8006088:	40010c00 	.word	0x40010c00

0800608c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <HAL_TIM_Base_MspInit+0x44>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d113      	bne.n	80060c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800609e:	4b0d      	ldr	r3, [pc, #52]	; (80060d4 <HAL_TIM_Base_MspInit+0x48>)
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	4a0c      	ldr	r2, [pc, #48]	; (80060d4 <HAL_TIM_Base_MspInit+0x48>)
 80060a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060a8:	6193      	str	r3, [r2, #24]
 80060aa:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <HAL_TIM_Base_MspInit+0x48>)
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80060b6:	2200      	movs	r2, #0
 80060b8:	2100      	movs	r1, #0
 80060ba:	2019      	movs	r0, #25
 80060bc:	f7fb f91f 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80060c0:	2019      	movs	r0, #25
 80060c2:	f7fb f938 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40021000 	.word	0x40021000

080060d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e8:	d10b      	bne.n	8006102 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <HAL_TIM_PWM_MspInit+0x34>)
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	4a07      	ldr	r2, [pc, #28]	; (800610c <HAL_TIM_PWM_MspInit+0x34>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	61d3      	str	r3, [r2, #28]
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_TIM_PWM_MspInit+0x34>)
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr
 800610c:	40021000 	.word	0x40021000

08006110 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006118:	f107 0310 	add.w	r3, r7, #16
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIM_Encoder_MspInit+0x70>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d123      	bne.n	8006178 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006130:	4b14      	ldr	r3, [pc, #80]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	4a13      	ldr	r2, [pc, #76]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	61d3      	str	r3, [r2, #28]
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	4a0d      	ldr	r2, [pc, #52]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	6193      	str	r3, [r2, #24]
 8006154:	4b0b      	ldr	r3, [pc, #44]	; (8006184 <HAL_TIM_Encoder_MspInit+0x74>)
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006160:	23c0      	movs	r3, #192	; 0xc0
 8006162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616c:	f107 0310 	add.w	r3, r7, #16
 8006170:	4619      	mov	r1, r3
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <HAL_TIM_Encoder_MspInit+0x78>)
 8006174:	f7fb f97e 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8006178:	bf00      	nop
 800617a:	3720      	adds	r7, #32
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40000400 	.word	0x40000400
 8006184:	40021000 	.word	0x40021000
 8006188:	40010800 	.word	0x40010800

0800618c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006194:	f107 0310 	add.w	r3, r7, #16
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	605a      	str	r2, [r3, #4]
 800619e:	609a      	str	r2, [r3, #8]
 80061a0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d117      	bne.n	80061dc <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_TIM_MspPostInit+0x58>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	4a0c      	ldr	r2, [pc, #48]	; (80061e4 <HAL_TIM_MspPostInit+0x58>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	6193      	str	r3, [r2, #24]
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <HAL_TIM_MspPostInit+0x58>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80061c4:	230c      	movs	r3, #12
 80061c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061c8:	2302      	movs	r3, #2
 80061ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061cc:	2302      	movs	r3, #2
 80061ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061d0:	f107 0310 	add.w	r3, r7, #16
 80061d4:	4619      	mov	r1, r3
 80061d6:	4804      	ldr	r0, [pc, #16]	; (80061e8 <HAL_TIM_MspPostInit+0x5c>)
 80061d8:	f7fb f94c 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80061dc:	bf00      	nop
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40021000 	.word	0x40021000
 80061e8:	40010800 	.word	0x40010800

080061ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 0310 	add.w	r3, r7, #16
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a20      	ldr	r2, [pc, #128]	; (8006288 <HAL_UART_MspInit+0x9c>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d139      	bne.n	8006280 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <HAL_UART_MspInit+0xa0>)
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	4a1e      	ldr	r2, [pc, #120]	; (800628c <HAL_UART_MspInit+0xa0>)
 8006212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006216:	6193      	str	r3, [r2, #24]
 8006218:	4b1c      	ldr	r3, [pc, #112]	; (800628c <HAL_UART_MspInit+0xa0>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_UART_MspInit+0xa0>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4a18      	ldr	r2, [pc, #96]	; (800628c <HAL_UART_MspInit+0xa0>)
 800622a:	f043 0304 	orr.w	r3, r3, #4
 800622e:	6193      	str	r3, [r2, #24]
 8006230:	4b16      	ldr	r3, [pc, #88]	; (800628c <HAL_UART_MspInit+0xa0>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800623c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006242:	2302      	movs	r3, #2
 8006244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006246:	2303      	movs	r3, #3
 8006248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800624a:	f107 0310 	add.w	r3, r7, #16
 800624e:	4619      	mov	r1, r3
 8006250:	480f      	ldr	r0, [pc, #60]	; (8006290 <HAL_UART_MspInit+0xa4>)
 8006252:	f7fb f90f 	bl	8001474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800625a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006264:	f107 0310 	add.w	r3, r7, #16
 8006268:	4619      	mov	r1, r3
 800626a:	4809      	ldr	r0, [pc, #36]	; (8006290 <HAL_UART_MspInit+0xa4>)
 800626c:	f7fb f902 	bl	8001474 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	2100      	movs	r1, #0
 8006274:	2025      	movs	r0, #37	; 0x25
 8006276:	f7fb f842 	bl	80012fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800627a:	2025      	movs	r0, #37	; 0x25
 800627c:	f7fb f85b 	bl	8001336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006280:	bf00      	nop
 8006282:	3720      	adds	r7, #32
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40013800 	.word	0x40013800
 800628c:	40021000 	.word	0x40021000
 8006290:	40010800 	.word	0x40010800

08006294 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <HAL_UART_MspDeInit+0x38>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10d      	bne.n	80062c2 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_UART_MspDeInit+0x3c>)
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <HAL_UART_MspDeInit+0x3c>)
 80062ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b0:	6193      	str	r3, [r2, #24]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80062b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062b6:	4807      	ldr	r0, [pc, #28]	; (80062d4 <HAL_UART_MspDeInit+0x40>)
 80062b8:	f7fb fa3a 	bl	8001730 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80062bc:	2025      	movs	r0, #37	; 0x25
 80062be:	f7fb f848 	bl	8001352 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80062c2:	bf00      	nop
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40013800 	.word	0x40013800
 80062d0:	40021000 	.word	0x40021000
 80062d4:	40010800 	.word	0x40010800

080062d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062d8:	b480      	push	{r7}
 80062da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80062dc:	bf00      	nop
 80062de:	46bd      	mov	sp, r7
 80062e0:	bc80      	pop	{r7}
 80062e2:	4770      	bx	lr

080062e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062e8:	e7fe      	b.n	80062e8 <HardFault_Handler+0x4>

080062ea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062ea:	b480      	push	{r7}
 80062ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062ee:	e7fe      	b.n	80062ee <MemManage_Handler+0x4>

080062f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062f4:	e7fe      	b.n	80062f4 <BusFault_Handler+0x4>

080062f6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062f6:	b480      	push	{r7}
 80062f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062fa:	e7fe      	b.n	80062fa <UsageFault_Handler+0x4>

080062fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006300:	bf00      	nop
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006318:	bf00      	nop
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006324:	f7fa fee2 	bl	80010ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006328:	bf00      	nop
 800632a:	bd80      	pop	{r7, pc}

0800632c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006330:	4802      	ldr	r0, [pc, #8]	; (800633c <TIM1_UP_IRQHandler+0x10>)
 8006332:	f7fd f897 	bl	8003464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006336:	bf00      	nop
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000036c 	.word	0x2000036c

08006340 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006344:	4802      	ldr	r0, [pc, #8]	; (8006350 <USART1_IRQHandler+0x10>)
 8006346:	f7fe f883 	bl	8004450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000320 	.word	0x20000320

08006354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006358:	4b15      	ldr	r3, [pc, #84]	; (80063b0 <SystemInit+0x5c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <SystemInit+0x5c>)
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006364:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <SystemInit+0x5c>)
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	4911      	ldr	r1, [pc, #68]	; (80063b0 <SystemInit+0x5c>)
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <SystemInit+0x60>)
 800636c:	4013      	ands	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006370:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <SystemInit+0x5c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a0e      	ldr	r2, [pc, #56]	; (80063b0 <SystemInit+0x5c>)
 8006376:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800637a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800637e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <SystemInit+0x5c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a0a      	ldr	r2, [pc, #40]	; (80063b0 <SystemInit+0x5c>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800638a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800638c:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <SystemInit+0x5c>)
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <SystemInit+0x5c>)
 8006392:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006396:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <SystemInit+0x5c>)
 800639a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800639e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80063a0:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <SystemInit+0x64>)
 80063a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063a6:	609a      	str	r2, [r3, #8]
#endif 
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr
 80063b0:	40021000 	.word	0x40021000
 80063b4:	f8ff0000 	.word	0xf8ff0000
 80063b8:	e000ed00 	.word	0xe000ed00

080063bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80063bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80063be:	e003      	b.n	80063c8 <LoopCopyDataInit>

080063c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80063c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80063c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80063c6:	3104      	adds	r1, #4

080063c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80063c8:	480a      	ldr	r0, [pc, #40]	; (80063f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80063ca:	4b0b      	ldr	r3, [pc, #44]	; (80063f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80063cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80063ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80063d0:	d3f6      	bcc.n	80063c0 <CopyDataInit>
  ldr r2, =_sbss
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80063d4:	e002      	b.n	80063dc <LoopFillZerobss>

080063d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80063d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80063d8:	f842 3b04 	str.w	r3, [r2], #4

080063dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80063dc:	4b08      	ldr	r3, [pc, #32]	; (8006400 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80063de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80063e0:	d3f9      	bcc.n	80063d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80063e2:	f7ff ffb7 	bl	8006354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063e6:	f000 fb89 	bl	8006afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80063ea:	f7fe fe2b 	bl	8005044 <main>
  bx lr
 80063ee:	4770      	bx	lr
  ldr r3, =_sidata
 80063f0:	08006ed8 	.word	0x08006ed8
  ldr r0, =_sdata
 80063f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80063f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80063fc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8006400:	20000418 	.word	0x20000418

08006404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006404:	e7fe      	b.n	8006404 <ADC1_2_IRQHandler>
	...

08006408 <atan>:
 8006408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	4bb6      	ldr	r3, [pc, #728]	; (80066e8 <atan+0x2e0>)
 800640e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006412:	429e      	cmp	r6, r3
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	468b      	mov	fp, r1
 800641a:	dd17      	ble.n	800644c <atan+0x44>
 800641c:	4bb3      	ldr	r3, [pc, #716]	; (80066ec <atan+0x2e4>)
 800641e:	429e      	cmp	r6, r3
 8006420:	dc01      	bgt.n	8006426 <atan+0x1e>
 8006422:	d109      	bne.n	8006438 <atan+0x30>
 8006424:	b140      	cbz	r0, 8006438 <atan+0x30>
 8006426:	4622      	mov	r2, r4
 8006428:	462b      	mov	r3, r5
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7f9 fe95 	bl	800015c <__adddf3>
 8006432:	4604      	mov	r4, r0
 8006434:	460d      	mov	r5, r1
 8006436:	e005      	b.n	8006444 <atan+0x3c>
 8006438:	f1bb 0f00 	cmp.w	fp, #0
 800643c:	4cac      	ldr	r4, [pc, #688]	; (80066f0 <atan+0x2e8>)
 800643e:	f340 8121 	ble.w	8006684 <atan+0x27c>
 8006442:	4dac      	ldr	r5, [pc, #688]	; (80066f4 <atan+0x2ec>)
 8006444:	4620      	mov	r0, r4
 8006446:	4629      	mov	r1, r5
 8006448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	4baa      	ldr	r3, [pc, #680]	; (80066f8 <atan+0x2f0>)
 800644e:	429e      	cmp	r6, r3
 8006450:	dc11      	bgt.n	8006476 <atan+0x6e>
 8006452:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006456:	429e      	cmp	r6, r3
 8006458:	dc0a      	bgt.n	8006470 <atan+0x68>
 800645a:	a38b      	add	r3, pc, #556	; (adr r3, 8006688 <atan+0x280>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7f9 fe7c 	bl	800015c <__adddf3>
 8006464:	2200      	movs	r2, #0
 8006466:	4ba5      	ldr	r3, [pc, #660]	; (80066fc <atan+0x2f4>)
 8006468:	f7fa fabe 	bl	80009e8 <__aeabi_dcmpgt>
 800646c:	2800      	cmp	r0, #0
 800646e:	d1e9      	bne.n	8006444 <atan+0x3c>
 8006470:	f04f 3aff 	mov.w	sl, #4294967295
 8006474:	e027      	b.n	80064c6 <atan+0xbe>
 8006476:	f000 f951 	bl	800671c <fabs>
 800647a:	4ba1      	ldr	r3, [pc, #644]	; (8006700 <atan+0x2f8>)
 800647c:	4604      	mov	r4, r0
 800647e:	429e      	cmp	r6, r3
 8006480:	460d      	mov	r5, r1
 8006482:	f300 80b8 	bgt.w	80065f6 <atan+0x1ee>
 8006486:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800648a:	429e      	cmp	r6, r3
 800648c:	f300 809c 	bgt.w	80065c8 <atan+0x1c0>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	f7f9 fe62 	bl	800015c <__adddf3>
 8006498:	2200      	movs	r2, #0
 800649a:	4b98      	ldr	r3, [pc, #608]	; (80066fc <atan+0x2f4>)
 800649c:	f7f9 fe5c 	bl	8000158 <__aeabi_dsub>
 80064a0:	2200      	movs	r2, #0
 80064a2:	4606      	mov	r6, r0
 80064a4:	460f      	mov	r7, r1
 80064a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064aa:	4620      	mov	r0, r4
 80064ac:	4629      	mov	r1, r5
 80064ae:	f7f9 fe55 	bl	800015c <__adddf3>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa f92f 	bl	800071c <__aeabi_ddiv>
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	4604      	mov	r4, r0
 80064c4:	460d      	mov	r5, r1
 80064c6:	4622      	mov	r2, r4
 80064c8:	462b      	mov	r3, r5
 80064ca:	4620      	mov	r0, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	f7f9 fffb 	bl	80004c8 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4680      	mov	r8, r0
 80064d8:	4689      	mov	r9, r1
 80064da:	f7f9 fff5 	bl	80004c8 <__aeabi_dmul>
 80064de:	a36c      	add	r3, pc, #432	; (adr r3, 8006690 <atan+0x288>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	4606      	mov	r6, r0
 80064e6:	460f      	mov	r7, r1
 80064e8:	f7f9 ffee 	bl	80004c8 <__aeabi_dmul>
 80064ec:	a36a      	add	r3, pc, #424	; (adr r3, 8006698 <atan+0x290>)
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	f7f9 fe33 	bl	800015c <__adddf3>
 80064f6:	4632      	mov	r2, r6
 80064f8:	463b      	mov	r3, r7
 80064fa:	f7f9 ffe5 	bl	80004c8 <__aeabi_dmul>
 80064fe:	a368      	add	r3, pc, #416	; (adr r3, 80066a0 <atan+0x298>)
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7f9 fe2a 	bl	800015c <__adddf3>
 8006508:	4632      	mov	r2, r6
 800650a:	463b      	mov	r3, r7
 800650c:	f7f9 ffdc 	bl	80004c8 <__aeabi_dmul>
 8006510:	a365      	add	r3, pc, #404	; (adr r3, 80066a8 <atan+0x2a0>)
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f7f9 fe21 	bl	800015c <__adddf3>
 800651a:	4632      	mov	r2, r6
 800651c:	463b      	mov	r3, r7
 800651e:	f7f9 ffd3 	bl	80004c8 <__aeabi_dmul>
 8006522:	a363      	add	r3, pc, #396	; (adr r3, 80066b0 <atan+0x2a8>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f7f9 fe18 	bl	800015c <__adddf3>
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	f7f9 ffca 	bl	80004c8 <__aeabi_dmul>
 8006534:	a360      	add	r3, pc, #384	; (adr r3, 80066b8 <atan+0x2b0>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	f7f9 fe0f 	bl	800015c <__adddf3>
 800653e:	4642      	mov	r2, r8
 8006540:	464b      	mov	r3, r9
 8006542:	f7f9 ffc1 	bl	80004c8 <__aeabi_dmul>
 8006546:	a35e      	add	r3, pc, #376	; (adr r3, 80066c0 <atan+0x2b8>)
 8006548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654c:	4680      	mov	r8, r0
 800654e:	4689      	mov	r9, r1
 8006550:	4630      	mov	r0, r6
 8006552:	4639      	mov	r1, r7
 8006554:	f7f9 ffb8 	bl	80004c8 <__aeabi_dmul>
 8006558:	a35b      	add	r3, pc, #364	; (adr r3, 80066c8 <atan+0x2c0>)
 800655a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655e:	f7f9 fdfb 	bl	8000158 <__aeabi_dsub>
 8006562:	4632      	mov	r2, r6
 8006564:	463b      	mov	r3, r7
 8006566:	f7f9 ffaf 	bl	80004c8 <__aeabi_dmul>
 800656a:	a359      	add	r3, pc, #356	; (adr r3, 80066d0 <atan+0x2c8>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 fdf2 	bl	8000158 <__aeabi_dsub>
 8006574:	4632      	mov	r2, r6
 8006576:	463b      	mov	r3, r7
 8006578:	f7f9 ffa6 	bl	80004c8 <__aeabi_dmul>
 800657c:	a356      	add	r3, pc, #344	; (adr r3, 80066d8 <atan+0x2d0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	f7f9 fde9 	bl	8000158 <__aeabi_dsub>
 8006586:	4632      	mov	r2, r6
 8006588:	463b      	mov	r3, r7
 800658a:	f7f9 ff9d 	bl	80004c8 <__aeabi_dmul>
 800658e:	a354      	add	r3, pc, #336	; (adr r3, 80066e0 <atan+0x2d8>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7f9 fde0 	bl	8000158 <__aeabi_dsub>
 8006598:	4632      	mov	r2, r6
 800659a:	463b      	mov	r3, r7
 800659c:	f7f9 ff94 	bl	80004c8 <__aeabi_dmul>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4640      	mov	r0, r8
 80065a6:	4649      	mov	r1, r9
 80065a8:	f7f9 fdd8 	bl	800015c <__adddf3>
 80065ac:	4622      	mov	r2, r4
 80065ae:	462b      	mov	r3, r5
 80065b0:	f7f9 ff8a 	bl	80004c8 <__aeabi_dmul>
 80065b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	d144      	bne.n	8006648 <atan+0x240>
 80065be:	4620      	mov	r0, r4
 80065c0:	4629      	mov	r1, r5
 80065c2:	f7f9 fdc9 	bl	8000158 <__aeabi_dsub>
 80065c6:	e734      	b.n	8006432 <atan+0x2a>
 80065c8:	2200      	movs	r2, #0
 80065ca:	4b4c      	ldr	r3, [pc, #304]	; (80066fc <atan+0x2f4>)
 80065cc:	f7f9 fdc4 	bl	8000158 <__aeabi_dsub>
 80065d0:	2200      	movs	r2, #0
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	4b49      	ldr	r3, [pc, #292]	; (80066fc <atan+0x2f4>)
 80065d8:	4620      	mov	r0, r4
 80065da:	4629      	mov	r1, r5
 80065dc:	f7f9 fdbe 	bl	800015c <__adddf3>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4630      	mov	r0, r6
 80065e6:	4639      	mov	r1, r7
 80065e8:	f7fa f898 	bl	800071c <__aeabi_ddiv>
 80065ec:	f04f 0a01 	mov.w	sl, #1
 80065f0:	4604      	mov	r4, r0
 80065f2:	460d      	mov	r5, r1
 80065f4:	e767      	b.n	80064c6 <atan+0xbe>
 80065f6:	4b43      	ldr	r3, [pc, #268]	; (8006704 <atan+0x2fc>)
 80065f8:	429e      	cmp	r6, r3
 80065fa:	dc1a      	bgt.n	8006632 <atan+0x22a>
 80065fc:	2200      	movs	r2, #0
 80065fe:	4b42      	ldr	r3, [pc, #264]	; (8006708 <atan+0x300>)
 8006600:	f7f9 fdaa 	bl	8000158 <__aeabi_dsub>
 8006604:	2200      	movs	r2, #0
 8006606:	4606      	mov	r6, r0
 8006608:	460f      	mov	r7, r1
 800660a:	4b3f      	ldr	r3, [pc, #252]	; (8006708 <atan+0x300>)
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7f9 ff5a 	bl	80004c8 <__aeabi_dmul>
 8006614:	2200      	movs	r2, #0
 8006616:	4b39      	ldr	r3, [pc, #228]	; (80066fc <atan+0x2f4>)
 8006618:	f7f9 fda0 	bl	800015c <__adddf3>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4630      	mov	r0, r6
 8006622:	4639      	mov	r1, r7
 8006624:	f7fa f87a 	bl	800071c <__aeabi_ddiv>
 8006628:	f04f 0a02 	mov.w	sl, #2
 800662c:	4604      	mov	r4, r0
 800662e:	460d      	mov	r5, r1
 8006630:	e749      	b.n	80064c6 <atan+0xbe>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	2000      	movs	r0, #0
 8006638:	4934      	ldr	r1, [pc, #208]	; (800670c <atan+0x304>)
 800663a:	f7fa f86f 	bl	800071c <__aeabi_ddiv>
 800663e:	f04f 0a03 	mov.w	sl, #3
 8006642:	4604      	mov	r4, r0
 8006644:	460d      	mov	r5, r1
 8006646:	e73e      	b.n	80064c6 <atan+0xbe>
 8006648:	4b31      	ldr	r3, [pc, #196]	; (8006710 <atan+0x308>)
 800664a:	4e32      	ldr	r6, [pc, #200]	; (8006714 <atan+0x30c>)
 800664c:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006650:	4456      	add	r6, sl
 8006652:	449a      	add	sl, r3
 8006654:	e9da 2300 	ldrd	r2, r3, [sl]
 8006658:	f7f9 fd7e 	bl	8000158 <__aeabi_dsub>
 800665c:	4622      	mov	r2, r4
 800665e:	462b      	mov	r3, r5
 8006660:	f7f9 fd7a 	bl	8000158 <__aeabi_dsub>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	e9d6 0100 	ldrd	r0, r1, [r6]
 800666c:	f7f9 fd74 	bl	8000158 <__aeabi_dsub>
 8006670:	f1bb 0f00 	cmp.w	fp, #0
 8006674:	4604      	mov	r4, r0
 8006676:	460d      	mov	r5, r1
 8006678:	f6bf aee4 	bge.w	8006444 <atan+0x3c>
 800667c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006680:	461d      	mov	r5, r3
 8006682:	e6df      	b.n	8006444 <atan+0x3c>
 8006684:	4d24      	ldr	r5, [pc, #144]	; (8006718 <atan+0x310>)
 8006686:	e6dd      	b.n	8006444 <atan+0x3c>
 8006688:	8800759c 	.word	0x8800759c
 800668c:	7e37e43c 	.word	0x7e37e43c
 8006690:	e322da11 	.word	0xe322da11
 8006694:	3f90ad3a 	.word	0x3f90ad3a
 8006698:	24760deb 	.word	0x24760deb
 800669c:	3fa97b4b 	.word	0x3fa97b4b
 80066a0:	a0d03d51 	.word	0xa0d03d51
 80066a4:	3fb10d66 	.word	0x3fb10d66
 80066a8:	c54c206e 	.word	0xc54c206e
 80066ac:	3fb745cd 	.word	0x3fb745cd
 80066b0:	920083ff 	.word	0x920083ff
 80066b4:	3fc24924 	.word	0x3fc24924
 80066b8:	5555550d 	.word	0x5555550d
 80066bc:	3fd55555 	.word	0x3fd55555
 80066c0:	2c6a6c2f 	.word	0x2c6a6c2f
 80066c4:	bfa2b444 	.word	0xbfa2b444
 80066c8:	52defd9a 	.word	0x52defd9a
 80066cc:	3fadde2d 	.word	0x3fadde2d
 80066d0:	af749a6d 	.word	0xaf749a6d
 80066d4:	3fb3b0f2 	.word	0x3fb3b0f2
 80066d8:	fe231671 	.word	0xfe231671
 80066dc:	3fbc71c6 	.word	0x3fbc71c6
 80066e0:	9998ebc4 	.word	0x9998ebc4
 80066e4:	3fc99999 	.word	0x3fc99999
 80066e8:	440fffff 	.word	0x440fffff
 80066ec:	7ff00000 	.word	0x7ff00000
 80066f0:	54442d18 	.word	0x54442d18
 80066f4:	3ff921fb 	.word	0x3ff921fb
 80066f8:	3fdbffff 	.word	0x3fdbffff
 80066fc:	3ff00000 	.word	0x3ff00000
 8006700:	3ff2ffff 	.word	0x3ff2ffff
 8006704:	40037fff 	.word	0x40037fff
 8006708:	3ff80000 	.word	0x3ff80000
 800670c:	bff00000 	.word	0xbff00000
 8006710:	08006da0 	.word	0x08006da0
 8006714:	08006d80 	.word	0x08006d80
 8006718:	bff921fb 	.word	0xbff921fb

0800671c <fabs>:
 800671c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006720:	4619      	mov	r1, r3
 8006722:	4770      	bx	lr

08006724 <atan2>:
 8006724:	f000 b854 	b.w	80067d0 <__ieee754_atan2>

08006728 <sqrt>:
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672c:	b08b      	sub	sp, #44	; 0x2c
 800672e:	4604      	mov	r4, r0
 8006730:	460d      	mov	r5, r1
 8006732:	f000 f92b 	bl	800698c <__ieee754_sqrt>
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <sqrt+0xa0>)
 8006738:	4680      	mov	r8, r0
 800673a:	f993 a000 	ldrsb.w	sl, [r3]
 800673e:	4689      	mov	r9, r1
 8006740:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006744:	d02b      	beq.n	800679e <sqrt+0x76>
 8006746:	4622      	mov	r2, r4
 8006748:	462b      	mov	r3, r5
 800674a:	4620      	mov	r0, r4
 800674c:	4629      	mov	r1, r5
 800674e:	f7fa f955 	bl	80009fc <__aeabi_dcmpun>
 8006752:	4683      	mov	fp, r0
 8006754:	bb18      	cbnz	r0, 800679e <sqrt+0x76>
 8006756:	2600      	movs	r6, #0
 8006758:	2700      	movs	r7, #0
 800675a:	4632      	mov	r2, r6
 800675c:	463b      	mov	r3, r7
 800675e:	4620      	mov	r0, r4
 8006760:	4629      	mov	r1, r5
 8006762:	f7fa f923 	bl	80009ac <__aeabi_dcmplt>
 8006766:	b1d0      	cbz	r0, 800679e <sqrt+0x76>
 8006768:	2301      	movs	r3, #1
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4b17      	ldr	r3, [pc, #92]	; (80067cc <sqrt+0xa4>)
 800676e:	f8cd b020 	str.w	fp, [sp, #32]
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006778:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	d112      	bne.n	80067a8 <sqrt+0x80>
 8006782:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006786:	4668      	mov	r0, sp
 8006788:	f000 f9ac 	bl	8006ae4 <matherr>
 800678c:	b1b8      	cbz	r0, 80067be <sqrt+0x96>
 800678e:	9b08      	ldr	r3, [sp, #32]
 8006790:	b11b      	cbz	r3, 800679a <sqrt+0x72>
 8006792:	f000 f9ad 	bl	8006af0 <__errno>
 8006796:	9b08      	ldr	r3, [sp, #32]
 8006798:	6003      	str	r3, [r0, #0]
 800679a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	b00b      	add	sp, #44	; 0x2c
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	4630      	mov	r0, r6
 80067ae:	4639      	mov	r1, r7
 80067b0:	f7f9 ffb4 	bl	800071c <__aeabi_ddiv>
 80067b4:	f1ba 0f02 	cmp.w	sl, #2
 80067b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80067bc:	d1e3      	bne.n	8006786 <sqrt+0x5e>
 80067be:	f000 f997 	bl	8006af0 <__errno>
 80067c2:	2321      	movs	r3, #33	; 0x21
 80067c4:	6003      	str	r3, [r0, #0]
 80067c6:	e7e2      	b.n	800678e <sqrt+0x66>
 80067c8:	2000000c 	.word	0x2000000c
 80067cc:	08006dc0 	.word	0x08006dc0

080067d0 <__ieee754_atan2>:
 80067d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	4256      	negs	r6, r2
 80067d6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80067da:	4316      	orrs	r6, r2
 80067dc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006988 <__ieee754_atan2+0x1b8>
 80067e0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80067e4:	454e      	cmp	r6, r9
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	469e      	mov	lr, r3
 80067ec:	d808      	bhi.n	8006800 <__ieee754_atan2+0x30>
 80067ee:	4246      	negs	r6, r0
 80067f0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80067f4:	4306      	orrs	r6, r0
 80067f6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 80067fa:	454e      	cmp	r6, r9
 80067fc:	4688      	mov	r8, r1
 80067fe:	d906      	bls.n	800680e <__ieee754_atan2+0x3e>
 8006800:	4620      	mov	r0, r4
 8006802:	4629      	mov	r1, r5
 8006804:	f7f9 fcaa 	bl	800015c <__adddf3>
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	e030      	b.n	8006870 <__ieee754_atan2+0xa0>
 800680e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006812:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006816:	4316      	orrs	r6, r2
 8006818:	d103      	bne.n	8006822 <__ieee754_atan2+0x52>
 800681a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681e:	f7ff bdf3 	b.w	8006408 <atan>
 8006822:	179e      	asrs	r6, r3, #30
 8006824:	f006 0602 	and.w	r6, r6, #2
 8006828:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800682c:	ea57 0100 	orrs.w	r1, r7, r0
 8006830:	d107      	bne.n	8006842 <__ieee754_atan2+0x72>
 8006832:	2e02      	cmp	r6, #2
 8006834:	d079      	beq.n	800692a <__ieee754_atan2+0x15a>
 8006836:	2e03      	cmp	r6, #3
 8006838:	d11a      	bne.n	8006870 <__ieee754_atan2+0xa0>
 800683a:	a541      	add	r5, pc, #260	; (adr r5, 8006940 <__ieee754_atan2+0x170>)
 800683c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006840:	e016      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006842:	ea5c 0102 	orrs.w	r1, ip, r2
 8006846:	d106      	bne.n	8006856 <__ieee754_atan2+0x86>
 8006848:	f1b8 0f00 	cmp.w	r8, #0
 800684c:	da71      	bge.n	8006932 <__ieee754_atan2+0x162>
 800684e:	a53e      	add	r5, pc, #248	; (adr r5, 8006948 <__ieee754_atan2+0x178>)
 8006850:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006854:	e00c      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006856:	45cc      	cmp	ip, r9
 8006858:	d123      	bne.n	80068a2 <__ieee754_atan2+0xd2>
 800685a:	4567      	cmp	r7, ip
 800685c:	d114      	bne.n	8006888 <__ieee754_atan2+0xb8>
 800685e:	2e02      	cmp	r6, #2
 8006860:	d00a      	beq.n	8006878 <__ieee754_atan2+0xa8>
 8006862:	2e03      	cmp	r6, #3
 8006864:	d00c      	beq.n	8006880 <__ieee754_atan2+0xb0>
 8006866:	2e01      	cmp	r6, #1
 8006868:	d15b      	bne.n	8006922 <__ieee754_atan2+0x152>
 800686a:	a539      	add	r5, pc, #228	; (adr r5, 8006950 <__ieee754_atan2+0x180>)
 800686c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006870:	4620      	mov	r0, r4
 8006872:	4629      	mov	r1, r5
 8006874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006878:	a537      	add	r5, pc, #220	; (adr r5, 8006958 <__ieee754_atan2+0x188>)
 800687a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800687e:	e7f7      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006880:	a537      	add	r5, pc, #220	; (adr r5, 8006960 <__ieee754_atan2+0x190>)
 8006882:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006886:	e7f3      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006888:	2e02      	cmp	r6, #2
 800688a:	d04e      	beq.n	800692a <__ieee754_atan2+0x15a>
 800688c:	2e03      	cmp	r6, #3
 800688e:	d0d4      	beq.n	800683a <__ieee754_atan2+0x6a>
 8006890:	2e01      	cmp	r6, #1
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	d102      	bne.n	800689e <__ieee754_atan2+0xce>
 8006898:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800689c:	e7e8      	b.n	8006870 <__ieee754_atan2+0xa0>
 800689e:	2500      	movs	r5, #0
 80068a0:	e7e6      	b.n	8006870 <__ieee754_atan2+0xa0>
 80068a2:	454f      	cmp	r7, r9
 80068a4:	d0d0      	beq.n	8006848 <__ieee754_atan2+0x78>
 80068a6:	eba7 070c 	sub.w	r7, r7, ip
 80068aa:	153f      	asrs	r7, r7, #20
 80068ac:	2f3c      	cmp	r7, #60	; 0x3c
 80068ae:	dc1e      	bgt.n	80068ee <__ieee754_atan2+0x11e>
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da01      	bge.n	80068b8 <__ieee754_atan2+0xe8>
 80068b4:	373c      	adds	r7, #60	; 0x3c
 80068b6:	db1e      	blt.n	80068f6 <__ieee754_atan2+0x126>
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7f9 ff2e 	bl	800071c <__aeabi_ddiv>
 80068c0:	f7ff ff2c 	bl	800671c <fabs>
 80068c4:	f7ff fda0 	bl	8006408 <atan>
 80068c8:	4604      	mov	r4, r0
 80068ca:	460d      	mov	r5, r1
 80068cc:	2e01      	cmp	r6, #1
 80068ce:	d015      	beq.n	80068fc <__ieee754_atan2+0x12c>
 80068d0:	2e02      	cmp	r6, #2
 80068d2:	d017      	beq.n	8006904 <__ieee754_atan2+0x134>
 80068d4:	2e00      	cmp	r6, #0
 80068d6:	d0cb      	beq.n	8006870 <__ieee754_atan2+0xa0>
 80068d8:	a323      	add	r3, pc, #140	; (adr r3, 8006968 <__ieee754_atan2+0x198>)
 80068da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068de:	4620      	mov	r0, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	f7f9 fc39 	bl	8000158 <__aeabi_dsub>
 80068e6:	a322      	add	r3, pc, #136	; (adr r3, 8006970 <__ieee754_atan2+0x1a0>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	e016      	b.n	800691c <__ieee754_atan2+0x14c>
 80068ee:	a522      	add	r5, pc, #136	; (adr r5, 8006978 <__ieee754_atan2+0x1a8>)
 80068f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80068f4:	e7ea      	b.n	80068cc <__ieee754_atan2+0xfc>
 80068f6:	2400      	movs	r4, #0
 80068f8:	2500      	movs	r5, #0
 80068fa:	e7e7      	b.n	80068cc <__ieee754_atan2+0xfc>
 80068fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006900:	461d      	mov	r5, r3
 8006902:	e7b5      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006904:	a318      	add	r3, pc, #96	; (adr r3, 8006968 <__ieee754_atan2+0x198>)
 8006906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690a:	4620      	mov	r0, r4
 800690c:	4629      	mov	r1, r5
 800690e:	f7f9 fc23 	bl	8000158 <__aeabi_dsub>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	a116      	add	r1, pc, #88	; (adr r1, 8006970 <__ieee754_atan2+0x1a0>)
 8006918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800691c:	f7f9 fc1c 	bl	8000158 <__aeabi_dsub>
 8006920:	e772      	b.n	8006808 <__ieee754_atan2+0x38>
 8006922:	a517      	add	r5, pc, #92	; (adr r5, 8006980 <__ieee754_atan2+0x1b0>)
 8006924:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006928:	e7a2      	b.n	8006870 <__ieee754_atan2+0xa0>
 800692a:	a511      	add	r5, pc, #68	; (adr r5, 8006970 <__ieee754_atan2+0x1a0>)
 800692c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006930:	e79e      	b.n	8006870 <__ieee754_atan2+0xa0>
 8006932:	a511      	add	r5, pc, #68	; (adr r5, 8006978 <__ieee754_atan2+0x1a8>)
 8006934:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006938:	e79a      	b.n	8006870 <__ieee754_atan2+0xa0>
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
 8006940:	54442d18 	.word	0x54442d18
 8006944:	c00921fb 	.word	0xc00921fb
 8006948:	54442d18 	.word	0x54442d18
 800694c:	bff921fb 	.word	0xbff921fb
 8006950:	54442d18 	.word	0x54442d18
 8006954:	bfe921fb 	.word	0xbfe921fb
 8006958:	7f3321d2 	.word	0x7f3321d2
 800695c:	4002d97c 	.word	0x4002d97c
 8006960:	7f3321d2 	.word	0x7f3321d2
 8006964:	c002d97c 	.word	0xc002d97c
 8006968:	33145c07 	.word	0x33145c07
 800696c:	3ca1a626 	.word	0x3ca1a626
 8006970:	54442d18 	.word	0x54442d18
 8006974:	400921fb 	.word	0x400921fb
 8006978:	54442d18 	.word	0x54442d18
 800697c:	3ff921fb 	.word	0x3ff921fb
 8006980:	54442d18 	.word	0x54442d18
 8006984:	3fe921fb 	.word	0x3fe921fb
 8006988:	7ff00000 	.word	0x7ff00000

0800698c <__ieee754_sqrt>:
 800698c:	4b54      	ldr	r3, [pc, #336]	; (8006ae0 <__ieee754_sqrt+0x154>)
 800698e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006992:	438b      	bics	r3, r1
 8006994:	4606      	mov	r6, r0
 8006996:	460d      	mov	r5, r1
 8006998:	460a      	mov	r2, r1
 800699a:	460c      	mov	r4, r1
 800699c:	d10f      	bne.n	80069be <__ieee754_sqrt+0x32>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	f7f9 fd91 	bl	80004c8 <__aeabi_dmul>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4630      	mov	r0, r6
 80069ac:	4629      	mov	r1, r5
 80069ae:	f7f9 fbd5 	bl	800015c <__adddf3>
 80069b2:	4606      	mov	r6, r0
 80069b4:	460d      	mov	r5, r1
 80069b6:	4630      	mov	r0, r6
 80069b8:	4629      	mov	r1, r5
 80069ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069be:	2900      	cmp	r1, #0
 80069c0:	4607      	mov	r7, r0
 80069c2:	4603      	mov	r3, r0
 80069c4:	dc0e      	bgt.n	80069e4 <__ieee754_sqrt+0x58>
 80069c6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80069ca:	ea5c 0707 	orrs.w	r7, ip, r7
 80069ce:	d0f2      	beq.n	80069b6 <__ieee754_sqrt+0x2a>
 80069d0:	b141      	cbz	r1, 80069e4 <__ieee754_sqrt+0x58>
 80069d2:	4602      	mov	r2, r0
 80069d4:	460b      	mov	r3, r1
 80069d6:	f7f9 fbbf 	bl	8000158 <__aeabi_dsub>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	f7f9 fe9d 	bl	800071c <__aeabi_ddiv>
 80069e2:	e7e6      	b.n	80069b2 <__ieee754_sqrt+0x26>
 80069e4:	1512      	asrs	r2, r2, #20
 80069e6:	d074      	beq.n	8006ad2 <__ieee754_sqrt+0x146>
 80069e8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80069ec:	07d5      	lsls	r5, r2, #31
 80069ee:	f04f 0500 	mov.w	r5, #0
 80069f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80069f6:	bf48      	it	mi
 80069f8:	0fd9      	lsrmi	r1, r3, #31
 80069fa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80069fe:	bf44      	itt	mi
 8006a00:	005b      	lslmi	r3, r3, #1
 8006a02:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8006a06:	1051      	asrs	r1, r2, #1
 8006a08:	0fda      	lsrs	r2, r3, #31
 8006a0a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8006a0e:	4628      	mov	r0, r5
 8006a10:	2216      	movs	r2, #22
 8006a12:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	1987      	adds	r7, r0, r6
 8006a1a:	42a7      	cmp	r7, r4
 8006a1c:	bfde      	ittt	le
 8006a1e:	19b8      	addle	r0, r7, r6
 8006a20:	1be4      	suble	r4, r4, r7
 8006a22:	19ad      	addle	r5, r5, r6
 8006a24:	0fdf      	lsrs	r7, r3, #31
 8006a26:	3a01      	subs	r2, #1
 8006a28:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8006a2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a30:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a34:	d1f0      	bne.n	8006a18 <__ieee754_sqrt+0x8c>
 8006a36:	f04f 0c20 	mov.w	ip, #32
 8006a3a:	4696      	mov	lr, r2
 8006a3c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a40:	4284      	cmp	r4, r0
 8006a42:	eb06 070e 	add.w	r7, r6, lr
 8006a46:	dc02      	bgt.n	8006a4e <__ieee754_sqrt+0xc2>
 8006a48:	d112      	bne.n	8006a70 <__ieee754_sqrt+0xe4>
 8006a4a:	429f      	cmp	r7, r3
 8006a4c:	d810      	bhi.n	8006a70 <__ieee754_sqrt+0xe4>
 8006a4e:	2f00      	cmp	r7, #0
 8006a50:	eb07 0e06 	add.w	lr, r7, r6
 8006a54:	da42      	bge.n	8006adc <__ieee754_sqrt+0x150>
 8006a56:	f1be 0f00 	cmp.w	lr, #0
 8006a5a:	db3f      	blt.n	8006adc <__ieee754_sqrt+0x150>
 8006a5c:	f100 0801 	add.w	r8, r0, #1
 8006a60:	1a24      	subs	r4, r4, r0
 8006a62:	4640      	mov	r0, r8
 8006a64:	429f      	cmp	r7, r3
 8006a66:	bf88      	it	hi
 8006a68:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8006a6c:	1bdb      	subs	r3, r3, r7
 8006a6e:	4432      	add	r2, r6
 8006a70:	0064      	lsls	r4, r4, #1
 8006a72:	f1bc 0c01 	subs.w	ip, ip, #1
 8006a76:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8006a7a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006a7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006a82:	d1dd      	bne.n	8006a40 <__ieee754_sqrt+0xb4>
 8006a84:	4323      	orrs	r3, r4
 8006a86:	d006      	beq.n	8006a96 <__ieee754_sqrt+0x10a>
 8006a88:	1c54      	adds	r4, r2, #1
 8006a8a:	bf0b      	itete	eq
 8006a8c:	4662      	moveq	r2, ip
 8006a8e:	3201      	addne	r2, #1
 8006a90:	3501      	addeq	r5, #1
 8006a92:	f022 0201 	bicne.w	r2, r2, #1
 8006a96:	106b      	asrs	r3, r5, #1
 8006a98:	0852      	lsrs	r2, r2, #1
 8006a9a:	07e8      	lsls	r0, r5, #31
 8006a9c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006aa0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006aa4:	bf48      	it	mi
 8006aa6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006aaa:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8006aae:	4616      	mov	r6, r2
 8006ab0:	e781      	b.n	80069b6 <__ieee754_sqrt+0x2a>
 8006ab2:	0adc      	lsrs	r4, r3, #11
 8006ab4:	3915      	subs	r1, #21
 8006ab6:	055b      	lsls	r3, r3, #21
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	d0fa      	beq.n	8006ab2 <__ieee754_sqrt+0x126>
 8006abc:	02e6      	lsls	r6, r4, #11
 8006abe:	d50a      	bpl.n	8006ad6 <__ieee754_sqrt+0x14a>
 8006ac0:	f1c2 0020 	rsb	r0, r2, #32
 8006ac4:	fa23 f000 	lsr.w	r0, r3, r0
 8006ac8:	1e55      	subs	r5, r2, #1
 8006aca:	4093      	lsls	r3, r2
 8006acc:	4304      	orrs	r4, r0
 8006ace:	1b4a      	subs	r2, r1, r5
 8006ad0:	e78a      	b.n	80069e8 <__ieee754_sqrt+0x5c>
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	e7f0      	b.n	8006ab8 <__ieee754_sqrt+0x12c>
 8006ad6:	0064      	lsls	r4, r4, #1
 8006ad8:	3201      	adds	r2, #1
 8006ada:	e7ef      	b.n	8006abc <__ieee754_sqrt+0x130>
 8006adc:	4680      	mov	r8, r0
 8006ade:	e7bf      	b.n	8006a60 <__ieee754_sqrt+0xd4>
 8006ae0:	7ff00000 	.word	0x7ff00000

08006ae4 <matherr>:
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	4770      	bx	lr

08006ae8 <atoi>:
 8006ae8:	220a      	movs	r2, #10
 8006aea:	2100      	movs	r1, #0
 8006aec:	f000 b8ae 	b.w	8006c4c <strtol>

08006af0 <__errno>:
 8006af0:	4b01      	ldr	r3, [pc, #4]	; (8006af8 <__errno+0x8>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000010 	.word	0x20000010

08006afc <__libc_init_array>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	2500      	movs	r5, #0
 8006b00:	4e0c      	ldr	r6, [pc, #48]	; (8006b34 <__libc_init_array+0x38>)
 8006b02:	4c0d      	ldr	r4, [pc, #52]	; (8006b38 <__libc_init_array+0x3c>)
 8006b04:	1ba4      	subs	r4, r4, r6
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	42a5      	cmp	r5, r4
 8006b0a:	d109      	bne.n	8006b20 <__libc_init_array+0x24>
 8006b0c:	f000 f8d6 	bl	8006cbc <_init>
 8006b10:	2500      	movs	r5, #0
 8006b12:	4e0a      	ldr	r6, [pc, #40]	; (8006b3c <__libc_init_array+0x40>)
 8006b14:	4c0a      	ldr	r4, [pc, #40]	; (8006b40 <__libc_init_array+0x44>)
 8006b16:	1ba4      	subs	r4, r4, r6
 8006b18:	10a4      	asrs	r4, r4, #2
 8006b1a:	42a5      	cmp	r5, r4
 8006b1c:	d105      	bne.n	8006b2a <__libc_init_array+0x2e>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b24:	4798      	blx	r3
 8006b26:	3501      	adds	r5, #1
 8006b28:	e7ee      	b.n	8006b08 <__libc_init_array+0xc>
 8006b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b2e:	4798      	blx	r3
 8006b30:	3501      	adds	r5, #1
 8006b32:	e7f2      	b.n	8006b1a <__libc_init_array+0x1e>
 8006b34:	08006ed0 	.word	0x08006ed0
 8006b38:	08006ed0 	.word	0x08006ed0
 8006b3c:	08006ed0 	.word	0x08006ed0
 8006b40:	08006ed4 	.word	0x08006ed4

08006b44 <memset>:
 8006b44:	4603      	mov	r3, r0
 8006b46:	4402      	add	r2, r0
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d100      	bne.n	8006b4e <memset+0xa>
 8006b4c:	4770      	bx	lr
 8006b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b52:	e7f9      	b.n	8006b48 <memset+0x4>

08006b54 <_strtol_l.isra.0>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	4680      	mov	r8, r0
 8006b5a:	4689      	mov	r9, r1
 8006b5c:	4692      	mov	sl, r2
 8006b5e:	461e      	mov	r6, r3
 8006b60:	460f      	mov	r7, r1
 8006b62:	463d      	mov	r5, r7
 8006b64:	9808      	ldr	r0, [sp, #32]
 8006b66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b6a:	f000 f885 	bl	8006c78 <__locale_ctype_ptr_l>
 8006b6e:	4420      	add	r0, r4
 8006b70:	7843      	ldrb	r3, [r0, #1]
 8006b72:	f013 0308 	ands.w	r3, r3, #8
 8006b76:	d132      	bne.n	8006bde <_strtol_l.isra.0+0x8a>
 8006b78:	2c2d      	cmp	r4, #45	; 0x2d
 8006b7a:	d132      	bne.n	8006be2 <_strtol_l.isra.0+0x8e>
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	787c      	ldrb	r4, [r7, #1]
 8006b80:	1cbd      	adds	r5, r7, #2
 8006b82:	2e00      	cmp	r6, #0
 8006b84:	d05d      	beq.n	8006c42 <_strtol_l.isra.0+0xee>
 8006b86:	2e10      	cmp	r6, #16
 8006b88:	d109      	bne.n	8006b9e <_strtol_l.isra.0+0x4a>
 8006b8a:	2c30      	cmp	r4, #48	; 0x30
 8006b8c:	d107      	bne.n	8006b9e <_strtol_l.isra.0+0x4a>
 8006b8e:	782b      	ldrb	r3, [r5, #0]
 8006b90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b94:	2b58      	cmp	r3, #88	; 0x58
 8006b96:	d14f      	bne.n	8006c38 <_strtol_l.isra.0+0xe4>
 8006b98:	2610      	movs	r6, #16
 8006b9a:	786c      	ldrb	r4, [r5, #1]
 8006b9c:	3502      	adds	r5, #2
 8006b9e:	2a00      	cmp	r2, #0
 8006ba0:	bf14      	ite	ne
 8006ba2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006ba6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006baa:	2700      	movs	r7, #0
 8006bac:	fbb1 fcf6 	udiv	ip, r1, r6
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006bb6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006bba:	2b09      	cmp	r3, #9
 8006bbc:	d817      	bhi.n	8006bee <_strtol_l.isra.0+0x9a>
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	42a6      	cmp	r6, r4
 8006bc2:	dd23      	ble.n	8006c0c <_strtol_l.isra.0+0xb8>
 8006bc4:	1c7b      	adds	r3, r7, #1
 8006bc6:	d007      	beq.n	8006bd8 <_strtol_l.isra.0+0x84>
 8006bc8:	4584      	cmp	ip, r0
 8006bca:	d31c      	bcc.n	8006c06 <_strtol_l.isra.0+0xb2>
 8006bcc:	d101      	bne.n	8006bd2 <_strtol_l.isra.0+0x7e>
 8006bce:	45a6      	cmp	lr, r4
 8006bd0:	db19      	blt.n	8006c06 <_strtol_l.isra.0+0xb2>
 8006bd2:	2701      	movs	r7, #1
 8006bd4:	fb00 4006 	mla	r0, r0, r6, r4
 8006bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bdc:	e7eb      	b.n	8006bb6 <_strtol_l.isra.0+0x62>
 8006bde:	462f      	mov	r7, r5
 8006be0:	e7bf      	b.n	8006b62 <_strtol_l.isra.0+0xe>
 8006be2:	2c2b      	cmp	r4, #43	; 0x2b
 8006be4:	bf04      	itt	eq
 8006be6:	1cbd      	addeq	r5, r7, #2
 8006be8:	787c      	ldrbeq	r4, [r7, #1]
 8006bea:	461a      	mov	r2, r3
 8006bec:	e7c9      	b.n	8006b82 <_strtol_l.isra.0+0x2e>
 8006bee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006bf2:	2b19      	cmp	r3, #25
 8006bf4:	d801      	bhi.n	8006bfa <_strtol_l.isra.0+0xa6>
 8006bf6:	3c37      	subs	r4, #55	; 0x37
 8006bf8:	e7e2      	b.n	8006bc0 <_strtol_l.isra.0+0x6c>
 8006bfa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006bfe:	2b19      	cmp	r3, #25
 8006c00:	d804      	bhi.n	8006c0c <_strtol_l.isra.0+0xb8>
 8006c02:	3c57      	subs	r4, #87	; 0x57
 8006c04:	e7dc      	b.n	8006bc0 <_strtol_l.isra.0+0x6c>
 8006c06:	f04f 37ff 	mov.w	r7, #4294967295
 8006c0a:	e7e5      	b.n	8006bd8 <_strtol_l.isra.0+0x84>
 8006c0c:	1c7b      	adds	r3, r7, #1
 8006c0e:	d108      	bne.n	8006c22 <_strtol_l.isra.0+0xce>
 8006c10:	2322      	movs	r3, #34	; 0x22
 8006c12:	4608      	mov	r0, r1
 8006c14:	f8c8 3000 	str.w	r3, [r8]
 8006c18:	f1ba 0f00 	cmp.w	sl, #0
 8006c1c:	d107      	bne.n	8006c2e <_strtol_l.isra.0+0xda>
 8006c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c22:	b102      	cbz	r2, 8006c26 <_strtol_l.isra.0+0xd2>
 8006c24:	4240      	negs	r0, r0
 8006c26:	f1ba 0f00 	cmp.w	sl, #0
 8006c2a:	d0f8      	beq.n	8006c1e <_strtol_l.isra.0+0xca>
 8006c2c:	b10f      	cbz	r7, 8006c32 <_strtol_l.isra.0+0xde>
 8006c2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c32:	f8ca 9000 	str.w	r9, [sl]
 8006c36:	e7f2      	b.n	8006c1e <_strtol_l.isra.0+0xca>
 8006c38:	2430      	movs	r4, #48	; 0x30
 8006c3a:	2e00      	cmp	r6, #0
 8006c3c:	d1af      	bne.n	8006b9e <_strtol_l.isra.0+0x4a>
 8006c3e:	2608      	movs	r6, #8
 8006c40:	e7ad      	b.n	8006b9e <_strtol_l.isra.0+0x4a>
 8006c42:	2c30      	cmp	r4, #48	; 0x30
 8006c44:	d0a3      	beq.n	8006b8e <_strtol_l.isra.0+0x3a>
 8006c46:	260a      	movs	r6, #10
 8006c48:	e7a9      	b.n	8006b9e <_strtol_l.isra.0+0x4a>
	...

08006c4c <strtol>:
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <strtol+0x24>)
 8006c4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c50:	681c      	ldr	r4, [r3, #0]
 8006c52:	4d08      	ldr	r5, [pc, #32]	; (8006c74 <strtol+0x28>)
 8006c54:	6a23      	ldr	r3, [r4, #32]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bf08      	it	eq
 8006c5a:	462b      	moveq	r3, r5
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	460a      	mov	r2, r1
 8006c62:	4601      	mov	r1, r0
 8006c64:	4620      	mov	r0, r4
 8006c66:	f7ff ff75 	bl	8006b54 <_strtol_l.isra.0>
 8006c6a:	b003      	add	sp, #12
 8006c6c:	bd30      	pop	{r4, r5, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000010 	.word	0x20000010
 8006c74:	20000074 	.word	0x20000074

08006c78 <__locale_ctype_ptr_l>:
 8006c78:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006c7c:	4770      	bx	lr

08006c7e <__ascii_mbtowc>:
 8006c7e:	b082      	sub	sp, #8
 8006c80:	b901      	cbnz	r1, 8006c84 <__ascii_mbtowc+0x6>
 8006c82:	a901      	add	r1, sp, #4
 8006c84:	b142      	cbz	r2, 8006c98 <__ascii_mbtowc+0x1a>
 8006c86:	b14b      	cbz	r3, 8006c9c <__ascii_mbtowc+0x1e>
 8006c88:	7813      	ldrb	r3, [r2, #0]
 8006c8a:	600b      	str	r3, [r1, #0]
 8006c8c:	7812      	ldrb	r2, [r2, #0]
 8006c8e:	1c10      	adds	r0, r2, #0
 8006c90:	bf18      	it	ne
 8006c92:	2001      	movne	r0, #1
 8006c94:	b002      	add	sp, #8
 8006c96:	4770      	bx	lr
 8006c98:	4610      	mov	r0, r2
 8006c9a:	e7fb      	b.n	8006c94 <__ascii_mbtowc+0x16>
 8006c9c:	f06f 0001 	mvn.w	r0, #1
 8006ca0:	e7f8      	b.n	8006c94 <__ascii_mbtowc+0x16>

08006ca2 <__ascii_wctomb>:
 8006ca2:	b149      	cbz	r1, 8006cb8 <__ascii_wctomb+0x16>
 8006ca4:	2aff      	cmp	r2, #255	; 0xff
 8006ca6:	bf8b      	itete	hi
 8006ca8:	238a      	movhi	r3, #138	; 0x8a
 8006caa:	700a      	strbls	r2, [r1, #0]
 8006cac:	6003      	strhi	r3, [r0, #0]
 8006cae:	2001      	movls	r0, #1
 8006cb0:	bf88      	it	hi
 8006cb2:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cb6:	4770      	bx	lr
 8006cb8:	4608      	mov	r0, r1
 8006cba:	4770      	bx	lr

08006cbc <_init>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	bf00      	nop
 8006cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cc2:	bc08      	pop	{r3}
 8006cc4:	469e      	mov	lr, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_fini>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr
